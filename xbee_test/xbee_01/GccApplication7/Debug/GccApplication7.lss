
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001b4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054b  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000195  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000166  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer_pin_config>:
#include <avr/interrupt.h>

volatile int  i=0,j=0;
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
  92:	a3 9a       	sbi	0x14, 3	; 20
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
  94:	ab 98       	cbi	0x15, 3	; 21
}
  96:	08 95       	ret

00000098 <port_init>:

void port_init (void)
{
	buzzer_pin_config();
  98:	0e 94 49 00 	call	0x92	; 0x92 <buzzer_pin_config>
}
  9c:	08 95       	ret

0000009e <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
  9e:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore | 0x08;
  a0:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
  a2:	85 bb       	out	0x15, r24	; 21
}
  a4:	08 95       	ret

000000a6 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
  a6:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore & 0xF7;
  a8:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
  aa:	85 bb       	out	0x15, r24	; 21
}
  ac:	08 95       	ret

000000ae <__vector_4>:


ISR(TIMER2_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	
 TCNT2=111;
  ba:	8f e6       	ldi	r24, 0x6F	; 111
  bc:	84 bd       	out	0x24, r24	; 36
 

 
 
 
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <pwm_init>:
void pwm_init()
{	cli(); 			//Clears the global interrupts
  ca:	f8 94       	cli
	port_init();
  cc:	0e 94 4c 00 	call	0x98	; 0x98 <port_init>
 
 TCCR2 |= (1<<WGM20)|(1<<COM21)|(1<<WGM21)|(1<<CS20)|(1<<CS21)|(1<<CS22);
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	8f 66       	ori	r24, 0x6F	; 111
  d4:	85 bd       	out	0x25, r24	; 37
 TIMSK |= (1 << TOIE2);
  d6:	89 b7       	in	r24, 0x39	; 57
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	89 bf       	out	0x39, r24	; 57
  
 cli();
  dc:	f8 94       	cli
 DDRD |= (1<<PD7);
  de:	8f 9a       	sbi	0x11, 7	; 17
 TCNT2=111;
  e0:	8f e6       	ldi	r24, 0x6F	; 111
  e2:	84 bd       	out	0x24, r24	; 36
 
 
 sei();
  e4:	78 94       	sei
 
 
}
  e6:	08 95       	ret

000000e8 <main>:
	
}*/
int main(void)
{

 pwm_init();
  e8:	0e 94 65 00 	call	0xca	; 0xca <pwm_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	23 e1       	ldi	r18, 0x13	; 19
  ee:	30 e8       	ldi	r19, 0x80	; 128
  f0:	46 e1       	ldi	r20, 0x16	; 22
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0xa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x14>
  fc:	00 00       	nop
 
 _delay_ms(1000);
 while (1)
 {
	_delay_ms(4000);
	 OCR2=121;//120
  fe:	99 e7       	ldi	r25, 0x79	; 121
	 _delay_ms(60);
	 OCR2=122;//122
 100:	8a e7       	ldi	r24, 0x7A	; 122
 102:	2f e4       	ldi	r18, 0x4F	; 79
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	4a e5       	ldi	r20, 0x5A	; 90
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x2a>
 112:	00 00       	nop
 
 _delay_ms(1000);
 while (1)
 {
	_delay_ms(4000);
	 OCR2=121;//120
 114:	93 bd       	out	0x23, r25	; 35
 116:	2a e9       	ldi	r18, 0x9A	; 154
 118:	39 e5       	ldi	r19, 0x59	; 89
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x34>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x3e>
	 _delay_ms(60);
	 OCR2=122;//122
 126:	83 bd       	out	0x23, r24	; 35
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	30 ec       	ldi	r19, 0xC0	; 192
 12c:	46 e0       	ldi	r20, 0x06	; 6
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x46>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x50>
 138:	00 00       	nop
 13a:	e3 cf       	rjmp	.-58     	; 0x102 <main+0x1a>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
