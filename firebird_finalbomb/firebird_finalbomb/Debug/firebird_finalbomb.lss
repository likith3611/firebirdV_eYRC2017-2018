
firebird_finalbomb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00002974  00002a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000149  00800202  00800202  00002a0a  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003178  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bef  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000041b  00000000  00000000  00005e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001024  00000000  00000000  00006242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00007268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  000076c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026a0  00000000  00000000  00007adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000a17b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e7       	ldi	r30, 0x74	; 116
      fc:	f9 e2       	ldi	r31, 0x29	; 41
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 30       	cpi	r26, 0x02	; 2
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a2 e0       	ldi	r26, 0x02	; 2
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 34       	cpi	r26, 0x4B	; 75
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <main>
     122:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <comapartor>:
}

    return i1;
}
void comapartor(int num,int des)
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	fb 01       	movw	r30, r22
    int l1=num/7;
    int m=num%7;
     134:	27 e0       	ldi	r18, 0x07	; 7
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	b9 01       	movw	r22, r18
     13a:	0e 94 a5 14 	call	0x294a	; 0x294a <__divmodhi4>
     13e:	8b 01       	movw	r16, r22
     140:	ec 01       	movw	r28, r24

    px=l1;
    qx=m;
   
    l1=des/7;
    m=des%7;
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 a5 14 	call	0x294a	; 0x294a <__divmodhi4>
    z=px-l1;
     14a:	06 1b       	sub	r16, r22
     14c:	17 0b       	sbc	r17, r23
     14e:	10 93 aa 02 	sts	0x02AA, r17
     152:	00 93 a9 02 	sts	0x02A9, r16
   
    px=(qx+1)-m;
     156:	9e 01       	movw	r18, r28
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	28 1b       	sub	r18, r24
     15e:	39 0b       	sbc	r19, r25
    qx=(qx-1)-m;
    px=abs(px);
     160:	1a f4       	brpl	.+6      	; 0x168 <comapartor+0x3e>
     162:	30 95       	com	r19
     164:	21 95       	neg	r18
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	30 93 1c 03 	sts	0x031C, r19
     16c:	20 93 1b 03 	sts	0x031B, r18
    l1=des/7;
    m=des%7;
    z=px-l1;
   
    px=(qx+1)-m;
    qx=(qx-1)-m;
     170:	21 97       	sbiw	r28, 0x01	; 1
     172:	c8 1b       	sub	r28, r24
     174:	d9 0b       	sbc	r29, r25
    px=abs(px);
    qx=abs(qx);
     176:	1a f4       	brpl	.+6      	; 0x17e <comapartor+0x54>
     178:	d0 95       	com	r29
     17a:	c1 95       	neg	r28
     17c:	df 4f       	sbci	r29, 0xFF	; 255
     17e:	d0 93 12 03 	sts	0x0312, r29
     182:	c0 93 11 03 	sts	0x0311, r28

}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     190:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     194:	60 93 2a 01 	sts	0x012A, r22
}
     198:	08 95       	ret

0000019a <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     19a:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     19c:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     19e:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     1a0:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
     1a2:	92 b9       	out	0x02, r25	; 2
}
     1a4:	08 95       	ret

000001a6 <obstacle_checker>:
return d10;
 
}

int obstacle_checker(int pack,int r,int map[49])
{
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	9c 01       	movw	r18, r24
     1b4:	7b 01       	movw	r14, r22
     1b6:	ea 01       	movw	r28, r20
    int i1=0;
    if ( map[pack+7]==99  && (r ==1 || r==2) &&(pack < 42) && (pack !=42 || pack != 48) )
     1b8:	fc 01       	movw	r30, r24
     1ba:	37 96       	adiw	r30, 0x07	; 7
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	e4 0f       	add	r30, r20
     1c2:	f5 1f       	adc	r31, r21
     1c4:	80 81       	ld	r24, Z
     1c6:	91 81       	ldd	r25, Z+1	; 0x01
     1c8:	83 36       	cpi	r24, 0x63	; 99
     1ca:	91 05       	cpc	r25, r1
     1cc:	59 f4       	brne	.+22     	; 0x1e4 <obstacle_checker+0x3e>
     1ce:	cb 01       	movw	r24, r22
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	91 05       	cpc	r25, r1
     1d6:	48 f4       	brcc	.+18     	; 0x1ea <obstacle_checker+0x44>
     1d8:	2a 32       	cpi	r18, 0x2A	; 42
     1da:	31 05       	cpc	r19, r1
     1dc:	4c f0       	brlt	.+18     	; 0x1f0 <obstacle_checker+0x4a>
 
}

int obstacle_checker(int pack,int r,int map[49])
{
    int i1=0;
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <obstacle_checker+0x4e>
     1e4:	00 e0       	ldi	r16, 0x00	; 0
     1e6:	10 e0       	ldi	r17, 0x00	; 0
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <obstacle_checker+0x4e>
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	10 e0       	ldi	r17, 0x00	; 0
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <obstacle_checker+0x4e>
    if ( map[pack+7]==99  && (r ==1 || r==2) &&(pack < 42) && (pack !=42 || pack != 48) )
    {
        i1=i1+4;
     1f0:	04 e0       	ldi	r16, 0x04	; 4
     1f2:	10 e0       	ldi	r17, 0x00	; 0
    }
    if(map[pack-1]==99 && ((pack%7) != 0) )
     1f4:	f9 01       	movw	r30, r18
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	ec 0f       	add	r30, r28
     1fe:	fd 1f       	adc	r31, r29
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	83 36       	cpi	r24, 0x63	; 99
     206:	91 05       	cpc	r25, r1
     208:	49 f4       	brne	.+18     	; 0x21c <obstacle_checker+0x76>
     20a:	c9 01       	movw	r24, r18
     20c:	67 e0       	ldi	r22, 0x07	; 7
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	0e 94 a5 14 	call	0x294a	; 0x294a <__divmodhi4>
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	11 f0       	breq	.+4      	; 0x21c <obstacle_checker+0x76>
    {
        i1=i1+8;
     218:	08 5f       	subi	r16, 0xF8	; 248
     21a:	1f 4f       	sbci	r17, 0xFF	; 255
    }
if(map[pack+1]==99 && (((pack-6)%7) != 0))
     21c:	f9 01       	movw	r30, r18
     21e:	31 96       	adiw	r30, 0x01	; 1
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	ec 0f       	add	r30, r28
     226:	fd 1f       	adc	r31, r29
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	83 36       	cpi	r24, 0x63	; 99
     22e:	91 05       	cpc	r25, r1
     230:	51 f4       	brne	.+20     	; 0x246 <obstacle_checker+0xa0>
     232:	c9 01       	movw	r24, r18
     234:	06 97       	sbiw	r24, 0x06	; 6
     236:	67 e0       	ldi	r22, 0x07	; 7
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	0e 94 a5 14 	call	0x294a	; 0x294a <__divmodhi4>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f0       	breq	.+4      	; 0x246 <obstacle_checker+0xa0>
{
    i1=i1+2;
     242:	0e 5f       	subi	r16, 0xFE	; 254
     244:	1f 4f       	sbci	r17, 0xFF	; 255
}
if(map[pack-7]==99 && (r ==4 || r==2) && (pack >= 7) && (pack !=0 || pack!=6))
     246:	c9 01       	movw	r24, r18
     248:	07 97       	sbiw	r24, 0x07	; 7
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	c8 0f       	add	r28, r24
     250:	d9 1f       	adc	r29, r25
     252:	88 81       	ld	r24, Y
     254:	99 81       	ldd	r25, Y+1	; 0x01
     256:	83 36       	cpi	r24, 0x63	; 99
     258:	91 05       	cpc	r25, r1
     25a:	69 f4       	brne	.+26     	; 0x276 <obstacle_checker+0xd0>
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	e8 16       	cp	r14, r24
     260:	f1 04       	cpc	r15, r1
     262:	21 f0       	breq	.+8      	; 0x26c <obstacle_checker+0xc6>
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	e8 16       	cp	r14, r24
     268:	f1 04       	cpc	r15, r1
     26a:	29 f4       	brne	.+10     	; 0x276 <obstacle_checker+0xd0>
     26c:	27 30       	cpi	r18, 0x07	; 7
     26e:	31 05       	cpc	r19, r1
     270:	14 f0       	brlt	.+4      	; 0x276 <obstacle_checker+0xd0>
{
    i1=i1+1;
     272:	0f 5f       	subi	r16, 0xFF	; 255
     274:	1f 4f       	sbci	r17, 0xFF	; 255
}

    return i1;
}
     276:	80 2f       	mov	r24, r16
     278:	91 2f       	mov	r25, r17
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	08 95       	ret

00000288 <path_finder>:
const int pb=0;
 int c[49];
 int d10;
 int map[49];
 int path_finder(int u9,int st,int r40[3] )
{
     288:	2f 92       	push	r2
     28a:	3f 92       	push	r3
     28c:	4f 92       	push	r4
     28e:	5f 92       	push	r5
     290:	6f 92       	push	r6
     292:	7f 92       	push	r7
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	6c 01       	movw	r12, r24
     2ae:	a6 2e       	mov	r10, r22
     2b0:	b7 2e       	mov	r11, r23

    int x,g=0;
     2b2:	cb e1       	ldi	r28, 0x1B	; 27
     2b4:	d2 e0       	ldi	r29, 0x02	; 2
int px,qx,z;
const int pb=0;
 int c[49];
 int d10;
 int map[49];
 int path_finder(int u9,int st,int r40[3] )
     2b6:	0d e7       	ldi	r16, 0x7D	; 125
     2b8:	12 e0       	ldi	r17, 0x02	; 2
     2ba:	fe 01       	movw	r30, r28
     int num=st;


for(x=0;x<49;x++)
{
	map[x]=99;
     2bc:	83 e6       	ldi	r24, 0x63	; 99
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	81 93       	st	Z+, r24
     2c2:	91 93       	st	Z+, r25

    int x,g=0;
     int num=st;


for(x=0;x<49;x++)
     2c4:	e0 17       	cp	r30, r16
     2c6:	f1 07       	cpc	r31, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <path_finder+0x38>
     2ca:	a4 2f       	mov	r26, r20
     2cc:	b5 2f       	mov	r27, r21
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
	map[x]=99;
}	
    int des= u9;
	for(x=0;x<3;x++)
	{
		for(d10=0;d10<49;d10++)
     2d2:	ec 2e       	mov	r14, r28
     2d4:	fd 2e       	mov	r15, r29
		{
			if(r40[x]==d10)
			{
				map[d10]=100;
     2d6:	64 e6       	ldi	r22, 0x64	; 100
     2d8:	70 e0       	ldi	r23, 0x00	; 0
	map[x]=99;
}	
    int des= u9;
	for(x=0;x<3;x++)
	{
		for(d10=0;d10<49;d10++)
     2da:	10 92 90 02 	sts	0x0290, r1
     2de:	10 92 8f 02 	sts	0x028F, r1
     2e2:	ee 2d       	mov	r30, r14
     2e4:	ff 2d       	mov	r31, r15
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(r40[x]==d10)
     2ea:	8d 91       	ld	r24, X+
     2ec:	9c 91       	ld	r25, X
     2ee:	11 97       	sbiw	r26, 0x01	; 1
     2f0:	28 17       	cp	r18, r24
     2f2:	39 07       	cpc	r19, r25
     2f4:	11 f4       	brne	.+4      	; 0x2fa <path_finder+0x72>
			{
				map[d10]=100;
     2f6:	71 83       	std	Z+1, r23	; 0x01
     2f8:	60 83       	st	Z, r22
	map[x]=99;
}	
    int des= u9;
	for(x=0;x<3;x++)
	{
		for(d10=0;d10<49;d10++)
     2fa:	2f 5f       	subi	r18, 0xFF	; 255
     2fc:	3f 4f       	sbci	r19, 0xFF	; 255
     2fe:	30 93 90 02 	sts	0x0290, r19
     302:	20 93 8f 02 	sts	0x028F, r18
     306:	32 96       	adiw	r30, 0x02	; 2
     308:	21 33       	cpi	r18, 0x31	; 49
     30a:	31 05       	cpc	r19, r1
     30c:	71 f7       	brne	.-36     	; 0x2ea <path_finder+0x62>
for(x=0;x<49;x++)
{
	map[x]=99;
}	
    int des= u9;
	for(x=0;x<3;x++)
     30e:	4f 5f       	subi	r20, 0xFF	; 255
     310:	5f 4f       	sbci	r21, 0xFF	; 255
     312:	12 96       	adiw	r26, 0x02	; 2
     314:	43 30       	cpi	r20, 0x03	; 3
     316:	51 05       	cpc	r21, r1
     318:	01 f7       	brne	.-64     	; 0x2da <path_finder+0x52>
			}
		}
	}
	
    d10=0;
	c[d10]=num;
     31a:	a0 92 ad 02 	sts	0x02AD, r10
     31e:	b0 92 ae 02 	sts	0x02AE, r11
	d10++;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	90 93 90 02 	sts	0x0290, r25
     32a:	80 93 8f 02 	sts	0x028F, r24
   while(1)
   {
comapartor(num,des);
     32e:	0f 2e       	mov	r0, r31
     330:	f5 e9       	ldi	r31, 0x95	; 149
     332:	2f 2e       	mov	r2, r31
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	3f 2e       	mov	r3, r31
     338:	f0 2d       	mov	r31, r0
     33a:	8a 2d       	mov	r24, r10
     33c:	9b 2d       	mov	r25, r11
     33e:	b6 01       	movw	r22, r12
     340:	f1 01       	movw	r30, r2
     342:	19 95       	eicall
 int map[49];
 int path_finder(int u9,int st,int r40[3] )
{

    int x,g=0;
     int num=st;
     344:	ea 2c       	mov	r14, r10
     346:	fb 2c       	mov	r15, r11
 int d10;
 int map[49];
 int path_finder(int u9,int st,int r40[3] )
{

    int x,g=0;
     348:	aa 24       	eor	r10, r10
     34a:	bb 24       	eor	r11, r11
       else
       {

g=1;

                 x=obstacle_checker(num,2,map);
     34c:	0f 2e       	mov	r0, r31
     34e:	fb e1       	ldi	r31, 0x1B	; 27
     350:	4f 2e       	mov	r4, r31
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	5f 2e       	mov	r5, r31
     356:	f0 2d       	mov	r31, r0





            c[d10]=num;
     358:	0f 2e       	mov	r0, r31
     35a:	fd ea       	ldi	r31, 0xAD	; 173
     35c:	8f 2e       	mov	r8, r31
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	9f 2e       	mov	r9, r31
     362:	f0 2d       	mov	r31, r0
          
       }
       else
       {

g=1;
     364:	66 24       	eor	r6, r6
     366:	77 24       	eor	r7, r7
     368:	63 94       	inc	r6
     36a:	48 c0       	rjmp	.+144    	; 0x3fc <path_finder+0x174>
    d10=0;
	c[d10]=num;
	d10++;
   while(1)
   {
comapartor(num,des);
     36c:	c7 01       	movw	r24, r14
     36e:	b6 01       	movw	r22, r12
     370:	f1 01       	movw	r30, r2
     372:	19 95       	eicall


if(g==1)
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	a8 16       	cp	r10, r24
     378:	b1 04       	cpc	r11, r1
     37a:	09 f0       	breq	.+2      	; 0x37e <path_finder+0xf6>
     37c:	3f c0       	rjmp	.+126    	; 0x3fc <path_finder+0x174>
{
   if(pb!=z)
     37e:	80 91 a9 02 	lds	r24, 0x02A9
     382:	90 91 aa 02 	lds	r25, 0x02AA
     386:	00 97       	sbiw	r24, 0x00	; 0
     388:	c1 f1       	breq	.+112    	; 0x3fa <path_finder+0x172>
   {

         if(px<qx)
     38a:	80 91 1b 03 	lds	r24, 0x031B
     38e:	90 91 1c 03 	lds	r25, 0x031C
     392:	20 91 11 03 	lds	r18, 0x0311
     396:	30 91 12 03 	lds	r19, 0x0312
     39a:	82 17       	cp	r24, r18
     39c:	93 07       	cpc	r25, r19
     39e:	24 f4       	brge	.+8      	; 0x3a8 <path_finder+0x120>
                ++num;
     3a0:	08 94       	sec
     3a2:	e1 1c       	adc	r14, r1
     3a4:	f1 1c       	adc	r15, r1
     3a6:	06 c0       	rjmp	.+12     	; 0x3b4 <path_finder+0x12c>
                else if(px>qx)
     3a8:	28 17       	cp	r18, r24
     3aa:	39 07       	cpc	r19, r25
     3ac:	1c f4       	brge	.+6      	; 0x3b4 <path_finder+0x12c>
                --num;
     3ae:	08 94       	sec
     3b0:	e1 08       	sbc	r14, r1
     3b2:	f1 08       	sbc	r15, r1
                if((num-7)==des)
     3b4:	c7 01       	movw	r24, r14
     3b6:	07 97       	sbiw	r24, 0x07	; 7
     3b8:	c8 16       	cp	r12, r24
     3ba:	d9 06       	cpc	r13, r25
     3bc:	31 f0       	breq	.+12     	; 0x3ca <path_finder+0x142>
                {
                    g=0;
                }
                else if((num+7)==des)
     3be:	c7 01       	movw	r24, r14
     3c0:	07 96       	adiw	r24, 0x07	; 7
     3c2:	c8 16       	cp	r12, r24
     3c4:	d9 06       	cpc	r13, r25
     3c6:	31 f4       	brne	.+12     	; 0x3d4 <path_finder+0x14c>
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <path_finder+0x148>
                ++num;
                else if(px>qx)
                --num;
                if((num-7)==des)
                {
                    g=0;
     3ca:	aa 24       	eor	r10, r10
     3cc:	bb 24       	eor	r11, r11
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <path_finder+0x14c>
                }
                else if((num+7)==des)
                {
                    g=0;
     3d0:	aa 24       	eor	r10, r10
     3d2:	bb 24       	eor	r11, r11
                }
            c[d10]=num;
     3d4:	20 91 8f 02 	lds	r18, 0x028F
     3d8:	30 91 90 02 	lds	r19, 0x0290
     3dc:	c9 01       	movw	r24, r18
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	88 0d       	add	r24, r8
     3e4:	99 1d       	adc	r25, r9
     3e6:	fc 01       	movw	r30, r24
     3e8:	f1 82       	std	Z+1, r15	; 0x01
     3ea:	e0 82       	st	Z, r14
            d10++;
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	90 93 90 02 	sts	0x0290, r25
     3f4:	80 93 8f 02 	sts	0x028F, r24
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <path_finder+0x174>
comapartor(num,des);


if(g==1)
{
   if(pb!=z)
     3fa:	53 01       	movw	r10, r6
            c[d10]=num;
            d10++;

   }
}
    if(num==des)
     3fc:	ec 14       	cp	r14, r12
     3fe:	fd 04       	cpc	r15, r13
     400:	09 f4       	brne	.+2      	; 0x404 <path_finder+0x17c>
     402:	72 c1       	rjmp	.+740    	; 0x6e8 <path_finder+0x460>
    {break;
    }

     if(((des-num) > 0 )&& (z!=0) )
     404:	c6 01       	movw	r24, r12
     406:	8e 19       	sub	r24, r14
     408:	9f 09       	sbc	r25, r15
     40a:	18 16       	cp	r1, r24
     40c:	19 06       	cpc	r1, r25
     40e:	0c f0       	brlt	.+2      	; 0x412 <path_finder+0x18a>
     410:	48 c0       	rjmp	.+144    	; 0x4a2 <path_finder+0x21a>
     412:	20 91 a9 02 	lds	r18, 0x02A9
     416:	30 91 aa 02 	lds	r19, 0x02AA
     41a:	21 15       	cp	r18, r1
     41c:	31 05       	cpc	r19, r1
     41e:	09 f4       	brne	.+2      	; 0x422 <path_finder+0x19a>
     420:	40 c0       	rjmp	.+128    	; 0x4a2 <path_finder+0x21a>
       {
            x= obstacle_checker(num,1,map);
     422:	c7 01       	movw	r24, r14
     424:	b3 01       	movw	r22, r6
     426:	a2 01       	movw	r20, r4
     428:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <obstacle_checker>

            if(x==2)
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	91 05       	cpc	r25, r1
     430:	21 f4       	brne	.+8      	; 0x43a <path_finder+0x1b2>
            {
             ++num;
     432:	08 94       	sec
     434:	e1 1c       	adc	r14, r1
     436:	f1 1c       	adc	r15, r1
     438:	21 c0       	rjmp	.+66     	; 0x47c <path_finder+0x1f4>

            }
            else if(x==8)
     43a:	88 30       	cpi	r24, 0x08	; 8
     43c:	91 05       	cpc	r25, r1
     43e:	21 f4       	brne	.+8      	; 0x448 <path_finder+0x1c0>
            {
         --num;
     440:	08 94       	sec
     442:	e1 08       	sbc	r14, r1
     444:	f1 08       	sbc	r15, r1
     446:	1a c0       	rjmp	.+52     	; 0x47c <path_finder+0x1f4>

            }
            else if(x==10)
     448:	8a 30       	cpi	r24, 0x0A	; 10
     44a:	91 05       	cpc	r25, r1
     44c:	99 f4       	brne	.+38     	; 0x474 <path_finder+0x1ec>
            {
                if(px<qx)
     44e:	80 91 1b 03 	lds	r24, 0x031B
     452:	90 91 1c 03 	lds	r25, 0x031C
     456:	20 91 11 03 	lds	r18, 0x0311
     45a:	30 91 12 03 	lds	r19, 0x0312
     45e:	82 17       	cp	r24, r18
     460:	93 07       	cpc	r25, r19
     462:	24 f4       	brge	.+8      	; 0x46c <path_finder+0x1e4>
                ++num;
     464:	08 94       	sec
     466:	e1 1c       	adc	r14, r1
     468:	f1 1c       	adc	r15, r1
     46a:	08 c0       	rjmp	.+16     	; 0x47c <path_finder+0x1f4>
                else if(px>qx)
                --num;
                else
                --num;
     46c:	08 94       	sec
     46e:	e1 08       	sbc	r14, r1
     470:	f1 08       	sbc	r15, r1
     472:	04 c0       	rjmp	.+8      	; 0x47c <path_finder+0x1f4>


            }
            else
            {
                num+=7;
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	e8 0e       	add	r14, r24
     47a:	f9 1e       	adc	r15, r25
            }
            c[d10]=num;
     47c:	20 91 8f 02 	lds	r18, 0x028F
     480:	30 91 90 02 	lds	r19, 0x0290
     484:	c9 01       	movw	r24, r18
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	88 0d       	add	r24, r8
     48c:	99 1d       	adc	r25, r9
     48e:	fc 01       	movw	r30, r24
     490:	f1 82       	std	Z+1, r15	; 0x01
     492:	e0 82       	st	Z, r14
            d10++;
     494:	c9 01       	movw	r24, r18
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 90 02 	sts	0x0290, r25
     49c:	80 93 8f 02 	sts	0x028F, r24
    if(num==des)
    {break;
    }

     if(((des-num) > 0 )&& (z!=0) )
       {
     4a0:	65 cf       	rjmp	.-310    	; 0x36c <path_finder+0xe4>
            }
            c[d10]=num;
            d10++;
            
       }
       else if(((des - num)<0) && (z !=0) )
     4a2:	99 23       	and	r25, r25
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <path_finder+0x220>
     4a6:	48 c0       	rjmp	.+144    	; 0x538 <path_finder+0x2b0>
     4a8:	80 91 a9 02 	lds	r24, 0x02A9
     4ac:	90 91 aa 02 	lds	r25, 0x02AA
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <path_finder+0x22e>
     4b4:	41 c0       	rjmp	.+130    	; 0x538 <path_finder+0x2b0>
       {
           x=obstacle_checker(num,4,map);
     4b6:	c7 01       	movw	r24, r14
     4b8:	64 e0       	ldi	r22, 0x04	; 4
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	a2 01       	movw	r20, r4
     4be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <obstacle_checker>
             if(x==2)
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	91 05       	cpc	r25, r1
     4c6:	21 f4       	brne	.+8      	; 0x4d0 <path_finder+0x248>
            {
               ++num;
     4c8:	08 94       	sec
     4ca:	e1 1c       	adc	r14, r1
     4cc:	f1 1c       	adc	r15, r1
     4ce:	21 c0       	rjmp	.+66     	; 0x512 <path_finder+0x28a>
            }
            else if(x==8)
     4d0:	88 30       	cpi	r24, 0x08	; 8
     4d2:	91 05       	cpc	r25, r1
     4d4:	21 f4       	brne	.+8      	; 0x4de <path_finder+0x256>
            {
            --num;
     4d6:	08 94       	sec
     4d8:	e1 08       	sbc	r14, r1
     4da:	f1 08       	sbc	r15, r1
     4dc:	1a c0       	rjmp	.+52     	; 0x512 <path_finder+0x28a>
            }
            else if(x==10)
     4de:	8a 30       	cpi	r24, 0x0A	; 10
     4e0:	91 05       	cpc	r25, r1
     4e2:	99 f4       	brne	.+38     	; 0x50a <path_finder+0x282>
            {

                if(px<qx)
     4e4:	80 91 1b 03 	lds	r24, 0x031B
     4e8:	90 91 1c 03 	lds	r25, 0x031C
     4ec:	20 91 11 03 	lds	r18, 0x0311
     4f0:	30 91 12 03 	lds	r19, 0x0312
     4f4:	82 17       	cp	r24, r18
     4f6:	93 07       	cpc	r25, r19
     4f8:	24 f4       	brge	.+8      	; 0x502 <path_finder+0x27a>
                ++num;
     4fa:	08 94       	sec
     4fc:	e1 1c       	adc	r14, r1
     4fe:	f1 1c       	adc	r15, r1
     500:	08 c0       	rjmp	.+16     	; 0x512 <path_finder+0x28a>
                else if(px>qx)
                --num;
                else
                --num;
     502:	08 94       	sec
     504:	e1 08       	sbc	r14, r1
     506:	f1 08       	sbc	r15, r1
     508:	04 c0       	rjmp	.+8      	; 0x512 <path_finder+0x28a>

            }
            else
            {
               num-=7;
     50a:	89 ef       	ldi	r24, 0xF9	; 249
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	e8 0e       	add	r14, r24
     510:	f9 1e       	adc	r15, r25
            }

           c[d10]=num;
     512:	20 91 8f 02 	lds	r18, 0x028F
     516:	30 91 90 02 	lds	r19, 0x0290
     51a:	c9 01       	movw	r24, r18
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	88 0d       	add	r24, r8
     522:	99 1d       	adc	r25, r9
     524:	fc 01       	movw	r30, r24
     526:	f1 82       	std	Z+1, r15	; 0x01
     528:	e0 82       	st	Z, r14
           d10++;
     52a:	c9 01       	movw	r24, r18
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 90 02 	sts	0x0290, r25
     532:	80 93 8f 02 	sts	0x028F, r24
            c[d10]=num;
            d10++;
            
       }
       else if(((des - num)<0) && (z !=0) )
       {
     536:	1a cf       	rjmp	.-460    	; 0x36c <path_finder+0xe4>
       else
       {

g=1;

                 x=obstacle_checker(num,2,map);
     538:	c7 01       	movw	r24, r14
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	a2 01       	movw	r20, r4
     540:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <obstacle_checker>
                   if(x==15)
     544:	8f 30       	cpi	r24, 0x0F	; 15
     546:	91 05       	cpc	r25, r1
     548:	99 f4       	brne	.+38     	; 0x570 <path_finder+0x2e8>
            {

                if(px<qx)
     54a:	80 91 1b 03 	lds	r24, 0x031B
     54e:	90 91 1c 03 	lds	r25, 0x031C
     552:	20 91 11 03 	lds	r18, 0x0311
     556:	30 91 12 03 	lds	r19, 0x0312
     55a:	82 17       	cp	r24, r18
     55c:	93 07       	cpc	r25, r19
     55e:	24 f4       	brge	.+8      	; 0x568 <path_finder+0x2e0>
                ++num;
     560:	08 94       	sec
     562:	e1 1c       	adc	r14, r1
     564:	f1 1c       	adc	r15, r1
     566:	a8 c0       	rjmp	.+336    	; 0x6b8 <path_finder+0x430>
                else if(px>qx)
                --num;
                else
                --num;
     568:	08 94       	sec
     56a:	e1 08       	sbc	r14, r1
     56c:	f1 08       	sbc	r15, r1
     56e:	a4 c0       	rjmp	.+328    	; 0x6b8 <path_finder+0x430>
            }
           else if((x==11) || (x==14))
     570:	8b 30       	cpi	r24, 0x0B	; 11
     572:	91 05       	cpc	r25, r1
     574:	19 f0       	breq	.+6      	; 0x57c <path_finder+0x2f4>
     576:	8e 30       	cpi	r24, 0x0E	; 14
     578:	91 05       	cpc	r25, r1
     57a:	b9 f4       	brne	.+46     	; 0x5aa <path_finder+0x322>
            {
                   if(px<qx)
     57c:	80 91 1b 03 	lds	r24, 0x031B
     580:	90 91 1c 03 	lds	r25, 0x031C
     584:	20 91 11 03 	lds	r18, 0x0311
     588:	30 91 12 03 	lds	r19, 0x0312
     58c:	82 17       	cp	r24, r18
     58e:	93 07       	cpc	r25, r19
     590:	24 f4       	brge	.+8      	; 0x59a <path_finder+0x312>
                ++num;
     592:	08 94       	sec
     594:	e1 1c       	adc	r14, r1
     596:	f1 1c       	adc	r15, r1
     598:	8f c0       	rjmp	.+286    	; 0x6b8 <path_finder+0x430>
                else if(px>qx)
     59a:	28 17       	cp	r18, r24
     59c:	39 07       	cpc	r19, r25
     59e:	0c f0       	brlt	.+2      	; 0x5a2 <path_finder+0x31a>
     5a0:	8b c0       	rjmp	.+278    	; 0x6b8 <path_finder+0x430>
                --num;
     5a2:	08 94       	sec
     5a4:	e1 08       	sbc	r14, r1
     5a6:	f1 08       	sbc	r15, r1
     5a8:	87 c0       	rjmp	.+270    	; 0x6b8 <path_finder+0x430>
            }
            else if(x==13)
     5aa:	8d 30       	cpi	r24, 0x0D	; 13
     5ac:	91 05       	cpc	r25, r1
     5ae:	c1 f4       	brne	.+48     	; 0x5e0 <path_finder+0x358>
            {
                if(px<qx)
     5b0:	80 91 1b 03 	lds	r24, 0x031B
     5b4:	90 91 1c 03 	lds	r25, 0x031C
     5b8:	20 91 11 03 	lds	r18, 0x0311
     5bc:	30 91 12 03 	lds	r19, 0x0312
     5c0:	82 17       	cp	r24, r18
     5c2:	93 07       	cpc	r25, r19
     5c4:	2c f4       	brge	.+10     	; 0x5d0 <path_finder+0x348>
                num-=7;
     5c6:	89 ef       	ldi	r24, 0xF9	; 249
     5c8:	9f ef       	ldi	r25, 0xFF	; 255
     5ca:	e8 0e       	add	r14, r24
     5cc:	f9 1e       	adc	r15, r25
     5ce:	74 c0       	rjmp	.+232    	; 0x6b8 <path_finder+0x430>
                else if(px>qx)
     5d0:	28 17       	cp	r18, r24
     5d2:	39 07       	cpc	r19, r25
     5d4:	0c f0       	brlt	.+2      	; 0x5d8 <path_finder+0x350>
     5d6:	70 c0       	rjmp	.+224    	; 0x6b8 <path_finder+0x430>
                --num;
     5d8:	08 94       	sec
     5da:	e1 08       	sbc	r14, r1
     5dc:	f1 08       	sbc	r15, r1
     5de:	6c c0       	rjmp	.+216    	; 0x6b8 <path_finder+0x430>

            }
            else if(x==7)
     5e0:	87 30       	cpi	r24, 0x07	; 7
     5e2:	91 05       	cpc	r25, r1
     5e4:	c1 f4       	brne	.+48     	; 0x616 <path_finder+0x38e>
            {
               if(px<qx)
     5e6:	80 91 1b 03 	lds	r24, 0x031B
     5ea:	90 91 1c 03 	lds	r25, 0x031C
     5ee:	20 91 11 03 	lds	r18, 0x0311
     5f2:	30 91 12 03 	lds	r19, 0x0312
     5f6:	82 17       	cp	r24, r18
     5f8:	93 07       	cpc	r25, r19
     5fa:	24 f4       	brge	.+8      	; 0x604 <path_finder+0x37c>
                num++;
     5fc:	08 94       	sec
     5fe:	e1 1c       	adc	r14, r1
     600:	f1 1c       	adc	r15, r1
     602:	5a c0       	rjmp	.+180    	; 0x6b8 <path_finder+0x430>
                else if(px>qx)
     604:	28 17       	cp	r18, r24
     606:	39 07       	cpc	r19, r25
     608:	0c f0       	brlt	.+2      	; 0x60c <path_finder+0x384>
     60a:	56 c0       	rjmp	.+172    	; 0x6b8 <path_finder+0x430>
                num-=7;
     60c:	e9 ef       	ldi	r30, 0xF9	; 249
     60e:	ff ef       	ldi	r31, 0xFF	; 255
     610:	ee 0e       	add	r14, r30
     612:	ff 1e       	adc	r15, r31
     614:	51 c0       	rjmp	.+162    	; 0x6b8 <path_finder+0x430>
            }
            else if(x==1||x==5)
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	91 05       	cpc	r25, r1
     61a:	19 f0       	breq	.+6      	; 0x622 <path_finder+0x39a>
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	91 05       	cpc	r25, r1
     620:	29 f4       	brne	.+10     	; 0x62c <path_finder+0x3a4>
            {
              num-=7;
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	e8 0e       	add	r14, r24
     628:	f9 1e       	adc	r15, r25
     62a:	46 c0       	rjmp	.+140    	; 0x6b8 <path_finder+0x430>
            }
            else if(x==12||x==6)
     62c:	8c 30       	cpi	r24, 0x0C	; 12
     62e:	91 05       	cpc	r25, r1
     630:	19 f0       	breq	.+6      	; 0x638 <path_finder+0x3b0>
     632:	86 30       	cpi	r24, 0x06	; 6
     634:	91 05       	cpc	r25, r1
     636:	d9 f4       	brne	.+54     	; 0x66e <path_finder+0x3e6>
            {if(qx>px)
     638:	80 91 11 03 	lds	r24, 0x0311
     63c:	90 91 12 03 	lds	r25, 0x0312
     640:	20 91 1b 03 	lds	r18, 0x031B
     644:	30 91 1c 03 	lds	r19, 0x031C
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	24 f4       	brge	.+8      	; 0x656 <path_finder+0x3ce>
            num+=1;
     64e:	08 94       	sec
     650:	e1 1c       	adc	r14, r1
     652:	f1 1c       	adc	r15, r1
     654:	31 c0       	rjmp	.+98     	; 0x6b8 <path_finder+0x430>
            else if(qx<px)
     656:	82 17       	cp	r24, r18
     658:	93 07       	cpc	r25, r19
     65a:	24 f4       	brge	.+8      	; 0x664 <path_finder+0x3dc>
                num-=1;
     65c:	08 94       	sec
     65e:	e1 08       	sbc	r14, r1
     660:	f1 08       	sbc	r15, r1
     662:	2a c0       	rjmp	.+84     	; 0x6b8 <path_finder+0x430>
            else
                num+=7;
     664:	e7 e0       	ldi	r30, 0x07	; 7
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ee 0e       	add	r14, r30
     66a:	ff 1e       	adc	r15, r31
     66c:	25 c0       	rjmp	.+74     	; 0x6b8 <path_finder+0x430>
            }
            else if(x==9||x==3)
     66e:	89 30       	cpi	r24, 0x09	; 9
     670:	91 05       	cpc	r25, r1
     672:	19 f0       	breq	.+6      	; 0x67a <path_finder+0x3f2>
     674:	83 30       	cpi	r24, 0x03	; 3
     676:	91 05       	cpc	r25, r1
     678:	d9 f4       	brne	.+54     	; 0x6b0 <path_finder+0x428>
            {if(px<qx)
     67a:	80 91 1b 03 	lds	r24, 0x031B
     67e:	90 91 1c 03 	lds	r25, 0x031C
     682:	20 91 11 03 	lds	r18, 0x0311
     686:	30 91 12 03 	lds	r19, 0x0312
     68a:	82 17       	cp	r24, r18
     68c:	93 07       	cpc	r25, r19
     68e:	24 f4       	brge	.+8      	; 0x698 <path_finder+0x410>
            num+=1;
     690:	08 94       	sec
     692:	e1 1c       	adc	r14, r1
     694:	f1 1c       	adc	r15, r1
     696:	10 c0       	rjmp	.+32     	; 0x6b8 <path_finder+0x430>
            else if(px>qx)
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	24 f4       	brge	.+8      	; 0x6a6 <path_finder+0x41e>
                num-=1;
     69e:	08 94       	sec
     6a0:	e1 08       	sbc	r14, r1
     6a2:	f1 08       	sbc	r15, r1
     6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <path_finder+0x430>
            else
                num-=7;
     6a6:	89 ef       	ldi	r24, 0xF9	; 249
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	e8 0e       	add	r14, r24
     6ac:	f9 1e       	adc	r15, r25
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <path_finder+0x430>

            }

            else
            {
                 num+=7;
     6b0:	e7 e0       	ldi	r30, 0x07	; 7
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ee 0e       	add	r14, r30
     6b6:	ff 1e       	adc	r15, r31





            c[d10]=num;
     6b8:	20 91 8f 02 	lds	r18, 0x028F
     6bc:	30 91 90 02 	lds	r19, 0x0290
     6c0:	c9 01       	movw	r24, r18
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0d       	add	r24, r8
     6c8:	99 1d       	adc	r25, r9
     6ca:	fc 01       	movw	r30, r24
     6cc:	f1 82       	std	Z+1, r15	; 0x01
     6ce:	e0 82       	st	Z, r14
            d10++;
     6d0:	c9 01       	movw	r24, r18
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	90 93 90 02 	sts	0x0290, r25
     6d8:	80 93 8f 02 	sts	0x028F, r24
    d10=0;
	c[d10]=num;
	d10++;
   while(1)
   {
comapartor(num,des);
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	f1 01       	movw	r30, r2
     6e2:	19 95       	eicall
          
       }
       else
       {

g=1;
     6e4:	53 01       	movw	r10, r6
     6e6:	4b ce       	rjmp	.-874    	; 0x37e <path_finder+0xf6>

   }
 
for(num=0;num<49;num++)
{
	map[num]=99;
     6e8:	83 e6       	ldi	r24, 0x63	; 99
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	89 93       	st	Y+, r24
     6ee:	99 93       	st	Y+, r25
       }


   }
 
for(num=0;num<49;num++)
     6f0:	c0 17       	cp	r28, r16
     6f2:	d1 07       	cpc	r29, r17
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <path_finder+0x464>
{
	map[num]=99;
}
return d10;
 
}
     6f6:	80 91 8f 02 	lds	r24, 0x028F
     6fa:	90 91 90 02 	lds	r25, 0x0290
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	9f 90       	pop	r9
     714:	8f 90       	pop	r8
     716:	7f 90       	pop	r7
     718:	6f 90       	pop	r6
     71a:	5f 90       	pop	r5
     71c:	4f 90       	pop	r4
     71e:	3f 90       	pop	r3
     720:	2f 90       	pop	r2
     722:	08 95       	ret

00000724 <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     724:	87 b1       	in	r24, 0x07	; 7
     726:	87 6f       	ori	r24, 0xF7	; 247
     728:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     72a:	88 b1       	in	r24, 0x08	; 8
     72c:	80 78       	andi	r24, 0x80	; 128
     72e:	88 b9       	out	0x08, r24	; 8
}
     730:	08 95       	ret

00000732 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     732:	86 e6       	ldi	r24, 0x66	; 102
     734:	9e e0       	ldi	r25, 0x0E	; 14
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <lcd_set_4bit+0x4>
     73a:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     73c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     73e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     740:	80 e3       	ldi	r24, 0x30	; 48
     742:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     744:	42 9a       	sbi	0x08, 2	; 8
     746:	ef ef       	ldi	r30, 0xFF	; 255
     748:	f7 e4       	ldi	r31, 0x47	; 71
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <lcd_set_4bit+0x18>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <lcd_set_4bit+0x1e>
     750:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     752:	42 98       	cbi	0x08, 2	; 8
     754:	e6 e6       	ldi	r30, 0x66	; 102
     756:	fe e0       	ldi	r31, 0x0E	; 14
     758:	31 97       	sbiw	r30, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <lcd_set_4bit+0x26>
     75c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     75e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     760:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     762:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     764:	42 9a       	sbi	0x08, 2	; 8
     766:	ef ef       	ldi	r30, 0xFF	; 255
     768:	f7 e4       	ldi	r31, 0x47	; 71
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <lcd_set_4bit+0x38>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <lcd_set_4bit+0x3e>
     770:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     772:	42 98       	cbi	0x08, 2	; 8
     774:	e6 e6       	ldi	r30, 0x66	; 102
     776:	fe e0       	ldi	r31, 0x0E	; 14
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <lcd_set_4bit+0x46>
     77c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     77e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     782:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     784:	42 9a       	sbi	0x08, 2	; 8
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	97 e4       	ldi	r25, 0x47	; 71
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <lcd_set_4bit+0x58>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <lcd_set_4bit+0x5e>
     790:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     792:	42 98       	cbi	0x08, 2	; 8
     794:	e6 e6       	ldi	r30, 0x66	; 102
     796:	fe e0       	ldi	r31, 0x0E	; 14
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <lcd_set_4bit+0x66>
     79c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     79e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7a0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     7a2:	80 e2       	ldi	r24, 0x20	; 32
     7a4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     7a6:	42 9a       	sbi	0x08, 2	; 8
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	97 e4       	ldi	r25, 0x47	; 71
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <lcd_set_4bit+0x7a>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <lcd_set_4bit+0x80>
     7b2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     7b4:	42 98       	cbi	0x08, 2	; 8

	
}
     7b6:	08 95       	ret

000007b8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     7b8:	98 b1       	in	r25, 0x08	; 8
     7ba:	9f 70       	andi	r25, 0x0F	; 15
     7bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     7be:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     7c0:	28 2f       	mov	r18, r24
     7c2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     7c4:	92 2b       	or	r25, r18
     7c6:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     7c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     7ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     7cc:	42 9a       	sbi	0x08, 2	; 8
     7ce:	ef ef       	ldi	r30, 0xFF	; 255
     7d0:	f7 e4       	ldi	r31, 0x47	; 71
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <lcd_wr_command+0x1a>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <lcd_wr_command+0x20>
     7d8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     7da:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     7dc:	98 b1       	in	r25, 0x08	; 8
     7de:	9f 70       	andi	r25, 0x0F	; 15
     7e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     7e2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     7e4:	82 95       	swap	r24
     7e6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     7e8:	89 2b       	or	r24, r25
     7ea:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     7ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     7ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     7f0:	42 9a       	sbi	0x08, 2	; 8
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	97 e4       	ldi	r25, 0x47	; 71
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <lcd_wr_command+0x3e>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <lcd_wr_command+0x44>
     7fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     7fe:	42 98       	cbi	0x08, 2	; 8
}
     800:	08 95       	ret

00000802 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     802:	0e 94 99 03 	call	0x732	; 0x732 <lcd_set_4bit>
     806:	86 e6       	ldi	r24, 0x66	; 102
     808:	9e e0       	ldi	r25, 0x0E	; 14
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <lcd_init+0x8>
     80e:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     810:	88 e2       	ldi	r24, 0x28	; 40
     812:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
	lcd_wr_command(0x01);
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
	lcd_wr_command(0x06);
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
	lcd_wr_command(0x0E);
     822:	8e e0       	ldi	r24, 0x0E	; 14
     824:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
	lcd_wr_command(0x80);
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
		
}
     82e:	08 95       	ret

00000830 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     830:	98 b1       	in	r25, 0x08	; 8
     832:	9f 70       	andi	r25, 0x0F	; 15
     834:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     836:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     838:	28 2f       	mov	r18, r24
     83a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     83c:	92 2b       	or	r25, r18
     83e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     840:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     842:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     844:	42 9a       	sbi	0x08, 2	; 8
     846:	ef ef       	ldi	r30, 0xFF	; 255
     848:	f7 e4       	ldi	r31, 0x47	; 71
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <lcd_wr_char+0x1a>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <lcd_wr_char+0x20>
     850:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     852:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     854:	98 b1       	in	r25, 0x08	; 8
     856:	9f 70       	andi	r25, 0x0F	; 15
     858:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     85a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     85c:	82 95       	swap	r24
     85e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     860:	89 2b       	or	r24, r25
     862:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     864:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     866:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     868:	42 9a       	sbi	0x08, 2	; 8
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	97 e4       	ldi	r25, 0x47	; 71
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <lcd_wr_char+0x3e>
     872:	00 c0       	rjmp	.+0      	; 0x874 <lcd_wr_char+0x44>
     874:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     876:	42 98       	cbi	0x08, 2	; 8
}
     878:	08 95       	ret

0000087a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
}
     880:	08 95       	ret

00000882 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
	while(*str != '\0')
     888:	88 81       	ld	r24, Y
     88a:	88 23       	and	r24, r24
     88c:	31 f0       	breq	.+12     	; 0x89a <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     88e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     890:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     894:	89 91       	ld	r24, Y+
     896:	88 23       	and	r24, r24
     898:	d9 f7       	brne	.-10     	; 0x890 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	79 f0       	breq	.+30     	; 0x8c2 <lcd_cursor+0x22>
     8a4:	83 30       	cpi	r24, 0x03	; 3
     8a6:	18 f4       	brcc	.+6      	; 0x8ae <lcd_cursor+0xe>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	c9 f4       	brne	.+50     	; 0x8de <lcd_cursor+0x3e>
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <lcd_cursor+0x18>
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	69 f0       	breq	.+26     	; 0x8cc <lcd_cursor+0x2c>
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	a1 f4       	brne	.+40     	; 0x8de <lcd_cursor+0x3e>
     8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     8b8:	86 2f       	mov	r24, r22
     8ba:	81 58       	subi	r24, 0x81	; 129
     8bc:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
     8c0:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     8c2:	86 2f       	mov	r24, r22
     8c4:	81 54       	subi	r24, 0x41	; 65
     8c6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
     8ca:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     8cc:	86 2f       	mov	r24, r22
     8ce:	8d 56       	subi	r24, 0x6D	; 109
     8d0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
     8d4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     8d6:	86 2f       	mov	r24, r22
     8d8:	8d 52       	subi	r24, 0x2D	; 45
     8da:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
     8de:	08 95       	ret

000008e0 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	8a 01       	movw	r16, r20
     8ea:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     8ec:	88 23       	and	r24, r24
     8ee:	11 f0       	breq	.+4      	; 0x8f4 <lcd_print+0x14>
     8f0:	66 23       	and	r22, r22
     8f2:	19 f4       	brne	.+6      	; 0x8fa <lcd_print+0x1a>
	{
		lcd_home();
     8f4:	0e 94 3d 04 	call	0x87a	; 0x87a <lcd_home>
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     8fa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     8fe:	c5 30       	cpi	r28, 0x05	; 5
     900:	d1 05       	cpc	r29, r1
     902:	71 f4       	brne	.+28     	; 0x920 <lcd_print+0x40>
	{
		million=value/10000+48;
     904:	c8 01       	movw	r24, r16
     906:	60 e1       	ldi	r22, 0x10	; 16
     908:	77 e2       	ldi	r23, 0x27	; 39
     90a:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     90e:	cb 01       	movw	r24, r22
     910:	c0 96       	adiw	r24, 0x30	; 48
     912:	90 93 82 02 	sts	0x0282, r25
     916:	80 93 81 02 	sts	0x0281, r24
		lcd_wr_char(million);
     91a:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
     91e:	03 c0       	rjmp	.+6      	; 0x926 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     920:	c4 30       	cpi	r28, 0x04	; 4
     922:	d1 05       	cpc	r29, r1
     924:	b9 f4       	brne	.+46     	; 0x954 <lcd_print+0x74>
	{
		temp = value/1000;
     926:	c8 01       	movw	r24, r16
     928:	68 ee       	ldi	r22, 0xE8	; 232
     92a:	73 e0       	ldi	r23, 0x03	; 3
     92c:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     930:	cb 01       	movw	r24, r22
     932:	70 93 a6 02 	sts	0x02A6, r23
     936:	60 93 a5 02 	sts	0x02A5, r22
		thousand = temp%10 + 48;
     93a:	6a e0       	ldi	r22, 0x0A	; 10
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     942:	c0 96       	adiw	r24, 0x30	; 48
     944:	90 93 48 03 	sts	0x0348, r25
     948:	80 93 47 03 	sts	0x0347, r24
		lcd_wr_char(thousand);
     94c:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		flag=1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	01 c0       	rjmp	.+2      	; 0x956 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     954:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     956:	c3 30       	cpi	r28, 0x03	; 3
     958:	d1 05       	cpc	r29, r1
     95a:	11 f0       	breq	.+4      	; 0x960 <lcd_print+0x80>
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	b1 f4       	brne	.+44     	; 0x98c <lcd_print+0xac>
	{
		temp = value/100;
     960:	c8 01       	movw	r24, r16
     962:	64 e6       	ldi	r22, 0x64	; 100
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     96a:	cb 01       	movw	r24, r22
     96c:	70 93 a6 02 	sts	0x02A6, r23
     970:	60 93 a5 02 	sts	0x02A5, r22
		hundred = temp%10 + 48;
     974:	6a e0       	ldi	r22, 0x0A	; 10
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     97c:	c0 96       	adiw	r24, 0x30	; 48
     97e:	90 93 1a 03 	sts	0x031A, r25
     982:	80 93 19 03 	sts	0x0319, r24
		lcd_wr_char(hundred);
     986:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		flag=1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     98c:	c2 30       	cpi	r28, 0x02	; 2
     98e:	d1 05       	cpc	r29, r1
     990:	11 f0       	breq	.+4      	; 0x996 <lcd_print+0xb6>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	b1 f4       	brne	.+44     	; 0x9c2 <lcd_print+0xe2>
	{
		temp = value/10;
     996:	2a e0       	ldi	r18, 0x0A	; 10
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	c8 01       	movw	r24, r16
     99c:	b9 01       	movw	r22, r18
     99e:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     9a2:	cb 01       	movw	r24, r22
     9a4:	70 93 a6 02 	sts	0x02A6, r23
     9a8:	60 93 a5 02 	sts	0x02A5, r22
		tens = temp%10 + 48;
     9ac:	b9 01       	movw	r22, r18
     9ae:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     9b2:	c0 96       	adiw	r24, 0x30	; 48
     9b4:	90 93 10 03 	sts	0x0310, r25
     9b8:	80 93 0f 03 	sts	0x030F, r24
		lcd_wr_char(tens);
     9bc:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
		flag=1;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     9c2:	c1 30       	cpi	r28, 0x01	; 1
     9c4:	d1 05       	cpc	r29, r1
     9c6:	11 f0       	breq	.+4      	; 0x9cc <lcd_print+0xec>
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	61 f4       	brne	.+24     	; 0x9e4 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     9cc:	c8 01       	movw	r24, r16
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodhi4>
     9d6:	c0 96       	adiw	r24, 0x30	; 48
     9d8:	90 93 46 03 	sts	0x0346, r25
     9dc:	80 93 45 03 	sts	0x0345, r24
		lcd_wr_char(unit);
     9e0:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	}
	if(digits>5)
     9e4:	c6 30       	cpi	r28, 0x06	; 6
     9e6:	d1 05       	cpc	r29, r1
     9e8:	1c f0       	brlt	.+6      	; 0x9f0 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     9ea:	85 e4       	ldi	r24, 0x45	; 69
     9ec:	0e 94 18 04 	call	0x830	; 0x830 <lcd_wr_char>
	}
	
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <uart_transmit>:
volatile dog=0;
int w,r30[3];
int y78=0,q89=0;
int present;
void uart_transmit(unsigned int data)
{
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	ec 01       	movw	r28, r24
	lcd_print(1,2,data,4);
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	ae 01       	movw	r20, r28
     a06:	24 e0       	ldi	r18, 0x04	; 4
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
	lcd_print(2,2,data+'0',4);
     a0e:	ae 01       	movw	r20, r28
     a10:	40 5d       	subi	r20, 0xD0	; 208
     a12:	5f 4f       	sbci	r21, 0xFF	; 255
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	24 e0       	ldi	r18, 0x04	; 4
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
	
	
	while(!(UCSR0A & (1<<UDRE0)));
     a20:	e0 ec       	ldi	r30, 0xC0	; 192
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	85 ff       	sbrs	r24, 5
     a28:	fd cf       	rjmp	.-6      	; 0xa24 <uart_transmit+0x2a>
	{
			UDR0 = data +'0' ;
     a2a:	c0 5d       	subi	r28, 0xD0	; 208
     a2c:	c0 93 c6 00 	sts	0x00C6, r28
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	9f ef       	ldi	r25, 0xFF	; 255
     a34:	ac e2       	ldi	r26, 0x2C	; 44
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	a0 40       	sbci	r26, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <uart_transmit+0x3c>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <uart_transmit+0x46>
     a40:	00 00       	nop
			_delay_ms(1000);
		
	}

}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <__vector_25>:
SIGNAL(SIG_USART0_RECV)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	0b b6       	in	r0, 0x3b	; 59
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	int DATA = UDR0-'0';
     a6a:	80 91 c6 00 	lds	r24, 0x00C6
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	ac 01       	movw	r20, r24
     a72:	40 53       	subi	r20, 0x30	; 48
     a74:	50 40       	sbci	r21, 0x00	; 0
	if(DATA>=100 && DATA<150)
     a76:	ba 01       	movw	r22, r20
     a78:	9c 01       	movw	r18, r24
     a7a:	24 59       	subi	r18, 0x94	; 148
     a7c:	30 40       	sbci	r19, 0x00	; 0
     a7e:	22 33       	cpi	r18, 0x32	; 50
     a80:	31 05       	cpc	r19, r1
     a82:	b8 f4       	brcc	.+46     	; 0xab2 <__vector_25+0x6a>
	{
		spark_b[j]=DATA-100;
     a84:	e0 91 0a 02 	lds	r30, 0x020A
     a88:	f0 91 0b 02 	lds	r31, 0x020B
     a8c:	9c 01       	movw	r18, r24
     a8e:	24 59       	subi	r18, 0x94	; 148
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e3 5e       	subi	r30, 0xE3	; 227
     a98:	fc 4f       	sbci	r31, 0xFC	; 252
     a9a:	31 83       	std	Z+1, r19	; 0x01
     a9c:	20 83       	st	Z, r18
		j++;
     a9e:	20 91 0a 02 	lds	r18, 0x020A
     aa2:	30 91 0b 02 	lds	r19, 0x020B
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	30 93 0b 02 	sts	0x020B, r19
     aae:	20 93 0a 02 	sts	0x020A, r18
	}
 if(DATA>=0 && DATA <50)
     ab2:	62 33       	cpi	r22, 0x32	; 50
     ab4:	71 05       	cpc	r23, r1
     ab6:	a0 f4       	brcc	.+40     	; 0xae0 <__vector_25+0x98>
{
	spark_r[i]=DATA;
     ab8:	e0 91 0c 02 	lds	r30, 0x020C
     abc:	f0 91 0d 02 	lds	r31, 0x020D
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ef 5c       	subi	r30, 0xCF	; 207
     ac6:	fc 4f       	sbci	r31, 0xFC	; 252
     ac8:	51 83       	std	Z+1, r21	; 0x01
     aca:	40 83       	st	Z, r20
	i++;
     acc:	80 91 0c 02 	lds	r24, 0x020C
     ad0:	90 91 0d 02 	lds	r25, 0x020D
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 0d 02 	sts	0x020D, r25
     ada:	80 93 0c 02 	sts	0x020C, r24
     ade:	2d c0       	rjmp	.+90     	; 0xb3a <__vector_25+0xf2>
	
	
}
 else if(DATA>=50 && DATA<100)
     ae0:	9a 01       	movw	r18, r20
     ae2:	22 53       	subi	r18, 0x32	; 50
     ae4:	30 40       	sbci	r19, 0x00	; 0
     ae6:	22 33       	cpi	r18, 0x32	; 50
     ae8:	31 05       	cpc	r19, r1
     aea:	b0 f4       	brcc	.+44     	; 0xb18 <__vector_25+0xd0>
{
	fire_bird_r[s100]=DATA-50;
     aec:	e0 91 08 02 	lds	r30, 0x0208
     af0:	f0 91 09 02 	lds	r31, 0x0209
     af4:	82 56       	subi	r24, 0x62	; 98
     af6:	90 40       	sbci	r25, 0x00	; 0
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	ef 56       	subi	r30, 0x6F	; 111
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
	s100++;
     b04:	80 91 08 02 	lds	r24, 0x0208
     b08:	90 91 09 02 	lds	r25, 0x0209
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 09 02 	sts	0x0209, r25
     b12:	80 93 08 02 	sts	0x0208, r24
     b16:	11 c0       	rjmp	.+34     	; 0xb3a <__vector_25+0xf2>
} 	

else if (DATA>=150 && DATA <200 )
     b18:	ca 01       	movw	r24, r20
     b1a:	86 59       	subi	r24, 0x96	; 150
     b1c:	90 40       	sbci	r25, 0x00	; 0
     b1e:	82 33       	cpi	r24, 0x32	; 50
     b20:	91 05       	cpc	r25, r1
     b22:	28 f4       	brcc	.+10     	; 0xb2e <__vector_25+0xe6>
	{
           loc1=DATA;
     b24:	50 93 ac 02 	sts	0x02AC, r21
     b28:	40 93 ab 02 	sts	0x02AB, r20
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <__vector_25+0xf2>
	}

	
else 
{
	flag=1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	90 93 15 02 	sts	0x0215, r25
     b36:	80 93 14 02 	sts	0x0214, r24
} 

}
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	7f 91       	pop	r23
     b44:	6f 91       	pop	r22
     b46:	5f 91       	pop	r21
     b48:	4f 91       	pop	r20
     b4a:	3f 91       	pop	r19
     b4c:	2f 91       	pop	r18
     b4e:	0f 90       	pop	r0
     b50:	0b be       	out	0x3b, r0	; 59
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <adc_pin_config>:
//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     b5c:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     b5e:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     b60:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     b64:	10 92 08 01 	sts	0x0108, r1
}
     b68:	08 95       	ret

00000b6a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     b6a:	81 b1       	in	r24, 0x01	; 1
     b6c:	8f 60       	ori	r24, 0x0F	; 15
     b6e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     b70:	82 b1       	in	r24, 0x02	; 2
     b72:	80 7f       	andi	r24, 0xF0	; 240
     b74:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     b76:	ea e0       	ldi	r30, 0x0A	; 10
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	80 81       	ld	r24, Z
     b7c:	88 61       	ori	r24, 0x18	; 24
     b7e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     b80:	eb e0       	ldi	r30, 0x0B	; 11
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	80 81       	ld	r24, Z
     b86:	88 61       	ori	r24, 0x18	; 24
     b88:	80 83       	st	Z, r24
}
     b8a:	08 95       	ret

00000b8c <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
     b8c:	0e 94 92 03 	call	0x724	; 0x724 <lcd_port_config>
	adc_pin_config();
     b90:	0e 94 ae 05 	call	0xb5c	; 0xb5c <adc_pin_config>
	motion_pin_config();	
     b94:	0e 94 b5 05 	call	0xb6a	; 0xb6a <motion_pin_config>
}
     b98:	08 95       	ret

00000b9a <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     b9a:	e1 e2       	ldi	r30, 0x21	; 33
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     bac:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     bb0:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     bb4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     bb8:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     bbc:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     bc0:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     bc4:	89 ea       	ldi	r24, 0xA9	; 169
     bc6:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     bca:	8b e0       	ldi	r24, 0x0B	; 11
     bcc:	80 83       	st	Z, r24
}
     bce:	08 95       	ret

00000bd0 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     bd0:	ea e7       	ldi	r30, 0x7A	; 122
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     bd6:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     bda:	80 e2       	ldi	r24, 0x20	; 32
     bdc:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     be4:	86 e8       	ldi	r24, 0x86	; 134
     be6:	80 83       	st	Z, r24
}
     be8:	08 95       	ret

00000bea <ADC_conversion>:

//Function For ADC Conversion
unsigned char ADC_conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     bea:	88 30       	cpi	r24, 0x08	; 8
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <ADC_conversion+0xa>
	{
		ADCSRB = 0x08;
     bee:	98 e0       	ldi	r25, 0x08	; 8
     bf0:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     bf4:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     bf6:	80 62       	ori	r24, 0x20	; 32
     bf8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     bfc:	ea e7       	ldi	r30, 0x7A	; 122
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 64       	ori	r24, 0x40	; 64
     c04:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     c06:	80 81       	ld	r24, Z
     c08:	84 ff       	sbrs	r24, 4
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <ADC_conversion+0x1c>
	a=ADCH;
     c0c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     c10:	ea e7       	ldi	r30, 0x7A	; 122
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	90 81       	ld	r25, Z
     c16:	90 61       	ori	r25, 0x10	; 16
     c18:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     c1a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     c1e:	08 95       	ret

00000c20 <print_sensor>:

	
	
	void print_sensor(char row,char coloumn,unsigned char channel)
	{
		if(channel==3)
     c20:	43 30       	cpi	r20, 0x03	; 3
     c22:	31 f4       	brne	.+12     	; 0xc30 <print_sensor+0x10>
		{ADC_valueL=ADC_conversion(channel);
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	0e 94 f5 05 	call	0xbea	; 0xbea <ADC_conversion>
     c2a:	80 93 7d 02 	sts	0x027D, r24
     c2e:	08 95       	ret
		
		}
		if(channel==2)
     c30:	42 30       	cpi	r20, 0x02	; 2
     c32:	31 f4       	brne	.+12     	; 0xc40 <print_sensor+0x20>
		{ADC_valueC=ADC_conversion(channel);
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	0e 94 f5 05 	call	0xbea	; 0xbea <ADC_conversion>
     c3a:	80 93 7e 02 	sts	0x027E, r24
     c3e:	08 95       	ret
			
		}
		if(channel==1)
     c40:	41 30       	cpi	r20, 0x01	; 1
     c42:	29 f4       	brne	.+10     	; 0xc4e <print_sensor+0x2e>
		{ADC_valueR=ADC_conversion(channel);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 f5 05 	call	0xbea	; 0xbea <ADC_conversion>
     c4a:	80 93 a7 02 	sts	0x02A7, r24
     c4e:	08 95       	ret

00000c50 <scan>:
	DDRK=0X00;
	PORTK=0X00;
}	
void scan(void)
{
	print_sensor(1,1,1);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	0e 94 10 06 	call	0xc20	; 0xc20 <print_sensor>
	print_sensor(1,5,2);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	65 e0       	ldi	r22, 0x05	; 5
     c5e:	42 e0       	ldi	r20, 0x02	; 2
     c60:	0e 94 10 06 	call	0xc20	; 0xc20 <print_sensor>
	print_sensor(1,9,3);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	69 e0       	ldi	r22, 0x09	; 9
     c68:	43 e0       	ldi	r20, 0x03	; 3
     c6a:	0e 94 10 06 	call	0xc20	; 0xc20 <print_sensor>
	
}
     c6e:	08 95       	ret

00000c70 <Leftback>:
	}
	

void Leftback (void)
{
	velocity(0,90);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	6a e5       	ldi	r22, 0x5A	; 90
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x08);
     c7c:	88 e0       	ldi	r24, 0x08	; 8
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
     c84:	08 95       	ret

00000c86 <Rightback>:
void Rightback (void)
{
	velocity(90,0);
     c86:	8a e5       	ldi	r24, 0x5A	; 90
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x01);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
     c9a:	08 95       	ret

00000c9c <Forward>:

void Forward (void)
{
	velocity(100,100);
     c9c:	84 e6       	ldi	r24, 0x64	; 100
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	64 e6       	ldi	r22, 0x64	; 100
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set (0x06);
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>

	
	
	
}
     cb0:	08 95       	ret

00000cb2 <Backward>:

void Backward (void)
{	velocity(90,90);
     cb2:	8a e5       	ldi	r24, 0x5A	; 90
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	6a e5       	ldi	r22, 0x5A	; 90
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x09);
     cbe:	89 e0       	ldi	r24, 0x09	; 9
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
	
}
     cc6:	08 95       	ret

00000cc8 <Right>:
void Right (void)
{	velocity(110,0);
     cc8:	8e e6       	ldi	r24, 0x6E	; 110
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x0A);
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
	
	
}
     cdc:	08 95       	ret

00000cde <Left1>:
void Left1 (void)
{	velocity(0,90);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	6a e5       	ldi	r22, 0x5A	; 90
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x05);
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>

}
     cf2:	08 95       	ret

00000cf4 <Right1>:
void Right1 (void)
{	velocity(0,90);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	6a e5       	ldi	r22, 0x5A	; 90
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x05);
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>

}
     d08:	08 95       	ret

00000d0a <Left>:

void Left (void)
{	velocity(0,110);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	6e e6       	ldi	r22, 0x6E	; 110
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	0e 94 c8 00 	call	0x190	; 0x190 <velocity>
	motion_set(0x05);
     d16:	85 e0       	ldi	r24, 0x05	; 5
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>

}
     d1e:	08 95       	ret

00000d20 <Stop>:

void Stop (void)
{
	motion_set(0x00);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
     d28:	08 95       	ret

00000d2a <usart_init>:
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
}

void usart_init(void)
{cli();
     d2a:	f8 94       	cli
	UCSR0B = 0x00;
     d2c:	e1 ec       	ldi	r30, 0xC1	; 193
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     d32:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F;
     d3c:	8f e5       	ldi	r24, 0x5F	; 95
     d3e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;
     d42:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     d46:	88 e9       	ldi	r24, 0x98	; 152
     d48:	80 83       	st	Z, r24
	sei();
     d4a:	78 94       	sei
}
     d4c:	08 95       	ret

00000d4e <movement_for_all>:




//movemnt for all
void movement_for_all(){	
     d4e:	2f 92       	push	r2
     d50:	3f 92       	push	r3
     d52:	4f 92       	push	r4
     d54:	5f 92       	push	r5
     d56:	6f 92       	push	r6
     d58:	7f 92       	push	r7
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
	int start=c[0];
     d72:	00 91 ad 02 	lds	r16, 0x02AD
     d76:	10 91 ae 02 	lds	r17, 0x02AE
	int pos=start;
	int x;
	int lenght=0;
	int r,u,dw;
	int d=y78;
     d7a:	80 90 04 02 	lds	r8, 0x0204
     d7e:	90 90 05 02 	lds	r9, 0x0205
	
	
	for(x=0;x<49;x++)
	{if(c[x]!=99)
     d82:	03 36       	cpi	r16, 0x63	; 99
     d84:	11 05       	cpc	r17, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <movement_for_all+0x3c>
     d88:	ac c7       	rjmp	.+3928   	; 0x1ce2 <movement_for_all+0xf94>
     d8a:	0f 2e       	mov	r0, r31
     d8c:	ff ea       	ldi	r31, 0xAF	; 175
     d8e:	6f 2e       	mov	r6, r31
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	7f 2e       	mov	r7, r31
     d94:	f0 2d       	mov	r31, r0
     d96:	f3 01       	movw	r30, r6
		{lenght++;
     d98:	44 24       	eor	r4, r4
     d9a:	55 24       	eor	r5, r5
     d9c:	43 94       	inc	r4
	int r,u,dw;
	int d=y78;
	
	
	for(x=0;x<49;x++)
	{if(c[x]!=99)
     d9e:	81 91       	ld	r24, Z+
     da0:	91 91       	ld	r25, Z+
     da2:	83 36       	cpi	r24, 0x63	; 99
     da4:	91 05       	cpc	r25, r1
     da6:	21 f4       	brne	.+8      	; 0xdb0 <movement_for_all+0x62>
break;
}
	}
	 
	  //for the number of turns
	for (x=1;x<=lenght;x++)
     da8:	14 14       	cp	r1, r4
     daa:	15 04       	cpc	r1, r5
     dac:	44 f0       	brlt	.+16     	; 0xdbe <movement_for_all+0x70>
     dae:	99 c7       	rjmp	.+3890   	; 0x1ce2 <movement_for_all+0xf94>
	int d=y78;
	
	
	for(x=0;x<49;x++)
	{if(c[x]!=99)
		{lenght++;
     db0:	08 94       	sec
     db2:	41 1c       	adc	r4, r1
     db4:	51 1c       	adc	r5, r1
	int lenght=0;
	int r,u,dw;
	int d=y78;
	
	
	for(x=0;x<49;x++)
     db6:	81 e3       	ldi	r24, 0x31	; 49
     db8:	48 16       	cp	r4, r24
     dba:	51 04       	cpc	r5, r1
     dbc:	81 f7       	brne	.-32     	; 0xd9e <movement_for_all+0x50>
	{if(c[x]!=99)
		{lenght++;
     dbe:	ee 24       	eor	r14, r14
     dc0:	ff 24       	eor	r15, r15
     dc2:	e3 94       	inc	r14
			else
			{
				
				Forward();
				_delay_ms(750);
				scan();
     dc4:	c8 e2       	ldi	r28, 0x28	; 40
     dc6:	d6 e0       	ldi	r29, 0x06	; 6
			}Stop();
				_delay_ms(1000);
				pos = pos+1;
				scan();
			}				
		d=1;
     dc8:	22 24       	eor	r2, r2
     dca:	33 24       	eor	r3, r3
     dcc:	23 94       	inc	r2
	}
	 
	  //for the number of turns
	for (x=1;x<=lenght;x++)
	{
lcd_print(1,2,pos,4);
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	a8 01       	movw	r20, r16
     dd4:	24 e0       	ldi	r18, 0x04	; 4
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
		l=pos-1;
     ddc:	58 01       	movw	r10, r16
     dde:	08 94       	sec
     de0:	a1 08       	sbc	r10, r1
     de2:	b1 08       	sbc	r11, r1
     de4:	b0 92 19 02 	sts	0x0219, r11
     de8:	a0 92 18 02 	sts	0x0218, r10
		r=pos+1;
     dec:	68 01       	movw	r12, r16
     dee:	08 94       	sec
     df0:	c1 1c       	adc	r12, r1
     df2:	d1 1c       	adc	r13, r1
		
		/*if(a[i]==pos)
		{
			continue;
		}*/
uart_transmit(pos+200);
     df4:	c8 01       	movw	r24, r16
     df6:	88 53       	subi	r24, 0x38	; 56
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart_transmit>
		if(c[x]==r)
     dfe:	d3 01       	movw	r26, r6
     e00:	8d 91       	ld	r24, X+
     e02:	9d 91       	ld	r25, X+
     e04:	3d 01       	movw	r6, r26
     e06:	8c 15       	cp	r24, r12
     e08:	9d 05       	cpc	r25, r13
     e0a:	09 f0       	breq	.+2      	; 0xe0e <movement_for_all+0xc0>
     e0c:	b7 c1       	rjmp	.+878    	; 0x117c <movement_for_all+0x42e>
		{	
			if(d==1)
     e0e:	b1 e0       	ldi	r27, 0x01	; 1
     e10:	8b 16       	cp	r8, r27
     e12:	91 04       	cpc	r9, r1
     e14:	09 f0       	breq	.+2      	; 0xe18 <movement_for_all+0xca>
     e16:	66 c0       	rjmp	.+204    	; 0xee4 <movement_for_all+0x196>
			{
				Forward();
     e18:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	9f eb       	ldi	r25, 0xBF	; 191
     e20:	a1 e2       	ldi	r26, 0x21	; 33
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	a0 40       	sbci	r26, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <movement_for_all+0xd4>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <movement_for_all+0xde>
     e2c:	00 00       	nop
				_delay_ms(750);
				scan();
     e2e:	fe 01       	movw	r30, r28
     e30:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
     e32:	48 c0       	rjmp	.+144    	; 0xec4 <movement_for_all+0x176>
				{
					scan();
     e34:	fe 01       	movw	r30, r28
     e36:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
     e38:	80 91 7e 02 	lds	r24, 0x027E
     e3c:	83 32       	cpi	r24, 0x23	; 35
     e3e:	09 f4       	brne	.+2      	; 0xe42 <movement_for_all+0xf4>
     e40:	41 c0       	rjmp	.+130    	; 0xec4 <movement_for_all+0x176>
     e42:	80 91 7d 02 	lds	r24, 0x027D
     e46:	83 32       	cpi	r24, 0x23	; 35
     e48:	98 f4       	brcc	.+38     	; 0xe70 <movement_for_all+0x122>
     e4a:	80 91 a7 02 	lds	r24, 0x02A7
     e4e:	84 32       	cpi	r24, 0x24	; 36
     e50:	78 f0       	brcs	.+30     	; 0xe70 <movement_for_all+0x122>
					{
						Right();
     e52:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	9f e7       	ldi	r25, 0x7F	; 127
     e5a:	a4 e0       	ldi	r26, 0x04	; 4
     e5c:	81 50       	subi	r24, 0x01	; 1
     e5e:	90 40       	sbci	r25, 0x00	; 0
     e60:	a0 40       	sbci	r26, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <movement_for_all+0x10e>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <movement_for_all+0x118>
     e66:	00 00       	nop
						
						_delay_ms(100);
						
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
     e68:	80 91 7e 02 	lds	r24, 0x027E
     e6c:	83 32       	cpi	r24, 0x23	; 35
     e6e:	51 f1       	breq	.+84     	; 0xec4 <movement_for_all+0x176>
     e70:	80 91 7d 02 	lds	r24, 0x027D
     e74:	84 32       	cpi	r24, 0x24	; 36
     e76:	78 f0       	brcs	.+30     	; 0xe96 <movement_for_all+0x148>
     e78:	80 91 a7 02 	lds	r24, 0x02A7
     e7c:	83 32       	cpi	r24, 0x23	; 35
     e7e:	58 f4       	brcc	.+22     	; 0xe96 <movement_for_all+0x148>
					{
						Left();
     e80:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	9f e7       	ldi	r25, 0x7F	; 127
     e88:	a4 e0       	ldi	r26, 0x04	; 4
     e8a:	81 50       	subi	r24, 0x01	; 1
     e8c:	90 40       	sbci	r25, 0x00	; 0
     e8e:	a0 40       	sbci	r26, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <movement_for_all+0x13c>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <movement_for_all+0x146>
     e94:	00 00       	nop
						_delay_ms(100);
						
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
     e96:	80 91 7e 02 	lds	r24, 0x027E
     e9a:	84 32       	cpi	r24, 0x24	; 36
     e9c:	98 f0       	brcs	.+38     	; 0xec4 <movement_for_all+0x176>
     e9e:	80 91 7d 02 	lds	r24, 0x027D
     ea2:	83 32       	cpi	r24, 0x23	; 35
     ea4:	78 f4       	brcc	.+30     	; 0xec4 <movement_for_all+0x176>
     ea6:	80 91 a7 02 	lds	r24, 0x02A7
     eaa:	83 32       	cpi	r24, 0x23	; 35
     eac:	58 f4       	brcc	.+22     	; 0xec4 <movement_for_all+0x176>
					{
						Forward();
     eae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	9f e7       	ldi	r25, 0x7F	; 127
     eb6:	a4 e0       	ldi	r26, 0x04	; 4
     eb8:	81 50       	subi	r24, 0x01	; 1
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	a0 40       	sbci	r26, 0x00	; 0
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <movement_for_all+0x16a>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <movement_for_all+0x174>
     ec2:	00 00       	nop
			if(d==1)
			{
				Forward();
				_delay_ms(750);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
     ec4:	80 91 7e 02 	lds	r24, 0x027E
     ec8:	84 32       	cpi	r24, 0x24	; 36
     eca:	08 f4       	brcc	.+2      	; 0xece <movement_for_all+0x180>
     ecc:	b3 cf       	rjmp	.-154    	; 0xe34 <movement_for_all+0xe6>
     ece:	80 91 7d 02 	lds	r24, 0x027D
     ed2:	84 32       	cpi	r24, 0x24	; 36
     ed4:	08 f4       	brcc	.+2      	; 0xed8 <movement_for_all+0x18a>
     ed6:	ae cf       	rjmp	.-164    	; 0xe34 <movement_for_all+0xe6>
     ed8:	80 91 a7 02 	lds	r24, 0x02A7
     edc:	84 32       	cpi	r24, 0x24	; 36
     ede:	08 f4       	brcc	.+2      	; 0xee2 <movement_for_all+0x194>
     ee0:	a9 cf       	rjmp	.-174    	; 0xe34 <movement_for_all+0xe6>
     ee2:	f8 c6       	rjmp	.+3568   	; 0x1cd4 <movement_for_all+0xf86>
				
					}
				}
				
			}
			else if(d==3)
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	89 16       	cp	r8, r25
     ee8:	91 04       	cpc	r9, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <movement_for_all+0x1a0>
     eec:	67 c0       	rjmp	.+206    	; 0xfbc <movement_for_all+0x26e>
			{
				Backward();
     eee:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Backward>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	9f eb       	ldi	r25, 0xBF	; 191
     ef6:	a1 e2       	ldi	r26, 0x21	; 33
     ef8:	81 50       	subi	r24, 0x01	; 1
     efa:	90 40       	sbci	r25, 0x00	; 0
     efc:	a0 40       	sbci	r26, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <movement_for_all+0x1aa>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <movement_for_all+0x1b4>
     f02:	00 00       	nop
				_delay_ms(750);
				scan();
     f04:	fe 01       	movw	r30, r28
     f06:	19 95       	eicall
			
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
     f08:	48 c0       	rjmp	.+144    	; 0xf9a <movement_for_all+0x24c>
				{
					scan();
     f0a:	fe 01       	movw	r30, r28
     f0c:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
     f0e:	80 91 7e 02 	lds	r24, 0x027E
     f12:	83 32       	cpi	r24, 0x23	; 35
     f14:	09 f4       	brne	.+2      	; 0xf18 <movement_for_all+0x1ca>
     f16:	41 c0       	rjmp	.+130    	; 0xf9a <movement_for_all+0x24c>
     f18:	80 91 7d 02 	lds	r24, 0x027D
     f1c:	83 32       	cpi	r24, 0x23	; 35
     f1e:	98 f4       	brcc	.+38     	; 0xf46 <movement_for_all+0x1f8>
     f20:	80 91 a7 02 	lds	r24, 0x02A7
     f24:	84 32       	cpi	r24, 0x24	; 36
     f26:	78 f0       	brcs	.+30     	; 0xf46 <movement_for_all+0x1f8>
					{
						Leftback();
     f28:	0e 94 38 06 	call	0xc70	; 0xc70 <Leftback>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f e7       	ldi	r25, 0x7F	; 127
     f30:	a4 e0       	ldi	r26, 0x04	; 4
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	90 40       	sbci	r25, 0x00	; 0
     f36:	a0 40       	sbci	r26, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <movement_for_all+0x1e4>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <movement_for_all+0x1ee>
     f3c:	00 00       	nop
						_delay_ms(100);
					
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
     f3e:	80 91 7e 02 	lds	r24, 0x027E
     f42:	83 32       	cpi	r24, 0x23	; 35
     f44:	51 f1       	breq	.+84     	; 0xf9a <movement_for_all+0x24c>
     f46:	80 91 7d 02 	lds	r24, 0x027D
     f4a:	84 32       	cpi	r24, 0x24	; 36
     f4c:	78 f0       	brcs	.+30     	; 0xf6c <movement_for_all+0x21e>
     f4e:	80 91 a7 02 	lds	r24, 0x02A7
     f52:	83 32       	cpi	r24, 0x23	; 35
     f54:	58 f4       	brcc	.+22     	; 0xf6c <movement_for_all+0x21e>
					{
						Rightback();
     f56:	0e 94 43 06 	call	0xc86	; 0xc86 <Rightback>
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	9f e7       	ldi	r25, 0x7F	; 127
     f5e:	a4 e0       	ldi	r26, 0x04	; 4
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	a0 40       	sbci	r26, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <movement_for_all+0x212>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <movement_for_all+0x21c>
     f6a:	00 00       	nop
						_delay_ms(100);
					
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
     f6c:	80 91 7e 02 	lds	r24, 0x027E
     f70:	84 32       	cpi	r24, 0x24	; 36
     f72:	98 f0       	brcs	.+38     	; 0xf9a <movement_for_all+0x24c>
     f74:	80 91 7d 02 	lds	r24, 0x027D
     f78:	83 32       	cpi	r24, 0x23	; 35
     f7a:	78 f4       	brcc	.+30     	; 0xf9a <movement_for_all+0x24c>
     f7c:	80 91 a7 02 	lds	r24, 0x02A7
     f80:	83 32       	cpi	r24, 0x23	; 35
     f82:	58 f4       	brcc	.+22     	; 0xf9a <movement_for_all+0x24c>
					{
						Backward();
     f84:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Backward>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f e7       	ldi	r25, 0x7F	; 127
     f8c:	a4 e0       	ldi	r26, 0x04	; 4
     f8e:	81 50       	subi	r24, 0x01	; 1
     f90:	90 40       	sbci	r25, 0x00	; 0
     f92:	a0 40       	sbci	r26, 0x00	; 0
     f94:	e1 f7       	brne	.-8      	; 0xf8e <movement_for_all+0x240>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <movement_for_all+0x24a>
     f98:	00 00       	nop
			{
				Backward();
				_delay_ms(750);
				scan();
			
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
     f9a:	80 91 7e 02 	lds	r24, 0x027E
     f9e:	84 32       	cpi	r24, 0x24	; 36
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <movement_for_all+0x256>
     fa2:	b3 cf       	rjmp	.-154    	; 0xf0a <movement_for_all+0x1bc>
     fa4:	80 91 7d 02 	lds	r24, 0x027D
     fa8:	84 32       	cpi	r24, 0x24	; 36
     faa:	08 f4       	brcc	.+2      	; 0xfae <movement_for_all+0x260>
     fac:	ae cf       	rjmp	.-164    	; 0xf0a <movement_for_all+0x1bc>
     fae:	80 91 a7 02 	lds	r24, 0x02A7
     fb2:	84 32       	cpi	r24, 0x24	; 36
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <movement_for_all+0x26a>
     fb6:	a9 cf       	rjmp	.-174    	; 0xf0a <movement_for_all+0x1bc>
			}Stop();
				_delay_ms(1000);
				pos = pos+1;
				scan();
			}				
		d=1;
     fb8:	41 01       	movw	r8, r2
     fba:	8c c6       	rjmp	.+3352   	; 0x1cd4 <movement_for_all+0xf86>
						
					}
				}
				
			}
			else if(d==0)
     fbc:	81 14       	cp	r8, r1
     fbe:	91 04       	cpc	r9, r1
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <movement_for_all+0x276>
     fc2:	67 c0       	rjmp	.+206    	; 0x1092 <movement_for_all+0x344>
			{
				
			
			
			Right();
     fc4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f eb       	ldi	r25, 0xBF	; 191
     fcc:	a1 e2       	ldi	r26, 0x21	; 33
     fce:	81 50       	subi	r24, 0x01	; 1
     fd0:	90 40       	sbci	r25, 0x00	; 0
     fd2:	a0 40       	sbci	r26, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <movement_for_all+0x280>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <movement_for_all+0x28a>
     fd8:	00 00       	nop
			_delay_ms(750);
			scan();
     fda:	fe 01       	movw	r30, r28
     fdc:	19 95       	eicall
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
     fde:	48 c0       	rjmp	.+144    	; 0x1070 <movement_for_all+0x322>
			{
				scan();
     fe0:	fe 01       	movw	r30, r28
     fe2:	19 95       	eicall
				if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
     fe4:	80 91 7e 02 	lds	r24, 0x027E
     fe8:	83 32       	cpi	r24, 0x23	; 35
     fea:	09 f4       	brne	.+2      	; 0xfee <movement_for_all+0x2a0>
     fec:	41 c0       	rjmp	.+130    	; 0x1070 <movement_for_all+0x322>
     fee:	80 91 7d 02 	lds	r24, 0x027D
     ff2:	83 32       	cpi	r24, 0x23	; 35
     ff4:	98 f4       	brcc	.+38     	; 0x101c <movement_for_all+0x2ce>
     ff6:	80 91 a7 02 	lds	r24, 0x02A7
     ffa:	84 32       	cpi	r24, 0x24	; 36
     ffc:	78 f0       	brcs	.+30     	; 0x101c <movement_for_all+0x2ce>
				{
					Right();
     ffe:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f e7       	ldi	r25, 0x7F	; 127
    1006:	a4 e0       	ldi	r26, 0x04	; 4
    1008:	81 50       	subi	r24, 0x01	; 1
    100a:	90 40       	sbci	r25, 0x00	; 0
    100c:	a0 40       	sbci	r26, 0x00	; 0
    100e:	e1 f7       	brne	.-8      	; 0x1008 <movement_for_all+0x2ba>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <movement_for_all+0x2c4>
    1012:	00 00       	nop
					_delay_ms(100);
				
				}
				if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1014:	80 91 7e 02 	lds	r24, 0x027E
    1018:	83 32       	cpi	r24, 0x23	; 35
    101a:	51 f1       	breq	.+84     	; 0x1070 <movement_for_all+0x322>
    101c:	80 91 7d 02 	lds	r24, 0x027D
    1020:	84 32       	cpi	r24, 0x24	; 36
    1022:	78 f0       	brcs	.+30     	; 0x1042 <movement_for_all+0x2f4>
    1024:	80 91 a7 02 	lds	r24, 0x02A7
    1028:	83 32       	cpi	r24, 0x23	; 35
    102a:	58 f4       	brcc	.+22     	; 0x1042 <movement_for_all+0x2f4>
				{
					Left();
    102c:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9f e7       	ldi	r25, 0x7F	; 127
    1034:	a4 e0       	ldi	r26, 0x04	; 4
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	a0 40       	sbci	r26, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <movement_for_all+0x2e8>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <movement_for_all+0x2f2>
    1040:	00 00       	nop
					_delay_ms(100);
				
				}
				if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1042:	80 91 7e 02 	lds	r24, 0x027E
    1046:	84 32       	cpi	r24, 0x24	; 36
    1048:	98 f0       	brcs	.+38     	; 0x1070 <movement_for_all+0x322>
    104a:	80 91 7d 02 	lds	r24, 0x027D
    104e:	83 32       	cpi	r24, 0x23	; 35
    1050:	78 f4       	brcc	.+30     	; 0x1070 <movement_for_all+0x322>
    1052:	80 91 a7 02 	lds	r24, 0x02A7
    1056:	83 32       	cpi	r24, 0x23	; 35
    1058:	58 f4       	brcc	.+22     	; 0x1070 <movement_for_all+0x322>
				{
					Forward();
    105a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9f e7       	ldi	r25, 0x7F	; 127
    1062:	a4 e0       	ldi	r26, 0x04	; 4
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	a0 40       	sbci	r26, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <movement_for_all+0x316>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <movement_for_all+0x320>
    106e:	00 00       	nop
			
			
			Right();
			_delay_ms(750);
			scan();
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1070:	80 91 7e 02 	lds	r24, 0x027E
    1074:	84 32       	cpi	r24, 0x24	; 36
    1076:	08 f4       	brcc	.+2      	; 0x107a <movement_for_all+0x32c>
    1078:	b3 cf       	rjmp	.-154    	; 0xfe0 <movement_for_all+0x292>
    107a:	80 91 7d 02 	lds	r24, 0x027D
    107e:	84 32       	cpi	r24, 0x24	; 36
    1080:	08 f4       	brcc	.+2      	; 0x1084 <movement_for_all+0x336>
    1082:	ae cf       	rjmp	.-164    	; 0xfe0 <movement_for_all+0x292>
    1084:	80 91 a7 02 	lds	r24, 0x02A7
    1088:	84 32       	cpi	r24, 0x24	; 36
    108a:	08 f4       	brcc	.+2      	; 0x108e <movement_for_all+0x340>
    108c:	a9 cf       	rjmp	.-174    	; 0xfe0 <movement_for_all+0x292>
			}Stop();
				_delay_ms(1000);
				pos = pos+1;
				scan();
			}				
		d=1;
    108e:	41 01       	movw	r8, r2
    1090:	21 c6       	rjmp	.+3138   	; 0x1cd4 <movement_for_all+0xf86>
				
			}
			
			}			
			else 
                            {Left();
    1092:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	9f eb       	ldi	r25, 0xBF	; 191
    109a:	a1 e2       	ldi	r26, 0x21	; 33
    109c:	81 50       	subi	r24, 0x01	; 1
    109e:	90 40       	sbci	r25, 0x00	; 0
    10a0:	a0 40       	sbci	r26, 0x00	; 0
    10a2:	e1 f7       	brne	.-8      	; 0x109c <movement_for_all+0x34e>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <movement_for_all+0x358>
    10a6:	00 00       	nop
                              _delay_ms(750);
			scan();
    10a8:	fe 01       	movw	r30, r28
    10aa:	19 95       	eicall
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    10ac:	48 c0       	rjmp	.+144    	; 0x113e <movement_for_all+0x3f0>
			{
				scan();
    10ae:	fe 01       	movw	r30, r28
    10b0:	19 95       	eicall
				if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    10b2:	80 91 7e 02 	lds	r24, 0x027E
    10b6:	83 32       	cpi	r24, 0x23	; 35
    10b8:	09 f4       	brne	.+2      	; 0x10bc <movement_for_all+0x36e>
    10ba:	41 c0       	rjmp	.+130    	; 0x113e <movement_for_all+0x3f0>
    10bc:	80 91 7d 02 	lds	r24, 0x027D
    10c0:	83 32       	cpi	r24, 0x23	; 35
    10c2:	98 f4       	brcc	.+38     	; 0x10ea <movement_for_all+0x39c>
    10c4:	80 91 a7 02 	lds	r24, 0x02A7
    10c8:	84 32       	cpi	r24, 0x24	; 36
    10ca:	78 f0       	brcs	.+30     	; 0x10ea <movement_for_all+0x39c>
				{
					Right();
    10cc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f e7       	ldi	r25, 0x7F	; 127
    10d4:	a4 e0       	ldi	r26, 0x04	; 4
    10d6:	81 50       	subi	r24, 0x01	; 1
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	a0 40       	sbci	r26, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <movement_for_all+0x388>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <movement_for_all+0x392>
    10e0:	00 00       	nop
					_delay_ms(100);
				
				}
				if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    10e2:	80 91 7e 02 	lds	r24, 0x027E
    10e6:	83 32       	cpi	r24, 0x23	; 35
    10e8:	51 f1       	breq	.+84     	; 0x113e <movement_for_all+0x3f0>
    10ea:	80 91 7d 02 	lds	r24, 0x027D
    10ee:	84 32       	cpi	r24, 0x24	; 36
    10f0:	78 f0       	brcs	.+30     	; 0x1110 <movement_for_all+0x3c2>
    10f2:	80 91 a7 02 	lds	r24, 0x02A7
    10f6:	83 32       	cpi	r24, 0x23	; 35
    10f8:	58 f4       	brcc	.+22     	; 0x1110 <movement_for_all+0x3c2>
				{
					Left();
    10fa:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f e7       	ldi	r25, 0x7F	; 127
    1102:	a4 e0       	ldi	r26, 0x04	; 4
    1104:	81 50       	subi	r24, 0x01	; 1
    1106:	90 40       	sbci	r25, 0x00	; 0
    1108:	a0 40       	sbci	r26, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <movement_for_all+0x3b6>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <movement_for_all+0x3c0>
    110e:	00 00       	nop
					_delay_ms(100);
					
				}
				if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1110:	80 91 7e 02 	lds	r24, 0x027E
    1114:	84 32       	cpi	r24, 0x24	; 36
    1116:	98 f0       	brcs	.+38     	; 0x113e <movement_for_all+0x3f0>
    1118:	80 91 7d 02 	lds	r24, 0x027D
    111c:	83 32       	cpi	r24, 0x23	; 35
    111e:	78 f4       	brcc	.+30     	; 0x113e <movement_for_all+0x3f0>
    1120:	80 91 a7 02 	lds	r24, 0x02A7
    1124:	83 32       	cpi	r24, 0x23	; 35
    1126:	58 f4       	brcc	.+22     	; 0x113e <movement_for_all+0x3f0>
				{
					Forward();
    1128:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	9f e7       	ldi	r25, 0x7F	; 127
    1130:	a4 e0       	ldi	r26, 0x04	; 4
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	90 40       	sbci	r25, 0x00	; 0
    1136:	a0 40       	sbci	r26, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <movement_for_all+0x3e4>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <movement_for_all+0x3ee>
    113c:	00 00       	nop
			}			
			else 
                            {Left();
                              _delay_ms(750);
			scan();
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    113e:	80 91 7e 02 	lds	r24, 0x027E
    1142:	84 32       	cpi	r24, 0x24	; 36
    1144:	08 f4       	brcc	.+2      	; 0x1148 <movement_for_all+0x3fa>
    1146:	b3 cf       	rjmp	.-154    	; 0x10ae <movement_for_all+0x360>
    1148:	80 91 7d 02 	lds	r24, 0x027D
    114c:	84 32       	cpi	r24, 0x24	; 36
    114e:	08 f4       	brcc	.+2      	; 0x1152 <movement_for_all+0x404>
    1150:	ae cf       	rjmp	.-164    	; 0x10ae <movement_for_all+0x360>
    1152:	80 91 a7 02 	lds	r24, 0x02A7
    1156:	84 32       	cpi	r24, 0x24	; 36
    1158:	08 f4       	brcc	.+2      	; 0x115c <movement_for_all+0x40e>
    115a:	a9 cf       	rjmp	.-174    	; 0x10ae <movement_for_all+0x360>
					Forward();
					_delay_ms(100);
				
				}
				
			}Stop();
    115c:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	9f ef       	ldi	r25, 0xFF	; 255
    1164:	ac e2       	ldi	r26, 0x2C	; 44
    1166:	81 50       	subi	r24, 0x01	; 1
    1168:	90 40       	sbci	r25, 0x00	; 0
    116a:	a0 40       	sbci	r26, 0x00	; 0
    116c:	e1 f7       	brne	.-8      	; 0x1166 <movement_for_all+0x418>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <movement_for_all+0x422>
    1170:	00 00       	nop
				_delay_ms(1000);
				pos = pos+1;
				scan();
    1172:	fe 01       	movw	r30, r28
    1174:	19 95       	eicall
				
				}
				
			}Stop();
				_delay_ms(1000);
				pos = pos+1;
    1176:	86 01       	movw	r16, r12
				scan();
			}				
		d=1;
    1178:	41 01       	movw	r8, r2
    117a:	ac c5       	rjmp	.+2904   	; 0x1cd4 <movement_for_all+0xf86>


			
		}

		else if(c[x]==l)
    117c:	20 91 18 02 	lds	r18, 0x0218
    1180:	30 91 19 02 	lds	r19, 0x0219
    1184:	82 17       	cp	r24, r18
    1186:	93 07       	cpc	r25, r19
    1188:	09 f0       	breq	.+2      	; 0x118c <movement_for_all+0x43e>
    118a:	b9 c1       	rjmp	.+882    	; 0x14fe <movement_for_all+0x7b0>
		{
			if(d==3)
    118c:	93 e0       	ldi	r25, 0x03	; 3
    118e:	89 16       	cp	r8, r25
    1190:	91 04       	cpc	r9, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <movement_for_all+0x448>
    1194:	66 c0       	rjmp	.+204    	; 0x1262 <movement_for_all+0x514>
			{
				Forward();
    1196:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f eb       	ldi	r25, 0xBF	; 191
    119e:	a1 e2       	ldi	r26, 0x21	; 33
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	a0 40       	sbci	r26, 0x00	; 0
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <movement_for_all+0x452>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <movement_for_all+0x45c>
    11aa:	00 00       	nop
				_delay_ms(750);
				scan();
    11ac:	fe 01       	movw	r30, r28
    11ae:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    11b0:	48 c0       	rjmp	.+144    	; 0x1242 <movement_for_all+0x4f4>
				{
					scan();
    11b2:	fe 01       	movw	r30, r28
    11b4:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    11b6:	80 91 7e 02 	lds	r24, 0x027E
    11ba:	83 32       	cpi	r24, 0x23	; 35
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <movement_for_all+0x472>
    11be:	41 c0       	rjmp	.+130    	; 0x1242 <movement_for_all+0x4f4>
    11c0:	80 91 7d 02 	lds	r24, 0x027D
    11c4:	83 32       	cpi	r24, 0x23	; 35
    11c6:	98 f4       	brcc	.+38     	; 0x11ee <movement_for_all+0x4a0>
    11c8:	80 91 a7 02 	lds	r24, 0x02A7
    11cc:	84 32       	cpi	r24, 0x24	; 36
    11ce:	78 f0       	brcs	.+30     	; 0x11ee <movement_for_all+0x4a0>
					{
						Right();
    11d0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f e7       	ldi	r25, 0x7F	; 127
    11d8:	a4 e0       	ldi	r26, 0x04	; 4
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	a0 40       	sbci	r26, 0x00	; 0
    11e0:	e1 f7       	brne	.-8      	; 0x11da <movement_for_all+0x48c>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <movement_for_all+0x496>
    11e4:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    11e6:	80 91 7e 02 	lds	r24, 0x027E
    11ea:	83 32       	cpi	r24, 0x23	; 35
    11ec:	51 f1       	breq	.+84     	; 0x1242 <movement_for_all+0x4f4>
    11ee:	80 91 7d 02 	lds	r24, 0x027D
    11f2:	84 32       	cpi	r24, 0x24	; 36
    11f4:	78 f0       	brcs	.+30     	; 0x1214 <movement_for_all+0x4c6>
    11f6:	80 91 a7 02 	lds	r24, 0x02A7
    11fa:	83 32       	cpi	r24, 0x23	; 35
    11fc:	58 f4       	brcc	.+22     	; 0x1214 <movement_for_all+0x4c6>
					{
						Left();
    11fe:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f e7       	ldi	r25, 0x7F	; 127
    1206:	a4 e0       	ldi	r26, 0x04	; 4
    1208:	81 50       	subi	r24, 0x01	; 1
    120a:	90 40       	sbci	r25, 0x00	; 0
    120c:	a0 40       	sbci	r26, 0x00	; 0
    120e:	e1 f7       	brne	.-8      	; 0x1208 <movement_for_all+0x4ba>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <movement_for_all+0x4c4>
    1212:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1214:	80 91 7e 02 	lds	r24, 0x027E
    1218:	84 32       	cpi	r24, 0x24	; 36
    121a:	98 f0       	brcs	.+38     	; 0x1242 <movement_for_all+0x4f4>
    121c:	80 91 7d 02 	lds	r24, 0x027D
    1220:	83 32       	cpi	r24, 0x23	; 35
    1222:	78 f4       	brcc	.+30     	; 0x1242 <movement_for_all+0x4f4>
    1224:	80 91 a7 02 	lds	r24, 0x02A7
    1228:	83 32       	cpi	r24, 0x23	; 35
    122a:	58 f4       	brcc	.+22     	; 0x1242 <movement_for_all+0x4f4>
					{
						Forward();
    122c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	9f e7       	ldi	r25, 0x7F	; 127
    1234:	a4 e0       	ldi	r26, 0x04	; 4
    1236:	81 50       	subi	r24, 0x01	; 1
    1238:	90 40       	sbci	r25, 0x00	; 0
    123a:	a0 40       	sbci	r26, 0x00	; 0
    123c:	e1 f7       	brne	.-8      	; 0x1236 <movement_for_all+0x4e8>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <movement_for_all+0x4f2>
    1240:	00 00       	nop
			if(d==3)
			{
				Forward();
				_delay_ms(750);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1242:	80 91 7e 02 	lds	r24, 0x027E
    1246:	84 32       	cpi	r24, 0x24	; 36
    1248:	08 f4       	brcc	.+2      	; 0x124c <movement_for_all+0x4fe>
    124a:	b3 cf       	rjmp	.-154    	; 0x11b2 <movement_for_all+0x464>
    124c:	80 91 7d 02 	lds	r24, 0x027D
    1250:	84 32       	cpi	r24, 0x24	; 36
    1252:	08 f4       	brcc	.+2      	; 0x1256 <movement_for_all+0x508>
    1254:	ae cf       	rjmp	.-164    	; 0x11b2 <movement_for_all+0x464>
    1256:	80 91 a7 02 	lds	r24, 0x02A7
    125a:	84 32       	cpi	r24, 0x24	; 36
    125c:	08 f4       	brcc	.+2      	; 0x1260 <movement_for_all+0x512>
    125e:	a9 cf       	rjmp	.-174    	; 0x11b2 <movement_for_all+0x464>
    1260:	3a c1       	rjmp	.+628    	; 0x14d6 <movement_for_all+0x788>
						_delay_ms(100);
					}
				}
				
			}
			else if(d==1)
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	89 16       	cp	r8, r25
    1266:	91 04       	cpc	r9, r1
    1268:	09 f0       	breq	.+2      	; 0x126c <movement_for_all+0x51e>
    126a:	66 c0       	rjmp	.+204    	; 0x1338 <movement_for_all+0x5ea>
			{
				Left();
    126c:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f ef       	ldi	r25, 0xFF	; 255
    1274:	a9 e5       	ldi	r26, 0x59	; 89
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	90 40       	sbci	r25, 0x00	; 0
    127a:	a0 40       	sbci	r26, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <movement_for_all+0x528>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <movement_for_all+0x532>
    1280:	00 00       	nop
				_delay_ms(2000);
				scan();
    1282:	fe 01       	movw	r30, r28
    1284:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1286:	48 c0       	rjmp	.+144    	; 0x1318 <movement_for_all+0x5ca>
				{
					scan();
    1288:	fe 01       	movw	r30, r28
    128a:	19 95       	eicall
						if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    128c:	80 91 7e 02 	lds	r24, 0x027E
    1290:	83 32       	cpi	r24, 0x23	; 35
    1292:	09 f4       	brne	.+2      	; 0x1296 <movement_for_all+0x548>
    1294:	41 c0       	rjmp	.+130    	; 0x1318 <movement_for_all+0x5ca>
    1296:	80 91 7d 02 	lds	r24, 0x027D
    129a:	83 32       	cpi	r24, 0x23	; 35
    129c:	98 f4       	brcc	.+38     	; 0x12c4 <movement_for_all+0x576>
    129e:	80 91 a7 02 	lds	r24, 0x02A7
    12a2:	84 32       	cpi	r24, 0x24	; 36
    12a4:	78 f0       	brcs	.+30     	; 0x12c4 <movement_for_all+0x576>
						{
							Right();
    12a6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	9f e7       	ldi	r25, 0x7F	; 127
    12ae:	a4 e0       	ldi	r26, 0x04	; 4
    12b0:	81 50       	subi	r24, 0x01	; 1
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	a0 40       	sbci	r26, 0x00	; 0
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <movement_for_all+0x562>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <movement_for_all+0x56c>
    12ba:	00 00       	nop
							_delay_ms(100);
						}
						if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    12bc:	80 91 7e 02 	lds	r24, 0x027E
    12c0:	83 32       	cpi	r24, 0x23	; 35
    12c2:	51 f1       	breq	.+84     	; 0x1318 <movement_for_all+0x5ca>
    12c4:	80 91 7d 02 	lds	r24, 0x027D
    12c8:	84 32       	cpi	r24, 0x24	; 36
    12ca:	78 f0       	brcs	.+30     	; 0x12ea <movement_for_all+0x59c>
    12cc:	80 91 a7 02 	lds	r24, 0x02A7
    12d0:	83 32       	cpi	r24, 0x23	; 35
    12d2:	58 f4       	brcc	.+22     	; 0x12ea <movement_for_all+0x59c>
						{
							Left();
    12d4:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f e7       	ldi	r25, 0x7F	; 127
    12dc:	a4 e0       	ldi	r26, 0x04	; 4
    12de:	81 50       	subi	r24, 0x01	; 1
    12e0:	90 40       	sbci	r25, 0x00	; 0
    12e2:	a0 40       	sbci	r26, 0x00	; 0
    12e4:	e1 f7       	brne	.-8      	; 0x12de <movement_for_all+0x590>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <movement_for_all+0x59a>
    12e8:	00 00       	nop
							_delay_ms(100);
						}
						if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    12ea:	80 91 7e 02 	lds	r24, 0x027E
    12ee:	84 32       	cpi	r24, 0x24	; 36
    12f0:	98 f0       	brcs	.+38     	; 0x1318 <movement_for_all+0x5ca>
    12f2:	80 91 7d 02 	lds	r24, 0x027D
    12f6:	83 32       	cpi	r24, 0x23	; 35
    12f8:	78 f4       	brcc	.+30     	; 0x1318 <movement_for_all+0x5ca>
    12fa:	80 91 a7 02 	lds	r24, 0x02A7
    12fe:	83 32       	cpi	r24, 0x23	; 35
    1300:	58 f4       	brcc	.+22     	; 0x1318 <movement_for_all+0x5ca>
						{
							Forward();
    1302:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	9f e7       	ldi	r25, 0x7F	; 127
    130a:	a4 e0       	ldi	r26, 0x04	; 4
    130c:	81 50       	subi	r24, 0x01	; 1
    130e:	90 40       	sbci	r25, 0x00	; 0
    1310:	a0 40       	sbci	r26, 0x00	; 0
    1312:	e1 f7       	brne	.-8      	; 0x130c <movement_for_all+0x5be>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <movement_for_all+0x5c8>
    1316:	00 00       	nop
			else if(d==1)
			{
				Left();
				_delay_ms(2000);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1318:	80 91 7e 02 	lds	r24, 0x027E
    131c:	84 32       	cpi	r24, 0x24	; 36
    131e:	08 f4       	brcc	.+2      	; 0x1322 <movement_for_all+0x5d4>
    1320:	b3 cf       	rjmp	.-154    	; 0x1288 <movement_for_all+0x53a>
    1322:	80 91 7d 02 	lds	r24, 0x027D
    1326:	84 32       	cpi	r24, 0x24	; 36
    1328:	08 f4       	brcc	.+2      	; 0x132c <movement_for_all+0x5de>
    132a:	ae cf       	rjmp	.-164    	; 0x1288 <movement_for_all+0x53a>
    132c:	80 91 a7 02 	lds	r24, 0x02A7
    1330:	84 32       	cpi	r24, 0x24	; 36
    1332:	08 f4       	brcc	.+2      	; 0x1336 <movement_for_all+0x5e8>
    1334:	a9 cf       	rjmp	.-174    	; 0x1288 <movement_for_all+0x53a>
    1336:	cf c0       	rjmp	.+414    	; 0x14d6 <movement_for_all+0x788>
							_delay_ms(100);
						}
				}
				
			}
			else if(d==0)
    1338:	81 14       	cp	r8, r1
    133a:	91 04       	cpc	r9, r1
    133c:	09 f0       	breq	.+2      	; 0x1340 <movement_for_all+0x5f2>
    133e:	66 c0       	rjmp	.+204    	; 0x140c <movement_for_all+0x6be>
			{
				
			
			Left();
    1340:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f eb       	ldi	r25, 0xBF	; 191
    1348:	a1 e2       	ldi	r26, 0x21	; 33
    134a:	81 50       	subi	r24, 0x01	; 1
    134c:	90 40       	sbci	r25, 0x00	; 0
    134e:	a0 40       	sbci	r26, 0x00	; 0
    1350:	e1 f7       	brne	.-8      	; 0x134a <movement_for_all+0x5fc>
    1352:	00 c0       	rjmp	.+0      	; 0x1354 <movement_for_all+0x606>
    1354:	00 00       	nop
			_delay_ms(750);
			scan();
    1356:	fe 01       	movw	r30, r28
    1358:	19 95       	eicall
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    135a:	48 c0       	rjmp	.+144    	; 0x13ec <movement_for_all+0x69e>
			{
				scan();
    135c:	fe 01       	movw	r30, r28
    135e:	19 95       	eicall
				if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1360:	80 91 7e 02 	lds	r24, 0x027E
    1364:	83 32       	cpi	r24, 0x23	; 35
    1366:	09 f4       	brne	.+2      	; 0x136a <movement_for_all+0x61c>
    1368:	41 c0       	rjmp	.+130    	; 0x13ec <movement_for_all+0x69e>
    136a:	80 91 7d 02 	lds	r24, 0x027D
    136e:	83 32       	cpi	r24, 0x23	; 35
    1370:	98 f4       	brcc	.+38     	; 0x1398 <movement_for_all+0x64a>
    1372:	80 91 a7 02 	lds	r24, 0x02A7
    1376:	84 32       	cpi	r24, 0x24	; 36
    1378:	78 f0       	brcs	.+30     	; 0x1398 <movement_for_all+0x64a>
				{
					Right();
    137a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	9f e7       	ldi	r25, 0x7F	; 127
    1382:	a4 e0       	ldi	r26, 0x04	; 4
    1384:	81 50       	subi	r24, 0x01	; 1
    1386:	90 40       	sbci	r25, 0x00	; 0
    1388:	a0 40       	sbci	r26, 0x00	; 0
    138a:	e1 f7       	brne	.-8      	; 0x1384 <movement_for_all+0x636>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <movement_for_all+0x640>
    138e:	00 00       	nop
					_delay_ms(100);
				}
				if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1390:	80 91 7e 02 	lds	r24, 0x027E
    1394:	83 32       	cpi	r24, 0x23	; 35
    1396:	51 f1       	breq	.+84     	; 0x13ec <movement_for_all+0x69e>
    1398:	80 91 7d 02 	lds	r24, 0x027D
    139c:	84 32       	cpi	r24, 0x24	; 36
    139e:	78 f0       	brcs	.+30     	; 0x13be <movement_for_all+0x670>
    13a0:	80 91 a7 02 	lds	r24, 0x02A7
    13a4:	83 32       	cpi	r24, 0x23	; 35
    13a6:	58 f4       	brcc	.+22     	; 0x13be <movement_for_all+0x670>
				{
					Left();
    13a8:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	9f e7       	ldi	r25, 0x7F	; 127
    13b0:	a4 e0       	ldi	r26, 0x04	; 4
    13b2:	81 50       	subi	r24, 0x01	; 1
    13b4:	90 40       	sbci	r25, 0x00	; 0
    13b6:	a0 40       	sbci	r26, 0x00	; 0
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <movement_for_all+0x664>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <movement_for_all+0x66e>
    13bc:	00 00       	nop
					_delay_ms(100);
				}
				if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    13be:	80 91 7e 02 	lds	r24, 0x027E
    13c2:	84 32       	cpi	r24, 0x24	; 36
    13c4:	98 f0       	brcs	.+38     	; 0x13ec <movement_for_all+0x69e>
    13c6:	80 91 7d 02 	lds	r24, 0x027D
    13ca:	83 32       	cpi	r24, 0x23	; 35
    13cc:	78 f4       	brcc	.+30     	; 0x13ec <movement_for_all+0x69e>
    13ce:	80 91 a7 02 	lds	r24, 0x02A7
    13d2:	83 32       	cpi	r24, 0x23	; 35
    13d4:	58 f4       	brcc	.+22     	; 0x13ec <movement_for_all+0x69e>
				{
					Forward();
    13d6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9f e7       	ldi	r25, 0x7F	; 127
    13de:	a4 e0       	ldi	r26, 0x04	; 4
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	a0 40       	sbci	r26, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <movement_for_all+0x692>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <movement_for_all+0x69c>
    13ea:	00 00       	nop
				
			
			Left();
			_delay_ms(750);
			scan();
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    13ec:	80 91 7e 02 	lds	r24, 0x027E
    13f0:	84 32       	cpi	r24, 0x24	; 36
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <movement_for_all+0x6a8>
    13f4:	b3 cf       	rjmp	.-154    	; 0x135c <movement_for_all+0x60e>
    13f6:	80 91 7d 02 	lds	r24, 0x027D
    13fa:	84 32       	cpi	r24, 0x24	; 36
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <movement_for_all+0x6b2>
    13fe:	ae cf       	rjmp	.-164    	; 0x135c <movement_for_all+0x60e>
    1400:	80 91 a7 02 	lds	r24, 0x02A7
    1404:	84 32       	cpi	r24, 0x24	; 36
    1406:	08 f4       	brcc	.+2      	; 0x140a <movement_for_all+0x6bc>
    1408:	a9 cf       	rjmp	.-174    	; 0x135c <movement_for_all+0x60e>
    140a:	65 c0       	rjmp	.+202    	; 0x14d6 <movement_for_all+0x788>
			}
			}			
else
{

			Right();
    140c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f eb       	ldi	r25, 0xBF	; 191
    1414:	a1 e2       	ldi	r26, 0x21	; 33
    1416:	81 50       	subi	r24, 0x01	; 1
    1418:	90 40       	sbci	r25, 0x00	; 0
    141a:	a0 40       	sbci	r26, 0x00	; 0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <movement_for_all+0x6c8>
    141e:	00 c0       	rjmp	.+0      	; 0x1420 <movement_for_all+0x6d2>
    1420:	00 00       	nop
			_delay_ms(750);
			scan();
    1422:	fe 01       	movw	r30, r28
    1424:	19 95       	eicall
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1426:	48 c0       	rjmp	.+144    	; 0x14b8 <movement_for_all+0x76a>
			{
				scan();
    1428:	fe 01       	movw	r30, r28
    142a:	19 95       	eicall
				if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    142c:	80 91 7e 02 	lds	r24, 0x027E
    1430:	83 32       	cpi	r24, 0x23	; 35
    1432:	09 f4       	brne	.+2      	; 0x1436 <movement_for_all+0x6e8>
    1434:	41 c0       	rjmp	.+130    	; 0x14b8 <movement_for_all+0x76a>
    1436:	80 91 7d 02 	lds	r24, 0x027D
    143a:	83 32       	cpi	r24, 0x23	; 35
    143c:	98 f4       	brcc	.+38     	; 0x1464 <movement_for_all+0x716>
    143e:	80 91 a7 02 	lds	r24, 0x02A7
    1442:	84 32       	cpi	r24, 0x24	; 36
    1444:	78 f0       	brcs	.+30     	; 0x1464 <movement_for_all+0x716>
				{
					Right();
    1446:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f e7       	ldi	r25, 0x7F	; 127
    144e:	a4 e0       	ldi	r26, 0x04	; 4
    1450:	81 50       	subi	r24, 0x01	; 1
    1452:	90 40       	sbci	r25, 0x00	; 0
    1454:	a0 40       	sbci	r26, 0x00	; 0
    1456:	e1 f7       	brne	.-8      	; 0x1450 <movement_for_all+0x702>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <movement_for_all+0x70c>
    145a:	00 00       	nop
					_delay_ms(100);
				}
				if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    145c:	80 91 7e 02 	lds	r24, 0x027E
    1460:	83 32       	cpi	r24, 0x23	; 35
    1462:	51 f1       	breq	.+84     	; 0x14b8 <movement_for_all+0x76a>
    1464:	80 91 7d 02 	lds	r24, 0x027D
    1468:	84 32       	cpi	r24, 0x24	; 36
    146a:	78 f0       	brcs	.+30     	; 0x148a <movement_for_all+0x73c>
    146c:	80 91 a7 02 	lds	r24, 0x02A7
    1470:	83 32       	cpi	r24, 0x23	; 35
    1472:	58 f4       	brcc	.+22     	; 0x148a <movement_for_all+0x73c>
				{
					Left();
    1474:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	9f e7       	ldi	r25, 0x7F	; 127
    147c:	a4 e0       	ldi	r26, 0x04	; 4
    147e:	81 50       	subi	r24, 0x01	; 1
    1480:	90 40       	sbci	r25, 0x00	; 0
    1482:	a0 40       	sbci	r26, 0x00	; 0
    1484:	e1 f7       	brne	.-8      	; 0x147e <movement_for_all+0x730>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <movement_for_all+0x73a>
    1488:	00 00       	nop
					_delay_ms(100);
				}
				if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    148a:	80 91 7e 02 	lds	r24, 0x027E
    148e:	84 32       	cpi	r24, 0x24	; 36
    1490:	98 f0       	brcs	.+38     	; 0x14b8 <movement_for_all+0x76a>
    1492:	80 91 7d 02 	lds	r24, 0x027D
    1496:	83 32       	cpi	r24, 0x23	; 35
    1498:	78 f4       	brcc	.+30     	; 0x14b8 <movement_for_all+0x76a>
    149a:	80 91 a7 02 	lds	r24, 0x02A7
    149e:	83 32       	cpi	r24, 0x23	; 35
    14a0:	58 f4       	brcc	.+22     	; 0x14b8 <movement_for_all+0x76a>
				{
					Forward();
    14a2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	9f e7       	ldi	r25, 0x7F	; 127
    14aa:	a4 e0       	ldi	r26, 0x04	; 4
    14ac:	81 50       	subi	r24, 0x01	; 1
    14ae:	90 40       	sbci	r25, 0x00	; 0
    14b0:	a0 40       	sbci	r26, 0x00	; 0
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <movement_for_all+0x75e>
    14b4:	00 c0       	rjmp	.+0      	; 0x14b6 <movement_for_all+0x768>
    14b6:	00 00       	nop
{

			Right();
			_delay_ms(750);
			scan();
			while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    14b8:	80 91 7e 02 	lds	r24, 0x027E
    14bc:	84 32       	cpi	r24, 0x24	; 36
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <movement_for_all+0x774>
    14c0:	b3 cf       	rjmp	.-154    	; 0x1428 <movement_for_all+0x6da>
    14c2:	80 91 7d 02 	lds	r24, 0x027D
    14c6:	84 32       	cpi	r24, 0x24	; 36
    14c8:	08 f4       	brcc	.+2      	; 0x14cc <movement_for_all+0x77e>
    14ca:	ae cf       	rjmp	.-164    	; 0x1428 <movement_for_all+0x6da>
    14cc:	80 91 a7 02 	lds	r24, 0x02A7
    14d0:	84 32       	cpi	r24, 0x24	; 36
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <movement_for_all+0x788>
    14d4:	a9 cf       	rjmp	.-174    	; 0x1428 <movement_for_all+0x6da>
				}
			}
}

			
			Stop();
    14d6:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	ac e2       	ldi	r26, 0x2C	; 44
    14e0:	81 50       	subi	r24, 0x01	; 1
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	a0 40       	sbci	r26, 0x00	; 0
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <movement_for_all+0x792>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <movement_for_all+0x79c>
    14ea:	00 00       	nop
				_delay_ms(1000);
				pos = pos-1;
				scan();
    14ec:	0e 94 28 06 	call	0xc50	; 0xc50 <scan>
}

			
			Stop();
				_delay_ms(1000);
				pos = pos-1;
    14f0:	85 01       	movw	r16, r10
				scan();
						d=3;	
    14f2:	0f 2e       	mov	r0, r31
    14f4:	f3 e0       	ldi	r31, 0x03	; 3
    14f6:	8f 2e       	mov	r8, r31
    14f8:	99 24       	eor	r9, r9
    14fa:	f0 2d       	mov	r31, r0
    14fc:	eb c3       	rjmp	.+2006   	; 0x1cd4 <movement_for_all+0xf86>
	{
lcd_print(1,2,pos,4);
		l=pos-1;
		r=pos+1;
		u=pos-7;
		dw=pos+7;
    14fe:	0f 2e       	mov	r0, r31
    1500:	f7 e0       	ldi	r31, 0x07	; 7
    1502:	cf 2e       	mov	r12, r31
    1504:	dd 24       	eor	r13, r13
    1506:	f0 2d       	mov	r31, r0
    1508:	c0 0e       	add	r12, r16
    150a:	d1 1e       	adc	r13, r17
				pos = pos-1;
				scan();
						d=3;	
		}

		else if(c[x]==dw)
    150c:	c8 16       	cp	r12, r24
    150e:	d9 06       	cpc	r13, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <movement_for_all+0x7c6>
    1512:	ee c1       	rjmp	.+988    	; 0x18f0 <movement_for_all+0xba2>
		{
			if(d==1)
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	89 16       	cp	r8, r25
    1518:	91 04       	cpc	r9, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <movement_for_all+0x7d0>
    151c:	78 c0       	rjmp	.+240    	; 0x160e <movement_for_all+0x8c0>
			{
				
				Left();
    151e:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9f eb       	ldi	r25, 0xBF	; 191
    1526:	aa e2       	ldi	r26, 0x2A	; 42
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	a0 40       	sbci	r26, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <movement_for_all+0x7da>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <movement_for_all+0x7e4>
    1532:	00 00       	nop
				_delay_ms(950);
				scan();
    1534:	fe 01       	movw	r30, r28
    1536:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1538:	48 c0       	rjmp	.+144    	; 0x15ca <movement_for_all+0x87c>
				{
					scan();
    153a:	fe 01       	movw	r30, r28
    153c:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    153e:	80 91 7e 02 	lds	r24, 0x027E
    1542:	83 32       	cpi	r24, 0x23	; 35
    1544:	09 f4       	brne	.+2      	; 0x1548 <movement_for_all+0x7fa>
    1546:	41 c0       	rjmp	.+130    	; 0x15ca <movement_for_all+0x87c>
    1548:	80 91 7d 02 	lds	r24, 0x027D
    154c:	83 32       	cpi	r24, 0x23	; 35
    154e:	98 f4       	brcc	.+38     	; 0x1576 <movement_for_all+0x828>
    1550:	80 91 a7 02 	lds	r24, 0x02A7
    1554:	84 32       	cpi	r24, 0x24	; 36
    1556:	78 f0       	brcs	.+30     	; 0x1576 <movement_for_all+0x828>
					{
						Right();
    1558:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f e7       	ldi	r25, 0x7F	; 127
    1560:	a4 e0       	ldi	r26, 0x04	; 4
    1562:	81 50       	subi	r24, 0x01	; 1
    1564:	90 40       	sbci	r25, 0x00	; 0
    1566:	a0 40       	sbci	r26, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <movement_for_all+0x814>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <movement_for_all+0x81e>
    156c:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    156e:	80 91 7e 02 	lds	r24, 0x027E
    1572:	83 32       	cpi	r24, 0x23	; 35
    1574:	51 f1       	breq	.+84     	; 0x15ca <movement_for_all+0x87c>
    1576:	80 91 7d 02 	lds	r24, 0x027D
    157a:	84 32       	cpi	r24, 0x24	; 36
    157c:	78 f0       	brcs	.+30     	; 0x159c <movement_for_all+0x84e>
    157e:	80 91 a7 02 	lds	r24, 0x02A7
    1582:	83 32       	cpi	r24, 0x23	; 35
    1584:	58 f4       	brcc	.+22     	; 0x159c <movement_for_all+0x84e>
					{
						Left();
    1586:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	9f e7       	ldi	r25, 0x7F	; 127
    158e:	a4 e0       	ldi	r26, 0x04	; 4
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	90 40       	sbci	r25, 0x00	; 0
    1594:	a0 40       	sbci	r26, 0x00	; 0
    1596:	e1 f7       	brne	.-8      	; 0x1590 <movement_for_all+0x842>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <movement_for_all+0x84c>
    159a:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    159c:	80 91 7e 02 	lds	r24, 0x027E
    15a0:	84 32       	cpi	r24, 0x24	; 36
    15a2:	98 f0       	brcs	.+38     	; 0x15ca <movement_for_all+0x87c>
    15a4:	80 91 7d 02 	lds	r24, 0x027D
    15a8:	83 32       	cpi	r24, 0x23	; 35
    15aa:	78 f4       	brcc	.+30     	; 0x15ca <movement_for_all+0x87c>
    15ac:	80 91 a7 02 	lds	r24, 0x02A7
    15b0:	83 32       	cpi	r24, 0x23	; 35
    15b2:	58 f4       	brcc	.+22     	; 0x15ca <movement_for_all+0x87c>
					{
						Forward();
    15b4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f e7       	ldi	r25, 0x7F	; 127
    15bc:	a4 e0       	ldi	r26, 0x04	; 4
    15be:	81 50       	subi	r24, 0x01	; 1
    15c0:	90 40       	sbci	r25, 0x00	; 0
    15c2:	a0 40       	sbci	r26, 0x00	; 0
    15c4:	e1 f7       	brne	.-8      	; 0x15be <movement_for_all+0x870>
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <movement_for_all+0x87a>
    15c8:	00 00       	nop
			{
				
				Left();
				_delay_ms(950);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    15ca:	80 91 7e 02 	lds	r24, 0x027E
    15ce:	84 32       	cpi	r24, 0x24	; 36
    15d0:	08 f4       	brcc	.+2      	; 0x15d4 <movement_for_all+0x886>
    15d2:	b3 cf       	rjmp	.-154    	; 0x153a <movement_for_all+0x7ec>
    15d4:	80 91 7d 02 	lds	r24, 0x027D
    15d8:	84 32       	cpi	r24, 0x24	; 36
    15da:	08 f4       	brcc	.+2      	; 0x15de <movement_for_all+0x890>
    15dc:	ae cf       	rjmp	.-164    	; 0x153a <movement_for_all+0x7ec>
    15de:	80 91 a7 02 	lds	r24, 0x02A7
    15e2:	84 32       	cpi	r24, 0x24	; 36
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <movement_for_all+0x89a>
    15e6:	a9 cf       	rjmp	.-174    	; 0x153a <movement_for_all+0x7ec>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    15e8:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	ac e2       	ldi	r26, 0x2C	; 44
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	90 40       	sbci	r25, 0x00	; 0
    15f6:	a0 40       	sbci	r26, 0x00	; 0
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <movement_for_all+0x8a4>
    15fa:	00 c0       	rjmp	.+0      	; 0x15fc <movement_for_all+0x8ae>
    15fc:	00 00       	nop
				_delay_ms(1000);
				pos = pos+7;
				scan();
    15fe:	fe 01       	movw	r30, r28
    1600:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos+7;
    1602:	86 01       	movw	r16, r12
				Stop();
				_delay_ms(1000);
				pos = pos+7;
				scan();				
			}
			d=2;
    1604:	88 24       	eor	r8, r8
    1606:	99 24       	eor	r9, r9
    1608:	68 94       	set
    160a:	81 f8       	bld	r8, 1
    160c:	63 c3       	rjmp	.+1734   	; 0x1cd4 <movement_for_all+0xf86>
				Stop();
				_delay_ms(1000);
				pos = pos+7;
				scan();
			}
			else if(d==3)
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	89 16       	cp	r8, r25
    1612:	91 04       	cpc	r9, r1
    1614:	09 f0       	breq	.+2      	; 0x1618 <movement_for_all+0x8ca>
    1616:	78 c0       	rjmp	.+240    	; 0x1708 <movement_for_all+0x9ba>
			{
				
				Right();
    1618:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	9f eb       	ldi	r25, 0xBF	; 191
    1620:	aa e2       	ldi	r26, 0x2A	; 42
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	90 40       	sbci	r25, 0x00	; 0
    1626:	a0 40       	sbci	r26, 0x00	; 0
    1628:	e1 f7       	brne	.-8      	; 0x1622 <movement_for_all+0x8d4>
    162a:	00 c0       	rjmp	.+0      	; 0x162c <movement_for_all+0x8de>
    162c:	00 00       	nop
				_delay_ms(950);
				scan();
    162e:	fe 01       	movw	r30, r28
    1630:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1632:	48 c0       	rjmp	.+144    	; 0x16c4 <movement_for_all+0x976>
				{
					scan();
    1634:	fe 01       	movw	r30, r28
    1636:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1638:	80 91 7e 02 	lds	r24, 0x027E
    163c:	83 32       	cpi	r24, 0x23	; 35
    163e:	09 f4       	brne	.+2      	; 0x1642 <movement_for_all+0x8f4>
    1640:	41 c0       	rjmp	.+130    	; 0x16c4 <movement_for_all+0x976>
    1642:	80 91 7d 02 	lds	r24, 0x027D
    1646:	83 32       	cpi	r24, 0x23	; 35
    1648:	98 f4       	brcc	.+38     	; 0x1670 <movement_for_all+0x922>
    164a:	80 91 a7 02 	lds	r24, 0x02A7
    164e:	84 32       	cpi	r24, 0x24	; 36
    1650:	78 f0       	brcs	.+30     	; 0x1670 <movement_for_all+0x922>
					{
						Right();
    1652:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f e7       	ldi	r25, 0x7F	; 127
    165a:	a4 e0       	ldi	r26, 0x04	; 4
    165c:	81 50       	subi	r24, 0x01	; 1
    165e:	90 40       	sbci	r25, 0x00	; 0
    1660:	a0 40       	sbci	r26, 0x00	; 0
    1662:	e1 f7       	brne	.-8      	; 0x165c <movement_for_all+0x90e>
    1664:	00 c0       	rjmp	.+0      	; 0x1666 <movement_for_all+0x918>
    1666:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1668:	80 91 7e 02 	lds	r24, 0x027E
    166c:	83 32       	cpi	r24, 0x23	; 35
    166e:	51 f1       	breq	.+84     	; 0x16c4 <movement_for_all+0x976>
    1670:	80 91 7d 02 	lds	r24, 0x027D
    1674:	84 32       	cpi	r24, 0x24	; 36
    1676:	78 f0       	brcs	.+30     	; 0x1696 <movement_for_all+0x948>
    1678:	80 91 a7 02 	lds	r24, 0x02A7
    167c:	83 32       	cpi	r24, 0x23	; 35
    167e:	58 f4       	brcc	.+22     	; 0x1696 <movement_for_all+0x948>
					{
						Left();
    1680:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f e7       	ldi	r25, 0x7F	; 127
    1688:	a4 e0       	ldi	r26, 0x04	; 4
    168a:	81 50       	subi	r24, 0x01	; 1
    168c:	90 40       	sbci	r25, 0x00	; 0
    168e:	a0 40       	sbci	r26, 0x00	; 0
    1690:	e1 f7       	brne	.-8      	; 0x168a <movement_for_all+0x93c>
    1692:	00 c0       	rjmp	.+0      	; 0x1694 <movement_for_all+0x946>
    1694:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1696:	80 91 7e 02 	lds	r24, 0x027E
    169a:	84 32       	cpi	r24, 0x24	; 36
    169c:	98 f0       	brcs	.+38     	; 0x16c4 <movement_for_all+0x976>
    169e:	80 91 7d 02 	lds	r24, 0x027D
    16a2:	83 32       	cpi	r24, 0x23	; 35
    16a4:	78 f4       	brcc	.+30     	; 0x16c4 <movement_for_all+0x976>
    16a6:	80 91 a7 02 	lds	r24, 0x02A7
    16aa:	83 32       	cpi	r24, 0x23	; 35
    16ac:	58 f4       	brcc	.+22     	; 0x16c4 <movement_for_all+0x976>
					{
						Forward();
    16ae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	9f e7       	ldi	r25, 0x7F	; 127
    16b6:	a4 e0       	ldi	r26, 0x04	; 4
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	a0 40       	sbci	r26, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <movement_for_all+0x96a>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <movement_for_all+0x974>
    16c2:	00 00       	nop
			{
				
				Right();
				_delay_ms(950);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    16c4:	80 91 7e 02 	lds	r24, 0x027E
    16c8:	84 32       	cpi	r24, 0x24	; 36
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <movement_for_all+0x980>
    16cc:	b3 cf       	rjmp	.-154    	; 0x1634 <movement_for_all+0x8e6>
    16ce:	80 91 7d 02 	lds	r24, 0x027D
    16d2:	84 32       	cpi	r24, 0x24	; 36
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <movement_for_all+0x98a>
    16d6:	ae cf       	rjmp	.-164    	; 0x1634 <movement_for_all+0x8e6>
    16d8:	80 91 a7 02 	lds	r24, 0x02A7
    16dc:	84 32       	cpi	r24, 0x24	; 36
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <movement_for_all+0x994>
    16e0:	a9 cf       	rjmp	.-174    	; 0x1634 <movement_for_all+0x8e6>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    16e2:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	ac e2       	ldi	r26, 0x2C	; 44
    16ec:	81 50       	subi	r24, 0x01	; 1
    16ee:	90 40       	sbci	r25, 0x00	; 0
    16f0:	a0 40       	sbci	r26, 0x00	; 0
    16f2:	e1 f7       	brne	.-8      	; 0x16ec <movement_for_all+0x99e>
    16f4:	00 c0       	rjmp	.+0      	; 0x16f6 <movement_for_all+0x9a8>
    16f6:	00 00       	nop
				_delay_ms(1000);
				pos = pos+7;
				scan();
    16f8:	fe 01       	movw	r30, r28
    16fa:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos+7;
    16fc:	86 01       	movw	r16, r12
				Stop();
				_delay_ms(1000);
				pos = pos+7;
				scan();				
			}
			d=2;
    16fe:	88 24       	eor	r8, r8
    1700:	99 24       	eor	r9, r9
    1702:	68 94       	set
    1704:	81 f8       	bld	r8, 1
    1706:	e6 c2       	rjmp	.+1484   	; 0x1cd4 <movement_for_all+0xf86>
				_delay_ms(1000);
				pos = pos+7;
				scan();
				
			}
else if(d==0)
    1708:	81 14       	cp	r8, r1
    170a:	91 04       	cpc	r9, r1
    170c:	09 f0       	breq	.+2      	; 0x1710 <movement_for_all+0x9c2>
    170e:	78 c0       	rjmp	.+240    	; 0x1800 <movement_for_all+0xab2>
{
Right();
    1710:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	9f ef       	ldi	r25, 0xFF	; 255
    1718:	a9 e5       	ldi	r26, 0x59	; 89
    171a:	81 50       	subi	r24, 0x01	; 1
    171c:	90 40       	sbci	r25, 0x00	; 0
    171e:	a0 40       	sbci	r26, 0x00	; 0
    1720:	e1 f7       	brne	.-8      	; 0x171a <movement_for_all+0x9cc>
    1722:	00 c0       	rjmp	.+0      	; 0x1724 <movement_for_all+0x9d6>
    1724:	00 00       	nop
				_delay_ms(2000);
				scan();
    1726:	fe 01       	movw	r30, r28
    1728:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    172a:	48 c0       	rjmp	.+144    	; 0x17bc <movement_for_all+0xa6e>
				{
					scan();
    172c:	fe 01       	movw	r30, r28
    172e:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1730:	80 91 7e 02 	lds	r24, 0x027E
    1734:	83 32       	cpi	r24, 0x23	; 35
    1736:	09 f4       	brne	.+2      	; 0x173a <movement_for_all+0x9ec>
    1738:	41 c0       	rjmp	.+130    	; 0x17bc <movement_for_all+0xa6e>
    173a:	80 91 7d 02 	lds	r24, 0x027D
    173e:	83 32       	cpi	r24, 0x23	; 35
    1740:	98 f4       	brcc	.+38     	; 0x1768 <movement_for_all+0xa1a>
    1742:	80 91 a7 02 	lds	r24, 0x02A7
    1746:	84 32       	cpi	r24, 0x24	; 36
    1748:	78 f0       	brcs	.+30     	; 0x1768 <movement_for_all+0xa1a>
					{
						Right();
    174a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	9f e7       	ldi	r25, 0x7F	; 127
    1752:	a4 e0       	ldi	r26, 0x04	; 4
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	90 40       	sbci	r25, 0x00	; 0
    1758:	a0 40       	sbci	r26, 0x00	; 0
    175a:	e1 f7       	brne	.-8      	; 0x1754 <movement_for_all+0xa06>
    175c:	00 c0       	rjmp	.+0      	; 0x175e <movement_for_all+0xa10>
    175e:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1760:	80 91 7e 02 	lds	r24, 0x027E
    1764:	83 32       	cpi	r24, 0x23	; 35
    1766:	51 f1       	breq	.+84     	; 0x17bc <movement_for_all+0xa6e>
    1768:	80 91 7d 02 	lds	r24, 0x027D
    176c:	84 32       	cpi	r24, 0x24	; 36
    176e:	78 f0       	brcs	.+30     	; 0x178e <movement_for_all+0xa40>
    1770:	80 91 a7 02 	lds	r24, 0x02A7
    1774:	83 32       	cpi	r24, 0x23	; 35
    1776:	58 f4       	brcc	.+22     	; 0x178e <movement_for_all+0xa40>
					{
						Left();
    1778:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f e7       	ldi	r25, 0x7F	; 127
    1780:	a4 e0       	ldi	r26, 0x04	; 4
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	90 40       	sbci	r25, 0x00	; 0
    1786:	a0 40       	sbci	r26, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <movement_for_all+0xa34>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <movement_for_all+0xa3e>
    178c:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    178e:	80 91 7e 02 	lds	r24, 0x027E
    1792:	84 32       	cpi	r24, 0x24	; 36
    1794:	98 f0       	brcs	.+38     	; 0x17bc <movement_for_all+0xa6e>
    1796:	80 91 7d 02 	lds	r24, 0x027D
    179a:	83 32       	cpi	r24, 0x23	; 35
    179c:	78 f4       	brcc	.+30     	; 0x17bc <movement_for_all+0xa6e>
    179e:	80 91 a7 02 	lds	r24, 0x02A7
    17a2:	83 32       	cpi	r24, 0x23	; 35
    17a4:	58 f4       	brcc	.+22     	; 0x17bc <movement_for_all+0xa6e>
					{
						Forward();
    17a6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f e7       	ldi	r25, 0x7F	; 127
    17ae:	a4 e0       	ldi	r26, 0x04	; 4
    17b0:	81 50       	subi	r24, 0x01	; 1
    17b2:	90 40       	sbci	r25, 0x00	; 0
    17b4:	a0 40       	sbci	r26, 0x00	; 0
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <movement_for_all+0xa62>
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <movement_for_all+0xa6c>
    17ba:	00 00       	nop
else if(d==0)
{
Right();
				_delay_ms(2000);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    17bc:	80 91 7e 02 	lds	r24, 0x027E
    17c0:	84 32       	cpi	r24, 0x24	; 36
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <movement_for_all+0xa78>
    17c4:	b3 cf       	rjmp	.-154    	; 0x172c <movement_for_all+0x9de>
    17c6:	80 91 7d 02 	lds	r24, 0x027D
    17ca:	84 32       	cpi	r24, 0x24	; 36
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <movement_for_all+0xa82>
    17ce:	ae cf       	rjmp	.-164    	; 0x172c <movement_for_all+0x9de>
    17d0:	80 91 a7 02 	lds	r24, 0x02A7
    17d4:	84 32       	cpi	r24, 0x24	; 36
    17d6:	08 f4       	brcc	.+2      	; 0x17da <movement_for_all+0xa8c>
    17d8:	a9 cf       	rjmp	.-174    	; 0x172c <movement_for_all+0x9de>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    17da:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	ac e2       	ldi	r26, 0x2C	; 44
    17e4:	81 50       	subi	r24, 0x01	; 1
    17e6:	90 40       	sbci	r25, 0x00	; 0
    17e8:	a0 40       	sbci	r26, 0x00	; 0
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <movement_for_all+0xa96>
    17ec:	00 c0       	rjmp	.+0      	; 0x17ee <movement_for_all+0xaa0>
    17ee:	00 00       	nop
				_delay_ms(1000);
				pos = pos+7;
				scan();
    17f0:	fe 01       	movw	r30, r28
    17f2:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos+7;
    17f4:	86 01       	movw	r16, r12
				Stop();
				_delay_ms(1000);
				pos = pos+7;
				scan();				
			}
			d=2;
    17f6:	88 24       	eor	r8, r8
    17f8:	99 24       	eor	r9, r9
    17fa:	68 94       	set
    17fc:	81 f8       	bld	r8, 1
    17fe:	6a c2       	rjmp	.+1236   	; 0x1cd4 <movement_for_all+0xf86>
				scan();
}
			else 
			{
				
				Forward();
    1800:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f eb       	ldi	r25, 0xBF	; 191
    1808:	a1 e2       	ldi	r26, 0x21	; 33
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	90 40       	sbci	r25, 0x00	; 0
    180e:	a0 40       	sbci	r26, 0x00	; 0
    1810:	e1 f7       	brne	.-8      	; 0x180a <movement_for_all+0xabc>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <movement_for_all+0xac6>
    1814:	00 00       	nop
				_delay_ms(750);
				scan();
    1816:	fe 01       	movw	r30, r28
    1818:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    181a:	48 c0       	rjmp	.+144    	; 0x18ac <movement_for_all+0xb5e>
				{
					scan();
    181c:	fe 01       	movw	r30, r28
    181e:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1820:	80 91 7e 02 	lds	r24, 0x027E
    1824:	83 32       	cpi	r24, 0x23	; 35
    1826:	09 f4       	brne	.+2      	; 0x182a <movement_for_all+0xadc>
    1828:	41 c0       	rjmp	.+130    	; 0x18ac <movement_for_all+0xb5e>
    182a:	80 91 7d 02 	lds	r24, 0x027D
    182e:	83 32       	cpi	r24, 0x23	; 35
    1830:	98 f4       	brcc	.+38     	; 0x1858 <movement_for_all+0xb0a>
    1832:	80 91 a7 02 	lds	r24, 0x02A7
    1836:	84 32       	cpi	r24, 0x24	; 36
    1838:	78 f0       	brcs	.+30     	; 0x1858 <movement_for_all+0xb0a>
					{
						Right();
    183a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	9f e7       	ldi	r25, 0x7F	; 127
    1842:	a4 e0       	ldi	r26, 0x04	; 4
    1844:	81 50       	subi	r24, 0x01	; 1
    1846:	90 40       	sbci	r25, 0x00	; 0
    1848:	a0 40       	sbci	r26, 0x00	; 0
    184a:	e1 f7       	brne	.-8      	; 0x1844 <movement_for_all+0xaf6>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <movement_for_all+0xb00>
    184e:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1850:	80 91 7e 02 	lds	r24, 0x027E
    1854:	83 32       	cpi	r24, 0x23	; 35
    1856:	51 f1       	breq	.+84     	; 0x18ac <movement_for_all+0xb5e>
    1858:	80 91 7d 02 	lds	r24, 0x027D
    185c:	84 32       	cpi	r24, 0x24	; 36
    185e:	78 f0       	brcs	.+30     	; 0x187e <movement_for_all+0xb30>
    1860:	80 91 a7 02 	lds	r24, 0x02A7
    1864:	83 32       	cpi	r24, 0x23	; 35
    1866:	58 f4       	brcc	.+22     	; 0x187e <movement_for_all+0xb30>
					{
						Left();
    1868:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f e7       	ldi	r25, 0x7F	; 127
    1870:	a4 e0       	ldi	r26, 0x04	; 4
    1872:	81 50       	subi	r24, 0x01	; 1
    1874:	90 40       	sbci	r25, 0x00	; 0
    1876:	a0 40       	sbci	r26, 0x00	; 0
    1878:	e1 f7       	brne	.-8      	; 0x1872 <movement_for_all+0xb24>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <movement_for_all+0xb2e>
    187c:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    187e:	80 91 7e 02 	lds	r24, 0x027E
    1882:	84 32       	cpi	r24, 0x24	; 36
    1884:	98 f0       	brcs	.+38     	; 0x18ac <movement_for_all+0xb5e>
    1886:	80 91 7d 02 	lds	r24, 0x027D
    188a:	83 32       	cpi	r24, 0x23	; 35
    188c:	78 f4       	brcc	.+30     	; 0x18ac <movement_for_all+0xb5e>
    188e:	80 91 a7 02 	lds	r24, 0x02A7
    1892:	83 32       	cpi	r24, 0x23	; 35
    1894:	58 f4       	brcc	.+22     	; 0x18ac <movement_for_all+0xb5e>
					{
						Forward();
    1896:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f e7       	ldi	r25, 0x7F	; 127
    189e:	a4 e0       	ldi	r26, 0x04	; 4
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	a0 40       	sbci	r26, 0x00	; 0
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <movement_for_all+0xb52>
    18a8:	00 c0       	rjmp	.+0      	; 0x18aa <movement_for_all+0xb5c>
    18aa:	00 00       	nop
			{
				
				Forward();
				_delay_ms(750);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    18ac:	80 91 7e 02 	lds	r24, 0x027E
    18b0:	84 32       	cpi	r24, 0x24	; 36
    18b2:	08 f4       	brcc	.+2      	; 0x18b6 <movement_for_all+0xb68>
    18b4:	b3 cf       	rjmp	.-154    	; 0x181c <movement_for_all+0xace>
    18b6:	80 91 7d 02 	lds	r24, 0x027D
    18ba:	84 32       	cpi	r24, 0x24	; 36
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <movement_for_all+0xb72>
    18be:	ae cf       	rjmp	.-164    	; 0x181c <movement_for_all+0xace>
    18c0:	80 91 a7 02 	lds	r24, 0x02A7
    18c4:	84 32       	cpi	r24, 0x24	; 36
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <movement_for_all+0xb7c>
    18c8:	a9 cf       	rjmp	.-174    	; 0x181c <movement_for_all+0xace>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    18ca:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	ac e2       	ldi	r26, 0x2C	; 44
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	90 40       	sbci	r25, 0x00	; 0
    18d8:	a0 40       	sbci	r26, 0x00	; 0
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <movement_for_all+0xb86>
    18dc:	00 c0       	rjmp	.+0      	; 0x18de <movement_for_all+0xb90>
    18de:	00 00       	nop
				_delay_ms(1000);
				pos = pos+7;
				scan();				
    18e0:	fe 01       	movw	r30, r28
    18e2:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos+7;
    18e4:	86 01       	movw	r16, r12
				scan();				
			}
			d=2;
    18e6:	88 24       	eor	r8, r8
    18e8:	99 24       	eor	r9, r9
    18ea:	68 94       	set
    18ec:	81 f8       	bld	r8, 1
    18ee:	f2 c1       	rjmp	.+996    	; 0x1cd4 <movement_for_all+0xf86>
	for (x=1;x<=lenght;x++)
	{
lcd_print(1,2,pos,4);
		l=pos-1;
		r=pos+1;
		u=pos-7;
    18f0:	0f 2e       	mov	r0, r31
    18f2:	f9 ef       	ldi	r31, 0xF9	; 249
    18f4:	af 2e       	mov	r10, r31
    18f6:	ff ef       	ldi	r31, 0xFF	; 255
    18f8:	bf 2e       	mov	r11, r31
    18fa:	f0 2d       	mov	r31, r0
    18fc:	a0 0e       	add	r10, r16
    18fe:	b1 1e       	adc	r11, r17
				scan();				
			}
			d=2;
		}

		else if (c[x]==u)
    1900:	a8 16       	cp	r10, r24
    1902:	b9 06       	cpc	r11, r25
    1904:	09 f0       	breq	.+2      	; 0x1908 <movement_for_all+0xbba>
    1906:	e6 c1       	rjmp	.+972    	; 0x1cd4 <movement_for_all+0xf86>
		{
			if(d==1)
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	89 16       	cp	r8, r25
    190c:	91 04       	cpc	r9, r1
    190e:	09 f0       	breq	.+2      	; 0x1912 <movement_for_all+0xbc4>
    1910:	76 c0       	rjmp	.+236    	; 0x19fe <movement_for_all+0xcb0>
			{
				
				Right();
    1912:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	9f eb       	ldi	r25, 0xBF	; 191
    191a:	aa e2       	ldi	r26, 0x2A	; 42
    191c:	81 50       	subi	r24, 0x01	; 1
    191e:	90 40       	sbci	r25, 0x00	; 0
    1920:	a0 40       	sbci	r26, 0x00	; 0
    1922:	e1 f7       	brne	.-8      	; 0x191c <movement_for_all+0xbce>
    1924:	00 c0       	rjmp	.+0      	; 0x1926 <movement_for_all+0xbd8>
    1926:	00 00       	nop
				_delay_ms(950);
				scan();
    1928:	fe 01       	movw	r30, r28
    192a:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    192c:	48 c0       	rjmp	.+144    	; 0x19be <movement_for_all+0xc70>
				{
					scan();
    192e:	fe 01       	movw	r30, r28
    1930:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1932:	80 91 7e 02 	lds	r24, 0x027E
    1936:	83 32       	cpi	r24, 0x23	; 35
    1938:	09 f4       	brne	.+2      	; 0x193c <movement_for_all+0xbee>
    193a:	41 c0       	rjmp	.+130    	; 0x19be <movement_for_all+0xc70>
    193c:	80 91 7d 02 	lds	r24, 0x027D
    1940:	83 32       	cpi	r24, 0x23	; 35
    1942:	98 f4       	brcc	.+38     	; 0x196a <movement_for_all+0xc1c>
    1944:	80 91 a7 02 	lds	r24, 0x02A7
    1948:	84 32       	cpi	r24, 0x24	; 36
    194a:	78 f0       	brcs	.+30     	; 0x196a <movement_for_all+0xc1c>
					{
						Right();
    194c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	9f e7       	ldi	r25, 0x7F	; 127
    1954:	a4 e0       	ldi	r26, 0x04	; 4
    1956:	81 50       	subi	r24, 0x01	; 1
    1958:	90 40       	sbci	r25, 0x00	; 0
    195a:	a0 40       	sbci	r26, 0x00	; 0
    195c:	e1 f7       	brne	.-8      	; 0x1956 <movement_for_all+0xc08>
    195e:	00 c0       	rjmp	.+0      	; 0x1960 <movement_for_all+0xc12>
    1960:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1962:	80 91 7e 02 	lds	r24, 0x027E
    1966:	83 32       	cpi	r24, 0x23	; 35
    1968:	51 f1       	breq	.+84     	; 0x19be <movement_for_all+0xc70>
    196a:	80 91 7d 02 	lds	r24, 0x027D
    196e:	84 32       	cpi	r24, 0x24	; 36
    1970:	78 f0       	brcs	.+30     	; 0x1990 <movement_for_all+0xc42>
    1972:	80 91 a7 02 	lds	r24, 0x02A7
    1976:	83 32       	cpi	r24, 0x23	; 35
    1978:	58 f4       	brcc	.+22     	; 0x1990 <movement_for_all+0xc42>
					{
						Left();
    197a:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f e7       	ldi	r25, 0x7F	; 127
    1982:	a4 e0       	ldi	r26, 0x04	; 4
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	90 40       	sbci	r25, 0x00	; 0
    1988:	a0 40       	sbci	r26, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <movement_for_all+0xc36>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <movement_for_all+0xc40>
    198e:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1990:	80 91 7e 02 	lds	r24, 0x027E
    1994:	84 32       	cpi	r24, 0x24	; 36
    1996:	98 f0       	brcs	.+38     	; 0x19be <movement_for_all+0xc70>
    1998:	80 91 7d 02 	lds	r24, 0x027D
    199c:	83 32       	cpi	r24, 0x23	; 35
    199e:	78 f4       	brcc	.+30     	; 0x19be <movement_for_all+0xc70>
    19a0:	80 91 a7 02 	lds	r24, 0x02A7
    19a4:	83 32       	cpi	r24, 0x23	; 35
    19a6:	58 f4       	brcc	.+22     	; 0x19be <movement_for_all+0xc70>
					{
						Forward();
    19a8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	9f e7       	ldi	r25, 0x7F	; 127
    19b0:	a4 e0       	ldi	r26, 0x04	; 4
    19b2:	81 50       	subi	r24, 0x01	; 1
    19b4:	90 40       	sbci	r25, 0x00	; 0
    19b6:	a0 40       	sbci	r26, 0x00	; 0
    19b8:	e1 f7       	brne	.-8      	; 0x19b2 <movement_for_all+0xc64>
    19ba:	00 c0       	rjmp	.+0      	; 0x19bc <movement_for_all+0xc6e>
    19bc:	00 00       	nop
			{
				
				Right();
				_delay_ms(950);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    19be:	80 91 7e 02 	lds	r24, 0x027E
    19c2:	84 32       	cpi	r24, 0x24	; 36
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <movement_for_all+0xc7a>
    19c6:	b3 cf       	rjmp	.-154    	; 0x192e <movement_for_all+0xbe0>
    19c8:	80 91 7d 02 	lds	r24, 0x027D
    19cc:	84 32       	cpi	r24, 0x24	; 36
    19ce:	08 f4       	brcc	.+2      	; 0x19d2 <movement_for_all+0xc84>
    19d0:	ae cf       	rjmp	.-164    	; 0x192e <movement_for_all+0xbe0>
    19d2:	80 91 a7 02 	lds	r24, 0x02A7
    19d6:	84 32       	cpi	r24, 0x24	; 36
    19d8:	08 f4       	brcc	.+2      	; 0x19dc <movement_for_all+0xc8e>
    19da:	a9 cf       	rjmp	.-174    	; 0x192e <movement_for_all+0xbe0>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    19dc:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f ef       	ldi	r25, 0xFF	; 255
    19e4:	ac e2       	ldi	r26, 0x2C	; 44
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	90 40       	sbci	r25, 0x00	; 0
    19ea:	a0 40       	sbci	r26, 0x00	; 0
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <movement_for_all+0xc98>
    19ee:	00 c0       	rjmp	.+0      	; 0x19f0 <movement_for_all+0xca2>
    19f0:	00 00       	nop
				_delay_ms(1000);
				pos = pos-7;
				scan();
    19f2:	fe 01       	movw	r30, r28
    19f4:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos-7;
    19f6:	85 01       	movw	r16, r10
				Stop();
				_delay_ms(1000);
				pos = pos-7;
				scan();
			}
			d=0;
    19f8:	88 24       	eor	r8, r8
    19fa:	99 24       	eor	r9, r9
    19fc:	6b c1       	rjmp	.+726    	; 0x1cd4 <movement_for_all+0xf86>
				Stop();
				_delay_ms(1000);
				pos = pos-7;
				scan();
			}
			else if(d==3)
    19fe:	93 e0       	ldi	r25, 0x03	; 3
    1a00:	89 16       	cp	r8, r25
    1a02:	91 04       	cpc	r9, r1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <movement_for_all+0xcba>
    1a06:	76 c0       	rjmp	.+236    	; 0x1af4 <movement_for_all+0xda6>
			{
				
				Left();
    1a08:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	9f eb       	ldi	r25, 0xBF	; 191
    1a10:	aa e2       	ldi	r26, 0x2A	; 42
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	90 40       	sbci	r25, 0x00	; 0
    1a16:	a0 40       	sbci	r26, 0x00	; 0
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <movement_for_all+0xcc4>
    1a1a:	00 c0       	rjmp	.+0      	; 0x1a1c <movement_for_all+0xcce>
    1a1c:	00 00       	nop
				_delay_ms(950);
				scan();
    1a1e:	fe 01       	movw	r30, r28
    1a20:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1a22:	48 c0       	rjmp	.+144    	; 0x1ab4 <movement_for_all+0xd66>
				{
					scan();
    1a24:	fe 01       	movw	r30, r28
    1a26:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1a28:	80 91 7e 02 	lds	r24, 0x027E
    1a2c:	83 32       	cpi	r24, 0x23	; 35
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <movement_for_all+0xce4>
    1a30:	41 c0       	rjmp	.+130    	; 0x1ab4 <movement_for_all+0xd66>
    1a32:	80 91 7d 02 	lds	r24, 0x027D
    1a36:	83 32       	cpi	r24, 0x23	; 35
    1a38:	98 f4       	brcc	.+38     	; 0x1a60 <movement_for_all+0xd12>
    1a3a:	80 91 a7 02 	lds	r24, 0x02A7
    1a3e:	84 32       	cpi	r24, 0x24	; 36
    1a40:	78 f0       	brcs	.+30     	; 0x1a60 <movement_for_all+0xd12>
					{
						Right();
    1a42:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	9f e7       	ldi	r25, 0x7F	; 127
    1a4a:	a4 e0       	ldi	r26, 0x04	; 4
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	90 40       	sbci	r25, 0x00	; 0
    1a50:	a0 40       	sbci	r26, 0x00	; 0
    1a52:	e1 f7       	brne	.-8      	; 0x1a4c <movement_for_all+0xcfe>
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <movement_for_all+0xd08>
    1a56:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1a58:	80 91 7e 02 	lds	r24, 0x027E
    1a5c:	83 32       	cpi	r24, 0x23	; 35
    1a5e:	51 f1       	breq	.+84     	; 0x1ab4 <movement_for_all+0xd66>
    1a60:	80 91 7d 02 	lds	r24, 0x027D
    1a64:	84 32       	cpi	r24, 0x24	; 36
    1a66:	78 f0       	brcs	.+30     	; 0x1a86 <movement_for_all+0xd38>
    1a68:	80 91 a7 02 	lds	r24, 0x02A7
    1a6c:	83 32       	cpi	r24, 0x23	; 35
    1a6e:	58 f4       	brcc	.+22     	; 0x1a86 <movement_for_all+0xd38>
					{
						Left();
    1a70:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	9f e7       	ldi	r25, 0x7F	; 127
    1a78:	a4 e0       	ldi	r26, 0x04	; 4
    1a7a:	81 50       	subi	r24, 0x01	; 1
    1a7c:	90 40       	sbci	r25, 0x00	; 0
    1a7e:	a0 40       	sbci	r26, 0x00	; 0
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <movement_for_all+0xd2c>
    1a82:	00 c0       	rjmp	.+0      	; 0x1a84 <movement_for_all+0xd36>
    1a84:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1a86:	80 91 7e 02 	lds	r24, 0x027E
    1a8a:	84 32       	cpi	r24, 0x24	; 36
    1a8c:	98 f0       	brcs	.+38     	; 0x1ab4 <movement_for_all+0xd66>
    1a8e:	80 91 7d 02 	lds	r24, 0x027D
    1a92:	83 32       	cpi	r24, 0x23	; 35
    1a94:	78 f4       	brcc	.+30     	; 0x1ab4 <movement_for_all+0xd66>
    1a96:	80 91 a7 02 	lds	r24, 0x02A7
    1a9a:	83 32       	cpi	r24, 0x23	; 35
    1a9c:	58 f4       	brcc	.+22     	; 0x1ab4 <movement_for_all+0xd66>
					{
						Forward();
    1a9e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f e7       	ldi	r25, 0x7F	; 127
    1aa6:	a4 e0       	ldi	r26, 0x04	; 4
    1aa8:	81 50       	subi	r24, 0x01	; 1
    1aaa:	90 40       	sbci	r25, 0x00	; 0
    1aac:	a0 40       	sbci	r26, 0x00	; 0
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <movement_for_all+0xd5a>
    1ab0:	00 c0       	rjmp	.+0      	; 0x1ab2 <movement_for_all+0xd64>
    1ab2:	00 00       	nop
			{
				
				Left();
				_delay_ms(950);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1ab4:	80 91 7e 02 	lds	r24, 0x027E
    1ab8:	84 32       	cpi	r24, 0x24	; 36
    1aba:	08 f4       	brcc	.+2      	; 0x1abe <movement_for_all+0xd70>
    1abc:	b3 cf       	rjmp	.-154    	; 0x1a24 <movement_for_all+0xcd6>
    1abe:	80 91 7d 02 	lds	r24, 0x027D
    1ac2:	84 32       	cpi	r24, 0x24	; 36
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <movement_for_all+0xd7a>
    1ac6:	ae cf       	rjmp	.-164    	; 0x1a24 <movement_for_all+0xcd6>
    1ac8:	80 91 a7 02 	lds	r24, 0x02A7
    1acc:	84 32       	cpi	r24, 0x24	; 36
    1ace:	08 f4       	brcc	.+2      	; 0x1ad2 <movement_for_all+0xd84>
    1ad0:	a9 cf       	rjmp	.-174    	; 0x1a24 <movement_for_all+0xcd6>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    1ad2:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	ac e2       	ldi	r26, 0x2C	; 44
    1adc:	81 50       	subi	r24, 0x01	; 1
    1ade:	90 40       	sbci	r25, 0x00	; 0
    1ae0:	a0 40       	sbci	r26, 0x00	; 0
    1ae2:	e1 f7       	brne	.-8      	; 0x1adc <movement_for_all+0xd8e>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <movement_for_all+0xd98>
    1ae6:	00 00       	nop
				_delay_ms(1000);
				pos = pos+7;
				scan();
    1ae8:	fe 01       	movw	r30, r28
    1aea:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos+7;
    1aec:	86 01       	movw	r16, r12
				Stop();
				_delay_ms(1000);
				pos = pos-7;
				scan();
			}
			d=0;
    1aee:	88 24       	eor	r8, r8
    1af0:	99 24       	eor	r9, r9
    1af2:	f0 c0       	rjmp	.+480    	; 0x1cd4 <movement_for_all+0xf86>
				Stop();
				_delay_ms(1000);
				pos = pos+7;
				scan();
			}
else if(d==2)
    1af4:	92 e0       	ldi	r25, 0x02	; 2
    1af6:	89 16       	cp	r8, r25
    1af8:	91 04       	cpc	r9, r1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <movement_for_all+0xdb0>
    1afc:	76 c0       	rjmp	.+236    	; 0x1bea <movement_for_all+0xe9c>
{
Left();
    1afe:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f ef       	ldi	r25, 0xFF	; 255
    1b06:	a9 e5       	ldi	r26, 0x59	; 89
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	90 40       	sbci	r25, 0x00	; 0
    1b0c:	a0 40       	sbci	r26, 0x00	; 0
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <movement_for_all+0xdba>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <movement_for_all+0xdc4>
    1b12:	00 00       	nop
				_delay_ms(2000);
				scan();
    1b14:	fe 01       	movw	r30, r28
    1b16:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1b18:	48 c0       	rjmp	.+144    	; 0x1baa <movement_for_all+0xe5c>
				{
					scan();
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1b1e:	80 91 7e 02 	lds	r24, 0x027E
    1b22:	83 32       	cpi	r24, 0x23	; 35
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <movement_for_all+0xdda>
    1b26:	41 c0       	rjmp	.+130    	; 0x1baa <movement_for_all+0xe5c>
    1b28:	80 91 7d 02 	lds	r24, 0x027D
    1b2c:	83 32       	cpi	r24, 0x23	; 35
    1b2e:	98 f4       	brcc	.+38     	; 0x1b56 <movement_for_all+0xe08>
    1b30:	80 91 a7 02 	lds	r24, 0x02A7
    1b34:	84 32       	cpi	r24, 0x24	; 36
    1b36:	78 f0       	brcs	.+30     	; 0x1b56 <movement_for_all+0xe08>
					{
						Right();
    1b38:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	9f e7       	ldi	r25, 0x7F	; 127
    1b40:	a4 e0       	ldi	r26, 0x04	; 4
    1b42:	81 50       	subi	r24, 0x01	; 1
    1b44:	90 40       	sbci	r25, 0x00	; 0
    1b46:	a0 40       	sbci	r26, 0x00	; 0
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <movement_for_all+0xdf4>
    1b4a:	00 c0       	rjmp	.+0      	; 0x1b4c <movement_for_all+0xdfe>
    1b4c:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1b4e:	80 91 7e 02 	lds	r24, 0x027E
    1b52:	83 32       	cpi	r24, 0x23	; 35
    1b54:	51 f1       	breq	.+84     	; 0x1baa <movement_for_all+0xe5c>
    1b56:	80 91 7d 02 	lds	r24, 0x027D
    1b5a:	84 32       	cpi	r24, 0x24	; 36
    1b5c:	78 f0       	brcs	.+30     	; 0x1b7c <movement_for_all+0xe2e>
    1b5e:	80 91 a7 02 	lds	r24, 0x02A7
    1b62:	83 32       	cpi	r24, 0x23	; 35
    1b64:	58 f4       	brcc	.+22     	; 0x1b7c <movement_for_all+0xe2e>
					{
						Left();
    1b66:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	9f e7       	ldi	r25, 0x7F	; 127
    1b6e:	a4 e0       	ldi	r26, 0x04	; 4
    1b70:	81 50       	subi	r24, 0x01	; 1
    1b72:	90 40       	sbci	r25, 0x00	; 0
    1b74:	a0 40       	sbci	r26, 0x00	; 0
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <movement_for_all+0xe22>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <movement_for_all+0xe2c>
    1b7a:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1b7c:	80 91 7e 02 	lds	r24, 0x027E
    1b80:	84 32       	cpi	r24, 0x24	; 36
    1b82:	98 f0       	brcs	.+38     	; 0x1baa <movement_for_all+0xe5c>
    1b84:	80 91 7d 02 	lds	r24, 0x027D
    1b88:	83 32       	cpi	r24, 0x23	; 35
    1b8a:	78 f4       	brcc	.+30     	; 0x1baa <movement_for_all+0xe5c>
    1b8c:	80 91 a7 02 	lds	r24, 0x02A7
    1b90:	83 32       	cpi	r24, 0x23	; 35
    1b92:	58 f4       	brcc	.+22     	; 0x1baa <movement_for_all+0xe5c>
					{
						Forward();
    1b94:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	9f e7       	ldi	r25, 0x7F	; 127
    1b9c:	a4 e0       	ldi	r26, 0x04	; 4
    1b9e:	81 50       	subi	r24, 0x01	; 1
    1ba0:	90 40       	sbci	r25, 0x00	; 0
    1ba2:	a0 40       	sbci	r26, 0x00	; 0
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <movement_for_all+0xe50>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <movement_for_all+0xe5a>
    1ba8:	00 00       	nop
else if(d==2)
{
Left();
				_delay_ms(2000);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1baa:	80 91 7e 02 	lds	r24, 0x027E
    1bae:	84 32       	cpi	r24, 0x24	; 36
    1bb0:	08 f4       	brcc	.+2      	; 0x1bb4 <movement_for_all+0xe66>
    1bb2:	b3 cf       	rjmp	.-154    	; 0x1b1a <movement_for_all+0xdcc>
    1bb4:	80 91 7d 02 	lds	r24, 0x027D
    1bb8:	84 32       	cpi	r24, 0x24	; 36
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <movement_for_all+0xe70>
    1bbc:	ae cf       	rjmp	.-164    	; 0x1b1a <movement_for_all+0xdcc>
    1bbe:	80 91 a7 02 	lds	r24, 0x02A7
    1bc2:	84 32       	cpi	r24, 0x24	; 36
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <movement_for_all+0xe7a>
    1bc6:	a9 cf       	rjmp	.-174    	; 0x1b1a <movement_for_all+0xdcc>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    1bc8:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	9f ef       	ldi	r25, 0xFF	; 255
    1bd0:	ac e2       	ldi	r26, 0x2C	; 44
    1bd2:	81 50       	subi	r24, 0x01	; 1
    1bd4:	90 40       	sbci	r25, 0x00	; 0
    1bd6:	a0 40       	sbci	r26, 0x00	; 0
    1bd8:	e1 f7       	brne	.-8      	; 0x1bd2 <movement_for_all+0xe84>
    1bda:	00 c0       	rjmp	.+0      	; 0x1bdc <movement_for_all+0xe8e>
    1bdc:	00 00       	nop
				_delay_ms(1000);
				pos = pos-7;
				scan();
    1bde:	fe 01       	movw	r30, r28
    1be0:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos-7;
    1be2:	85 01       	movw	r16, r10
				Stop();
				_delay_ms(1000);
				pos = pos-7;
				scan();
			}
			d=0;
    1be4:	88 24       	eor	r8, r8
    1be6:	99 24       	eor	r9, r9
    1be8:	75 c0       	rjmp	.+234    	; 0x1cd4 <movement_for_all+0xf86>
				scan();
}
			else
			{
				
				Forward();
    1bea:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1bee:	8f ef       	ldi	r24, 0xFF	; 255
    1bf0:	9f eb       	ldi	r25, 0xBF	; 191
    1bf2:	a1 e2       	ldi	r26, 0x21	; 33
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	90 40       	sbci	r25, 0x00	; 0
    1bf8:	a0 40       	sbci	r26, 0x00	; 0
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <movement_for_all+0xea6>
    1bfc:	00 c0       	rjmp	.+0      	; 0x1bfe <movement_for_all+0xeb0>
    1bfe:	00 00       	nop
				_delay_ms(750);
				scan();
    1c00:	fe 01       	movw	r30, r28
    1c02:	19 95       	eicall
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1c04:	48 c0       	rjmp	.+144    	; 0x1c96 <movement_for_all+0xf48>
				{
					scan();
    1c06:	fe 01       	movw	r30, r28
    1c08:	19 95       	eicall
					if((ADC_valueC<35 && ADC_valueL< 35 && ADC_valueR>35)||(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR>35))
    1c0a:	80 91 7e 02 	lds	r24, 0x027E
    1c0e:	83 32       	cpi	r24, 0x23	; 35
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <movement_for_all+0xec6>
    1c12:	41 c0       	rjmp	.+130    	; 0x1c96 <movement_for_all+0xf48>
    1c14:	80 91 7d 02 	lds	r24, 0x027D
    1c18:	83 32       	cpi	r24, 0x23	; 35
    1c1a:	98 f4       	brcc	.+38     	; 0x1c42 <movement_for_all+0xef4>
    1c1c:	80 91 a7 02 	lds	r24, 0x02A7
    1c20:	84 32       	cpi	r24, 0x24	; 36
    1c22:	78 f0       	brcs	.+30     	; 0x1c42 <movement_for_all+0xef4>
					{
						Right();
    1c24:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Right>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f e7       	ldi	r25, 0x7F	; 127
    1c2c:	a4 e0       	ldi	r26, 0x04	; 4
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	90 40       	sbci	r25, 0x00	; 0
    1c32:	a0 40       	sbci	r26, 0x00	; 0
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <movement_for_all+0xee0>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <movement_for_all+0xeea>
    1c38:	00 00       	nop
						_delay_ms(100);
					}
					if((ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR<35)||(ADC_valueC<35 && ADC_valueL> 35 && ADC_valueR<35))
    1c3a:	80 91 7e 02 	lds	r24, 0x027E
    1c3e:	83 32       	cpi	r24, 0x23	; 35
    1c40:	51 f1       	breq	.+84     	; 0x1c96 <movement_for_all+0xf48>
    1c42:	80 91 7d 02 	lds	r24, 0x027D
    1c46:	84 32       	cpi	r24, 0x24	; 36
    1c48:	78 f0       	brcs	.+30     	; 0x1c68 <movement_for_all+0xf1a>
    1c4a:	80 91 a7 02 	lds	r24, 0x02A7
    1c4e:	83 32       	cpi	r24, 0x23	; 35
    1c50:	58 f4       	brcc	.+22     	; 0x1c68 <movement_for_all+0xf1a>
					{
						Left();
    1c52:	0e 94 85 06 	call	0xd0a	; 0xd0a <Left>
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	9f e7       	ldi	r25, 0x7F	; 127
    1c5a:	a4 e0       	ldi	r26, 0x04	; 4
    1c5c:	81 50       	subi	r24, 0x01	; 1
    1c5e:	90 40       	sbci	r25, 0x00	; 0
    1c60:	a0 40       	sbci	r26, 0x00	; 0
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <movement_for_all+0xf0e>
    1c64:	00 c0       	rjmp	.+0      	; 0x1c66 <movement_for_all+0xf18>
    1c66:	00 00       	nop
						_delay_ms(100);
					}
					if(ADC_valueC>35 && ADC_valueL< 35 && ADC_valueR<35)
    1c68:	80 91 7e 02 	lds	r24, 0x027E
    1c6c:	84 32       	cpi	r24, 0x24	; 36
    1c6e:	98 f0       	brcs	.+38     	; 0x1c96 <movement_for_all+0xf48>
    1c70:	80 91 7d 02 	lds	r24, 0x027D
    1c74:	83 32       	cpi	r24, 0x23	; 35
    1c76:	78 f4       	brcc	.+30     	; 0x1c96 <movement_for_all+0xf48>
    1c78:	80 91 a7 02 	lds	r24, 0x02A7
    1c7c:	83 32       	cpi	r24, 0x23	; 35
    1c7e:	58 f4       	brcc	.+22     	; 0x1c96 <movement_for_all+0xf48>
					{
						Forward();
    1c80:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Forward>
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	9f e7       	ldi	r25, 0x7F	; 127
    1c88:	a4 e0       	ldi	r26, 0x04	; 4
    1c8a:	81 50       	subi	r24, 0x01	; 1
    1c8c:	90 40       	sbci	r25, 0x00	; 0
    1c8e:	a0 40       	sbci	r26, 0x00	; 0
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <movement_for_all+0xf3c>
    1c92:	00 c0       	rjmp	.+0      	; 0x1c94 <movement_for_all+0xf46>
    1c94:	00 00       	nop
			{
				
				Forward();
				_delay_ms(750);
				scan();
				while(!(ADC_valueC>35 && ADC_valueL> 35 && ADC_valueR>35))
    1c96:	80 91 7e 02 	lds	r24, 0x027E
    1c9a:	84 32       	cpi	r24, 0x24	; 36
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <movement_for_all+0xf52>
    1c9e:	b3 cf       	rjmp	.-154    	; 0x1c06 <movement_for_all+0xeb8>
    1ca0:	80 91 7d 02 	lds	r24, 0x027D
    1ca4:	84 32       	cpi	r24, 0x24	; 36
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <movement_for_all+0xf5c>
    1ca8:	ae cf       	rjmp	.-164    	; 0x1c06 <movement_for_all+0xeb8>
    1caa:	80 91 a7 02 	lds	r24, 0x02A7
    1cae:	84 32       	cpi	r24, 0x24	; 36
    1cb0:	08 f4       	brcc	.+2      	; 0x1cb4 <movement_for_all+0xf66>
    1cb2:	a9 cf       	rjmp	.-174    	; 0x1c06 <movement_for_all+0xeb8>
					{
						Forward();
						_delay_ms(100);
					}
				}
				Stop();
    1cb4:	0e 94 90 06 	call	0xd20	; 0xd20 <Stop>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	ac e2       	ldi	r26, 0x2C	; 44
    1cbe:	81 50       	subi	r24, 0x01	; 1
    1cc0:	90 40       	sbci	r25, 0x00	; 0
    1cc2:	a0 40       	sbci	r26, 0x00	; 0
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <movement_for_all+0xf70>
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <movement_for_all+0xf7a>
    1cc8:	00 00       	nop
				_delay_ms(1000);
				pos = pos-7;
				scan();
    1cca:	fe 01       	movw	r30, r28
    1ccc:	19 95       	eicall
						_delay_ms(100);
					}
				}
				Stop();
				_delay_ms(1000);
				pos = pos-7;
    1cce:	85 01       	movw	r16, r10
				scan();
			}
			d=0;
    1cd0:	88 24       	eor	r8, r8
    1cd2:	99 24       	eor	r9, r9
break;
}
	}
	 
	  //for the number of turns
	for (x=1;x<=lenght;x++)
    1cd4:	08 94       	sec
    1cd6:	e1 1c       	adc	r14, r1
    1cd8:	f1 1c       	adc	r15, r1
    1cda:	4e 14       	cp	r4, r14
    1cdc:	5f 04       	cpc	r5, r15
    1cde:	0c f0       	brlt	.+2      	; 0x1ce2 <movement_for_all+0xf94>
    1ce0:	76 c8       	rjmp	.-3860   	; 0xdce <movement_for_all+0x80>
			d=0;
		}
		

	}
y78=d;
    1ce2:	90 92 05 02 	sts	0x0205, r9
    1ce6:	80 92 04 02 	sts	0x0204, r8
	present=pos;
    1cea:	10 93 80 02 	sts	0x0280, r17
    1cee:	00 93 7f 02 	sts	0x027F, r16
	for(i=0;i<49;i++)
    1cf2:	10 92 0d 02 	sts	0x020D, r1
    1cf6:	10 92 0c 02 	sts	0x020C, r1
    1cfa:	80 91 0c 02 	lds	r24, 0x020C
    1cfe:	90 91 0d 02 	lds	r25, 0x020D
    1d02:	81 33       	cpi	r24, 0x31	; 49
    1d04:	91 05       	cpc	r25, r1
    1d06:	f4 f4       	brge	.+60     	; 0x1d44 <movement_for_all+0xff6>
	{
		c[i]=99;
    1d08:	2d ea       	ldi	r18, 0xAD	; 173
    1d0a:	32 e0       	ldi	r19, 0x02	; 2
    1d0c:	43 e6       	ldi	r20, 0x63	; 99
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	e0 91 0c 02 	lds	r30, 0x020C
    1d14:	f0 91 0d 02 	lds	r31, 0x020D
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	e2 0f       	add	r30, r18
    1d1e:	f3 1f       	adc	r31, r19
    1d20:	51 83       	std	Z+1, r21	; 0x01
    1d22:	40 83       	st	Z, r20
		

	}
y78=d;
	present=pos;
	for(i=0;i<49;i++)
    1d24:	80 91 0c 02 	lds	r24, 0x020C
    1d28:	90 91 0d 02 	lds	r25, 0x020D
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	90 93 0d 02 	sts	0x020D, r25
    1d32:	80 93 0c 02 	sts	0x020C, r24
    1d36:	80 91 0c 02 	lds	r24, 0x020C
    1d3a:	90 91 0d 02 	lds	r25, 0x020D
    1d3e:	81 33       	cpi	r24, 0x31	; 49
    1d40:	91 05       	cpc	r25, r1
    1d42:	34 f3       	brlt	.-52     	; 0x1d10 <movement_for_all+0xfc2>
	{
		c[i]=99;
		
	}
	lcd_print(1,10,present,2);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	6a e0       	ldi	r22, 0x0A	; 10
    1d48:	a8 01       	movw	r20, r16
    1d4a:	22 e0       	ldi	r18, 0x02	; 2
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>

}
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	3f 90       	pop	r3
    1d74:	2f 90       	pop	r2
    1d76:	08 95       	ret

00001d78 <adc_pin_Config>:


void adc_pin_Config(void)
{
	
	DDRF=0x00;
    1d78:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
    1d7a:	11 ba       	out	0x11, r1	; 17
	DDRK=0X00;
    1d7c:	10 92 07 01 	sts	0x0107, r1
	PORTK=0X00;
    1d80:	10 92 08 01 	sts	0x0108, r1
}	
    1d84:	08 95       	ret

00001d86 <init_devices>:
	
}

void init_devices(void)
{
	cli();
    1d86:	f8 94       	cli
	port_init();
    1d88:	0e 94 c6 05 	call	0xb8c	; 0xb8c <port_init>
	adc_init();
    1d8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <adc_init>
	timer5_init();
    1d90:	0e 94 cd 05 	call	0xb9a	; 0xb9a <timer5_init>
	usart_init();
    1d94:	0e 94 95 06 	call	0xd2a	; 0xd2a <usart_init>
	sei();
    1d98:	78 94       	sei
	
}
    1d9a:	08 95       	ret

00001d9c <main>:



int main(void)
{
	lcd_port_config();
    1d9c:	0e 94 92 03 	call	0x724	; 0x724 <lcd_port_config>
	lcd_set_4bit();
    1da0:	0e 94 99 03 	call	0x732	; 0x732 <lcd_set_4bit>
	lcd_init();
    1da4:	0e 94 01 04 	call	0x802	; 0x802 <lcd_init>
init_devices();
    1da8:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <init_devices>
	
	for(loc2=0;loc2<10;loc2++)
    1dac:	10 92 17 02 	sts	0x0217, r1
    1db0:	10 92 16 02 	sts	0x0216, r1
	{
		spark_r[loc2]=99;
    1db4:	41 e3       	ldi	r20, 0x31	; 49
    1db6:	53 e0       	ldi	r21, 0x03	; 3
    1db8:	23 e6       	ldi	r18, 0x63	; 99
    1dba:	30 e0       	ldi	r19, 0x00	; 0
		spark_b[loc2]=99;
    1dbc:	6d e1       	ldi	r22, 0x1D	; 29
    1dbe:	73 e0       	ldi	r23, 0x03	; 3
		if (loc2<3)
		{
			r30[loc2]=99;
    1dc0:	a3 e1       	ldi	r26, 0x13	; 19
    1dc2:	b3 e0       	ldi	r27, 0x03	; 3
	lcd_port_config();
	lcd_set_4bit();
	lcd_init();
init_devices();
	
	for(loc2=0;loc2<10;loc2++)
    1dc4:	2e c0       	rjmp	.+92     	; 0x1e22 <main+0x86>
	{
		spark_r[loc2]=99;
    1dc6:	e0 91 16 02 	lds	r30, 0x0216
    1dca:	f0 91 17 02 	lds	r31, 0x0217
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	e4 0f       	add	r30, r20
    1dd4:	f5 1f       	adc	r31, r21
    1dd6:	31 83       	std	Z+1, r19	; 0x01
    1dd8:	20 83       	st	Z, r18
		spark_b[loc2]=99;
    1dda:	e0 91 16 02 	lds	r30, 0x0216
    1dde:	f0 91 17 02 	lds	r31, 0x0217
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	e6 0f       	add	r30, r22
    1de8:	f7 1f       	adc	r31, r23
    1dea:	31 83       	std	Z+1, r19	; 0x01
    1dec:	20 83       	st	Z, r18
		if (loc2<3)
    1dee:	80 91 16 02 	lds	r24, 0x0216
    1df2:	90 91 17 02 	lds	r25, 0x0217
    1df6:	83 30       	cpi	r24, 0x03	; 3
    1df8:	91 05       	cpc	r25, r1
    1dfa:	54 f4       	brge	.+20     	; 0x1e10 <main+0x74>
		{
			r30[loc2]=99;
    1dfc:	e0 91 16 02 	lds	r30, 0x0216
    1e00:	f0 91 17 02 	lds	r31, 0x0217
    1e04:	ee 0f       	add	r30, r30
    1e06:	ff 1f       	adc	r31, r31
    1e08:	ea 0f       	add	r30, r26
    1e0a:	fb 1f       	adc	r31, r27
    1e0c:	31 83       	std	Z+1, r19	; 0x01
    1e0e:	20 83       	st	Z, r18
	lcd_port_config();
	lcd_set_4bit();
	lcd_init();
init_devices();
	
	for(loc2=0;loc2<10;loc2++)
    1e10:	80 91 16 02 	lds	r24, 0x0216
    1e14:	90 91 17 02 	lds	r25, 0x0217
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	90 93 17 02 	sts	0x0217, r25
    1e1e:	80 93 16 02 	sts	0x0216, r24
    1e22:	80 91 16 02 	lds	r24, 0x0216
    1e26:	90 91 17 02 	lds	r25, 0x0217
    1e2a:	8a 30       	cpi	r24, 0x0A	; 10
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	5c f2       	brlt	.-106    	; 0x1dc6 <main+0x2a>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	ac e2       	ldi	r26, 0x2C	; 44
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	90 40       	sbci	r25, 0x00	; 0
    1e3a:	a0 40       	sbci	r26, 0x00	; 0
    1e3c:	e1 f7       	brne	.-8      	; 0x1e36 <main+0x9a>
    1e3e:	00 c0       	rjmp	.+0      	; 0x1e40 <main+0xa4>
    1e40:	00 00       	nop
	}
	
//path_finder(9,34,r30);
//movement_for_all();
_delay_ms(1000);
loc2=0;
    1e42:	10 92 17 02 	sts	0x0217, r1
    1e46:	10 92 16 02 	sts	0x0216, r1
	
	lcd_print(1,10,loc3,2);
			
			for(w=0;w<4;w++)
			{
				lcd_print(2,11,spark_b[w],4);
    1e4a:	0d e1       	ldi	r16, 0x1D	; 29
    1e4c:	13 e0       	ldi	r17, 0x03	; 3
				lcd_print(2,1,spark_r[w],4);
    1e4e:	c1 e3       	ldi	r28, 0x31	; 49
    1e50:	d3 e0       	ldi	r29, 0x03	; 3
_delay_ms(1000);
loc2=0;
	while(1)
	{
	
	lcd_print(1,10,loc3,2);
    1e52:	40 91 49 03 	lds	r20, 0x0349
    1e56:	50 91 4a 03 	lds	r21, 0x034A
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	6a e0       	ldi	r22, 0x0A	; 10
    1e5e:	22 e0       	ldi	r18, 0x02	; 2
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
			
			for(w=0;w<4;w++)
    1e66:	10 92 8e 02 	sts	0x028E, r1
    1e6a:	10 92 8d 02 	sts	0x028D, r1
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
			{
				lcd_print(2,11,spark_b[w],4);
    1e72:	fc 01       	movw	r30, r24
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	e0 0f       	add	r30, r16
    1e7a:	f1 1f       	adc	r31, r17
    1e7c:	40 81       	ld	r20, Z
    1e7e:	51 81       	ldd	r21, Z+1	; 0x01
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	6b e0       	ldi	r22, 0x0B	; 11
    1e84:	24 e0       	ldi	r18, 0x04	; 4
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
				lcd_print(2,1,spark_r[w],4);
    1e8c:	e0 91 8d 02 	lds	r30, 0x028D
    1e90:	f0 91 8e 02 	lds	r31, 0x028E
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ec 0f       	add	r30, r28
    1e9a:	fd 1f       	adc	r31, r29
    1e9c:	40 81       	ld	r20, Z
    1e9e:	51 81       	ldd	r21, Z+1	; 0x01
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	24 e0       	ldi	r18, 0x04	; 4
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	9f ef       	ldi	r25, 0xFF	; 255
    1eb0:	ac e2       	ldi	r26, 0x2C	; 44
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	90 40       	sbci	r25, 0x00	; 0
    1eb6:	a0 40       	sbci	r26, 0x00	; 0
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <main+0x116>
    1eba:	00 c0       	rjmp	.+0      	; 0x1ebc <main+0x120>
    1ebc:	00 00       	nop
	while(1)
	{
	
	lcd_print(1,10,loc3,2);
			
			for(w=0;w<4;w++)
    1ebe:	80 91 8d 02 	lds	r24, 0x028D
    1ec2:	90 91 8e 02 	lds	r25, 0x028E
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	90 93 8e 02 	sts	0x028E, r25
    1ecc:	80 93 8d 02 	sts	0x028D, r24
    1ed0:	84 30       	cpi	r24, 0x04	; 4
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	74 f2       	brlt	.-100    	; 0x1e72 <main+0xd6>
				
				_delay_ms(1000);
			}
		
			
			lcd_print(1,5,flag,2);
    1ed6:	40 91 14 02 	lds	r20, 0x0214
    1eda:	50 91 15 02 	lds	r21, 0x0215
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	65 e0       	ldi	r22, 0x05	; 5
    1ee2:	22 e0       	ldi	r18, 0x02	; 2
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
    1eea:	8f ef       	ldi	r24, 0xFF	; 255
    1eec:	9f ef       	ldi	r25, 0xFF	; 255
    1eee:	ac e2       	ldi	r26, 0x2C	; 44
    1ef0:	81 50       	subi	r24, 0x01	; 1
    1ef2:	90 40       	sbci	r25, 0x00	; 0
    1ef4:	a0 40       	sbci	r26, 0x00	; 0
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <main+0x154>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <main+0x15e>
    1efa:	00 00       	nop
			_delay_ms(1000);
		if(flag==1)
    1efc:	80 91 14 02 	lds	r24, 0x0214
    1f00:	90 91 15 02 	lds	r25, 0x0215
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <main+0x170>
    1f0a:	9b c0       	rjmp	.+310    	; 0x2042 <main+0x2a6>
		{
			
			lcd_print(1,5,flag,2);
    1f0c:	40 91 14 02 	lds	r20, 0x0214
    1f10:	50 91 15 02 	lds	r21, 0x0215
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	65 e0       	ldi	r22, 0x05	; 5
    1f18:	22 e0       	ldi	r18, 0x02	; 2
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
				
				for(w=0;w<4;w++)
    1f20:	10 92 8e 02 	sts	0x028E, r1
    1f24:	10 92 8d 02 	sts	0x028D, r1
				{
					lcd_print(1,5,flag,2);
    1f28:	40 91 14 02 	lds	r20, 0x0214
    1f2c:	50 91 15 02 	lds	r21, 0x0215
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	65 e0       	ldi	r22, 0x05	; 5
    1f34:	22 e0       	ldi	r18, 0x02	; 2
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
					lcd_print(1,6,spark_r[w],4);
    1f3c:	e0 91 8d 02 	lds	r30, 0x028D
    1f40:	f0 91 8e 02 	lds	r31, 0x028E
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	ec 0f       	add	r30, r28
    1f4a:	fd 1f       	adc	r31, r29
    1f4c:	40 81       	ld	r20, Z
    1f4e:	51 81       	ldd	r21, Z+1	; 0x01
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	66 e0       	ldi	r22, 0x06	; 6
    1f54:	24 e0       	ldi	r18, 0x04	; 4
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
					lcd_print(1,13,j,2);
    1f5c:	40 91 0a 02 	lds	r20, 0x020A
    1f60:	50 91 0b 02 	lds	r21, 0x020B
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	6d e0       	ldi	r22, 0x0D	; 13
    1f68:	22 e0       	ldi	r18, 0x02	; 2
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	9f ef       	ldi	r25, 0xFF	; 255
    1f74:	ac e2       	ldi	r26, 0x2C	; 44
    1f76:	81 50       	subi	r24, 0x01	; 1
    1f78:	90 40       	sbci	r25, 0x00	; 0
    1f7a:	a0 40       	sbci	r26, 0x00	; 0
    1f7c:	e1 f7       	brne	.-8      	; 0x1f76 <main+0x1da>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <main+0x1e4>
    1f80:	00 00       	nop
		if(flag==1)
		{
			
			lcd_print(1,5,flag,2);
				
				for(w=0;w<4;w++)
    1f82:	80 91 8d 02 	lds	r24, 0x028D
    1f86:	90 91 8e 02 	lds	r25, 0x028E
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	90 93 8e 02 	sts	0x028E, r25
    1f90:	80 93 8d 02 	sts	0x028D, r24
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	91 05       	cpc	r25, r1
    1f98:	3c f2       	brlt	.-114    	; 0x1f28 <main+0x18c>
					lcd_print(1,6,spark_r[w],4);
					lcd_print(1,13,j,2);
					
					_delay_ms(1000);
				}
			computational_stuff();
    1f9a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <computational_stuff>
		
			lcd_wr_command(0x01);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
				if(flag==2)
    1fa4:	80 91 14 02 	lds	r24, 0x0214
    1fa8:	90 91 15 02 	lds	r25, 0x0215
    1fac:	82 30       	cpi	r24, 0x02	; 2
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <main+0x218>
    1fb2:	47 c0       	rjmp	.+142    	; 0x2042 <main+0x2a6>
				{
					for(i=0;(i<6 && spark_r[i]!=99);i++)
    1fb4:	10 92 0d 02 	sts	0x020D, r1
    1fb8:	10 92 0c 02 	sts	0x020C, r1
    1fbc:	80 91 0c 02 	lds	r24, 0x020C
    1fc0:	90 91 0d 02 	lds	r25, 0x020D
    1fc4:	86 30       	cpi	r24, 0x06	; 6
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	e4 f5       	brge	.+120    	; 0x2042 <main+0x2a6>
    1fca:	e0 91 0c 02 	lds	r30, 0x020C
    1fce:	f0 91 0d 02 	lds	r31, 0x020D
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	ec 0f       	add	r30, r28
    1fd8:	fd 1f       	adc	r31, r29
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	83 36       	cpi	r24, 0x63	; 99
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	79 f1       	breq	.+94     	; 0x2042 <main+0x2a6>
					{
					
					uart_transmit(spark_r[i]+100);
    1fe4:	e0 91 0c 02 	lds	r30, 0x020C
    1fe8:	f0 91 0d 02 	lds	r31, 0x020D
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ec 0f       	add	r30, r28
    1ff2:	fd 1f       	adc	r31, r29
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	8c 59       	subi	r24, 0x9C	; 156
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart_transmit>
				
					flag=0;
    2000:	10 92 15 02 	sts	0x0215, r1
    2004:	10 92 14 02 	sts	0x0214, r1
			computational_stuff();
		
			lcd_wr_command(0x01);
				if(flag==2)
				{
					for(i=0;(i<6 && spark_r[i]!=99);i++)
    2008:	80 91 0c 02 	lds	r24, 0x020C
    200c:	90 91 0d 02 	lds	r25, 0x020D
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	90 93 0d 02 	sts	0x020D, r25
    2016:	80 93 0c 02 	sts	0x020C, r24
    201a:	80 91 0c 02 	lds	r24, 0x020C
    201e:	90 91 0d 02 	lds	r25, 0x020D
    2022:	86 30       	cpi	r24, 0x06	; 6
    2024:	91 05       	cpc	r25, r1
    2026:	6c f4       	brge	.+26     	; 0x2042 <main+0x2a6>
    2028:	e0 91 0c 02 	lds	r30, 0x020C
    202c:	f0 91 0d 02 	lds	r31, 0x020D
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	ec 0f       	add	r30, r28
    2036:	fd 1f       	adc	r31, r29
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	83 36       	cpi	r24, 0x63	; 99
    203e:	91 05       	cpc	r25, r1
    2040:	89 f6       	brne	.-94     	; 0x1fe4 <main+0x248>
				
					flag=0;
				}
				}			
		}
		 if(flag2==1)
    2042:	80 91 12 02 	lds	r24, 0x0212
    2046:	90 91 13 02 	lds	r25, 0x0213
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	09 f0       	breq	.+2      	; 0x2052 <main+0x2b6>
    2050:	00 cf       	rjmp	.-512    	; 0x1e52 <main+0xb6>
		{
			flag=4;
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	90 93 15 02 	sts	0x0215, r25
    205a:	80 93 14 02 	sts	0x0214, r24
			computational_stuff();
    205e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <computational_stuff>
			if(flag2==2)
    2062:	80 91 12 02 	lds	r24, 0x0212
    2066:	90 91 13 02 	lds	r25, 0x0213
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	91 05       	cpc	r25, r1
    206e:	09 f0       	breq	.+2      	; 0x2072 <main+0x2d6>
    2070:	f0 ce       	rjmp	.-544    	; 0x1e52 <main+0xb6>
			{lcd_wr_command(0x01);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <lcd_wr_command>
				lcd_print(1,1,flag2,2);
    2078:	40 91 12 02 	lds	r20, 0x0212
    207c:	50 91 13 02 	lds	r21, 0x0213
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	22 e0       	ldi	r18, 0x02	; 2
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
				
				for(i=0;(i<6 && spark_b[i]!=99);i++)
    208c:	10 92 0d 02 	sts	0x020D, r1
    2090:	10 92 0c 02 	sts	0x020C, r1
    2094:	80 91 0c 02 	lds	r24, 0x020C
    2098:	90 91 0d 02 	lds	r25, 0x020D
    209c:	86 30       	cpi	r24, 0x06	; 6
    209e:	91 05       	cpc	r25, r1
    20a0:	0c f0       	brlt	.+2      	; 0x20a4 <main+0x308>
    20a2:	d7 ce       	rjmp	.-594    	; 0x1e52 <main+0xb6>
    20a4:	e0 91 0c 02 	lds	r30, 0x020C
    20a8:	f0 91 0d 02 	lds	r31, 0x020D
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e0 0f       	add	r30, r16
    20b2:	f1 1f       	adc	r31, r17
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	83 36       	cpi	r24, 0x63	; 99
    20ba:	91 05       	cpc	r25, r1
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <main+0x324>
    20be:	c9 ce       	rjmp	.-622    	; 0x1e52 <main+0xb6>
				{
					lcd_print(2,2,flag2,2);
    20c0:	40 91 12 02 	lds	r20, 0x0212
    20c4:	50 91 13 02 	lds	r21, 0x0213
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	62 e0       	ldi	r22, 0x02	; 2
    20cc:	22 e0       	ldi	r18, 0x02	; 2
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lcd_print>
					
					uart_transmit(spark_b[i]+100);
    20d4:	e0 91 0c 02 	lds	r30, 0x020C
    20d8:	f0 91 0d 02 	lds	r31, 0x020D
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	e0 0f       	add	r30, r16
    20e2:	f1 1f       	adc	r31, r17
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	8c 59       	subi	r24, 0x9C	; 156
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart_transmit>
				
					flag=0;
    20f0:	10 92 15 02 	sts	0x0215, r1
    20f4:	10 92 14 02 	sts	0x0214, r1
					flag2=0;
    20f8:	10 92 13 02 	sts	0x0213, r1
    20fc:	10 92 12 02 	sts	0x0212, r1
			computational_stuff();
			if(flag2==2)
			{lcd_wr_command(0x01);
				lcd_print(1,1,flag2,2);
				
				for(i=0;(i<6 && spark_b[i]!=99);i++)
    2100:	80 91 0c 02 	lds	r24, 0x020C
    2104:	90 91 0d 02 	lds	r25, 0x020D
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	90 93 0d 02 	sts	0x020D, r25
    210e:	80 93 0c 02 	sts	0x020C, r24
    2112:	80 91 0c 02 	lds	r24, 0x020C
    2116:	90 91 0d 02 	lds	r25, 0x020D
    211a:	86 30       	cpi	r24, 0x06	; 6
    211c:	91 05       	cpc	r25, r1
    211e:	0c f0       	brlt	.+2      	; 0x2122 <main+0x386>
    2120:	98 ce       	rjmp	.-720    	; 0x1e52 <main+0xb6>
    2122:	e0 91 0c 02 	lds	r30, 0x020C
    2126:	f0 91 0d 02 	lds	r31, 0x020D
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	e0 0f       	add	r30, r16
    2130:	f1 1f       	adc	r31, r17
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	83 36       	cpi	r24, 0x63	; 99
    2138:	91 05       	cpc	r25, r1
    213a:	11 f6       	brne	.-124    	; 0x20c0 <main+0x324>
    213c:	8a ce       	rjmp	.-748    	; 0x1e52 <main+0xb6>

0000213e <cost_cal>:

}


int cost_cal(int t8)
{
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	60 97       	sbiw	r28, 0x10	; 16
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	7c 01       	movw	r14, r24
	int p10[4],c=0;
	int g10[4],i;
	int x10[4];
	
	p10[0]=t8;
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
	
	g10[0]=path_finder(p10[0],loc2,r30);
    216c:	60 91 16 02 	lds	r22, 0x0216
    2170:	70 91 17 02 	lds	r23, 0x0217
    2174:	0f 2e       	mov	r0, r31
    2176:	f3 e1       	ldi	r31, 0x13	; 19
    2178:	cf 2e       	mov	r12, r31
    217a:	f3 e0       	ldi	r31, 0x03	; 3
    217c:	df 2e       	mov	r13, r31
    217e:	f0 2d       	mov	r31, r0
    2180:	a6 01       	movw	r20, r12
    2182:	0e 94 44 01 	call	0x288	; 0x288 <path_finder>
    2186:	8c 01       	movw	r16, r24
    2188:	9a 87       	std	Y+10, r25	; 0x0a
    218a:	89 87       	std	Y+9, r24	; 0x09
	p10[1]=t8+7;
    218c:	c7 01       	movw	r24, r14
    218e:	07 96       	adiw	r24, 0x07	; 7
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
	
	g10[1]=path_finder(p10[1],loc2,r30);
    2194:	60 91 16 02 	lds	r22, 0x0216
    2198:	70 91 17 02 	lds	r23, 0x0217
    219c:	a6 01       	movw	r20, r12
    219e:	0e 94 44 01 	call	0x288	; 0x288 <path_finder>
    21a2:	5c 01       	movw	r10, r24
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
	p10[2]=t8+8;
    21a8:	c7 01       	movw	r24, r14
    21aa:	08 96       	adiw	r24, 0x08	; 8
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05

	g10[2]=path_finder(p10[2],loc2,r30);
    21b0:	60 91 16 02 	lds	r22, 0x0216
    21b4:	70 91 17 02 	lds	r23, 0x0217
    21b8:	a6 01       	movw	r20, r12
    21ba:	0e 94 44 01 	call	0x288	; 0x288 <path_finder>
    21be:	4c 01       	movw	r8, r24
    21c0:	9e 87       	std	Y+14, r25	; 0x0e
    21c2:	8d 87       	std	Y+13, r24	; 0x0d
	p10[3]=t8+1;
    21c4:	c7 01       	movw	r24, r14
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	8f 83       	std	Y+7, r24	; 0x07
	
	g10[3]=path_finder(p10[3],loc2,r30);
    21cc:	60 91 16 02 	lds	r22, 0x0216
    21d0:	70 91 17 02 	lds	r23, 0x0217
    21d4:	a6 01       	movw	r20, r12
    21d6:	0e 94 44 01 	call	0x288	; 0x288 <path_finder>
    21da:	dc 01       	movw	r26, r24
	x10[1]=g10[1];
	x10[2]=g10[2];
	x10[3]=g10[3];
	x10[0]=g10[0];
	while((x10[1]!=0)&&(x10[2]!=0)&&(x10[3]!=0 )&& (x10[0]!=0))
    21dc:	a1 14       	cp	r10, r1
    21de:	b1 04       	cpc	r11, r1
    21e0:	c1 f0       	breq	.+48     	; 0x2212 <__stack+0x13>
    21e2:	81 14       	cp	r8, r1
    21e4:	91 04       	cpc	r9, r1
    21e6:	c1 f0       	breq	.+48     	; 0x2218 <__stack+0x19>
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	c9 f0       	breq	.+50     	; 0x221e <__stack+0x1f>
    21ec:	01 15       	cp	r16, r1
    21ee:	11 05       	cpc	r17, r1
    21f0:	c9 f0       	breq	.+50     	; 0x2224 <__stack+0x25>


}


int cost_cal(int t8)
    21f2:	a5 01       	movw	r20, r10
    21f4:	bc 01       	movw	r22, r24
    21f6:	94 01       	movw	r18, r8
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		x10[1]=x10[1]-1;
		x10[2]=x10[2]-1;
		x10[3]=x10[3]-1;
		x10[0]--;
		c++;
    21fc:	fc 01       	movw	r30, r24
	g10[3]=path_finder(p10[3],loc2,r30);
	x10[1]=g10[1];
	x10[2]=g10[2];
	x10[3]=g10[3];
	x10[0]=g10[0];
	while((x10[1]!=0)&&(x10[2]!=0)&&(x10[3]!=0 )&& (x10[0]!=0))
    21fe:	84 17       	cp	r24, r20
    2200:	95 07       	cpc	r25, r21
    2202:	91 f0       	breq	.+36     	; 0x2228 <__stack+0x29>
    2204:	82 17       	cp	r24, r18
    2206:	93 07       	cpc	r25, r19
    2208:	79 f0       	breq	.+30     	; 0x2228 <__stack+0x29>
    220a:	86 17       	cp	r24, r22
    220c:	97 07       	cpc	r25, r23
    220e:	91 f4       	brne	.+36     	; 0x2234 <__stack+0x35>
    2210:	0b c0       	rjmp	.+22     	; 0x2228 <__stack+0x29>
}


int cost_cal(int t8)
{
	int p10[4],c=0;
    2212:	e0 e0       	ldi	r30, 0x00	; 0
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <__stack+0x29>
    2218:	e0 e0       	ldi	r30, 0x00	; 0
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <__stack+0x29>
    221e:	e0 e0       	ldi	r30, 0x00	; 0
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <__stack+0x29>
    2224:	e0 e0       	ldi	r30, 0x00	; 0
    2226:	f0 e0       	ldi	r31, 0x00	; 0
		c++;
		
	}
	for(i=0;i<4;i++)
	{
		if(g10[i]==c)
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	8e 17       	cp	r24, r30
    222e:	9f 07       	cpc	r25, r31
    2230:	41 f4       	brne	.+16     	; 0x2242 <__stack+0x43>
    2232:	1d c0       	rjmp	.+58     	; 0x226e <__stack+0x6f>
	while((x10[1]!=0)&&(x10[2]!=0)&&(x10[3]!=0 )&& (x10[0]!=0))
	{
		x10[1]=x10[1]-1;
		x10[2]=x10[2]-1;
		x10[3]=x10[3]-1;
		x10[0]--;
    2234:	01 50       	subi	r16, 0x01	; 1
    2236:	10 40       	sbci	r17, 0x00	; 0
    2238:	01 96       	adiw	r24, 0x01	; 1
	g10[3]=path_finder(p10[3],loc2,r30);
	x10[1]=g10[1];
	x10[2]=g10[2];
	x10[3]=g10[3];
	x10[0]=g10[0];
	while((x10[1]!=0)&&(x10[2]!=0)&&(x10[3]!=0 )&& (x10[0]!=0))
    223a:	01 15       	cp	r16, r1
    223c:	11 05       	cpc	r17, r1
    223e:	f1 f6       	brne	.-68     	; 0x21fc <cost_cal+0xbe>
    2240:	f3 cf       	rjmp	.-26     	; 0x2228 <__stack+0x29>
		c++;
		
	}
	for(i=0;i<4;i++)
	{
		if(g10[i]==c)
    2242:	8b 85       	ldd	r24, Y+11	; 0x0b
    2244:	9c 85       	ldd	r25, Y+12	; 0x0c
    2246:	8e 17       	cp	r24, r30
    2248:	9f 07       	cpc	r25, r31
    224a:	59 f0       	breq	.+22     	; 0x2262 <__stack+0x63>
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	8e 17       	cp	r24, r30
    2252:	9f 07       	cpc	r25, r31
    2254:	49 f0       	breq	.+18     	; 0x2268 <__stack+0x69>
    2256:	ae 17       	cp	r26, r30
    2258:	bf 07       	cpc	r27, r31
    225a:	61 f4       	brne	.+24     	; 0x2274 <__stack+0x75>
    225c:	e3 e0       	ldi	r30, 0x03	; 3
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	0b c0       	rjmp	.+22     	; 0x2278 <__stack+0x79>
		x10[3]=x10[3]-1;
		x10[0]--;
		c++;
		
	}
	for(i=0;i<4;i++)
    2262:	e1 e0       	ldi	r30, 0x01	; 1
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	08 c0       	rjmp	.+16     	; 0x2278 <__stack+0x79>
    2268:	e2 e0       	ldi	r30, 0x02	; 2
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <__stack+0x79>
	{
		if(g10[i]==c)
    226e:	e0 e0       	ldi	r30, 0x00	; 0
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <__stack+0x79>
		x10[3]=x10[3]-1;
		x10[0]--;
		c++;
		
	}
	for(i=0;i<4;i++)
    2274:	e4 e0       	ldi	r30, 0x04	; 4
    2276:	f0 e0       	ldi	r31, 0x00	; 0
		{
			break;
		}
	}
	
	c=	path_finder(p10[i],loc2,r30);
    2278:	60 91 16 02 	lds	r22, 0x0216
    227c:	70 91 17 02 	lds	r23, 0x0217
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	ec 0f       	add	r30, r28
    2286:	fd 1f       	adc	r31, r29
    2288:	81 81       	ldd	r24, Z+1	; 0x01
    228a:	92 81       	ldd	r25, Z+2	; 0x02
    228c:	43 e1       	ldi	r20, 0x13	; 19
    228e:	53 e0       	ldi	r21, 0x03	; 3
    2290:	0e 94 44 01 	call	0x288	; 0x288 <path_finder>
	return c;
}
    2294:	60 96       	adiw	r28, 0x10	; 16
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
    22b6:	8f 90       	pop	r8
    22b8:	08 95       	ret

000022ba <node_receiving>:
	int u1,u2,u3;
	
	
	
	
		u1=w0/6;//to filter from box to coordiantes
    22ba:	66 e0       	ldi	r22, 0x06	; 6
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	0e 94 a5 14 	call	0x294a	; 0x294a <__divmodhi4>
    22c2:	9c 01       	movw	r18, r24
		u2=w0%6;
		u3=u1*7+u2;//filter from coordinates to node no
    22c4:	cb 01       	movw	r24, r22
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	86 1b       	sub	r24, r22
    22d4:	97 0b       	sbc	r25, r23
		
		
		
		
		return (cost_cal(u3));
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	0e 94 9f 10 	call	0x213e	; 0x213e <cost_cal>
	


}
    22de:	08 95       	ret

000022e0 <computational_stuff>:
		}
		
	}
}
void computational_stuff(void )
{int quad[10],small,temp,quad2[10];
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	a8 97       	sbiw	r28, 0x28	; 40
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	fe 01       	movw	r30, r28
    22fe:	31 96       	adiw	r30, 0x01	; 1
    2300:	de 01       	movw	r26, r28
    2302:	55 96       	adiw	r26, 0x15	; 21
			
		}
		
	}
}
void computational_stuff(void )
    2304:	ce 01       	movw	r24, r28
    2306:	0d 96       	adiw	r24, 0x0d	; 13
{int quad[10],small,temp,quad2[10];

	for(temp=0;temp<6;temp++)
	{
		
		quad[temp]=99;
    2308:	23 e6       	ldi	r18, 0x63	; 99
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	21 93       	st	Z+, r18
    230e:	31 93       	st	Z+, r19
		quad2[temp]=99;
    2310:	2d 93       	st	X+, r18
    2312:	3d 93       	st	X+, r19
	}
}
void computational_stuff(void )
{int quad[10],small,temp,quad2[10];

	for(temp=0;temp<6;temp++)
    2314:	e8 17       	cp	r30, r24
    2316:	f9 07       	cpc	r31, r25
    2318:	c9 f7       	brne	.-14     	; 0x230c <computational_stuff+0x2c>
	{
		
		quad[temp]=99;
		quad2[temp]=99;
	}
	if(flag==4)
    231a:	80 91 14 02 	lds	r24, 0x0214
    231e:	90 91 15 02 	lds	r25, 0x0215
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	91 05       	cpc	r25, r1
    2326:	e9 f5       	brne	.+122    	; 0x23a2 <computational_stuff+0xc2>
	{
		
		for(i=0;i<6;i++)
    2328:	10 92 0d 02 	sts	0x020D, r1
    232c:	10 92 0c 02 	sts	0x020C, r1
    2330:	80 91 0c 02 	lds	r24, 0x020C
    2334:	90 91 0d 02 	lds	r25, 0x020D
    2338:	86 30       	cpi	r24, 0x06	; 6
    233a:	91 05       	cpc	r25, r1
    233c:	4c f5       	brge	.+82     	; 0x2390 <computational_stuff+0xb0>
		spark_r[i]=spark_b[i];
    233e:	4d e1       	ldi	r20, 0x1D	; 29
    2340:	53 e0       	ldi	r21, 0x03	; 3
    2342:	61 e3       	ldi	r22, 0x31	; 49
    2344:	73 e0       	ldi	r23, 0x03	; 3
    2346:	80 91 0c 02 	lds	r24, 0x020C
    234a:	90 91 0d 02 	lds	r25, 0x020D
    234e:	e0 91 0c 02 	lds	r30, 0x020C
    2352:	f0 91 0d 02 	lds	r31, 0x020D
    2356:	ee 0f       	add	r30, r30
    2358:	ff 1f       	adc	r31, r31
    235a:	e4 0f       	add	r30, r20
    235c:	f5 1f       	adc	r31, r21
    235e:	20 81       	ld	r18, Z
    2360:	31 81       	ldd	r19, Z+1	; 0x01
    2362:	fc 01       	movw	r30, r24
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	e6 0f       	add	r30, r22
    236a:	f7 1f       	adc	r31, r23
    236c:	31 83       	std	Z+1, r19	; 0x01
    236e:	20 83       	st	Z, r18
		quad2[temp]=99;
	}
	if(flag==4)
	{
		
		for(i=0;i<6;i++)
    2370:	80 91 0c 02 	lds	r24, 0x020C
    2374:	90 91 0d 02 	lds	r25, 0x020D
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	90 93 0d 02 	sts	0x020D, r25
    237e:	80 93 0c 02 	sts	0x020C, r24
    2382:	80 91 0c 02 	lds	r24, 0x020C
    2386:	90 91 0d 02 	lds	r25, 0x020D
    238a:	86 30       	cpi	r24, 0x06	; 6
    238c:	91 05       	cpc	r25, r1
    238e:	dc f2       	brlt	.-74     	; 0x2346 <computational_stuff+0x66>
		spark_r[i]=spark_b[i];
		
		loc2=loc3;
    2390:	80 91 49 03 	lds	r24, 0x0349
    2394:	90 91 4a 03 	lds	r25, 0x034A
    2398:	90 93 17 02 	sts	0x0217, r25
    239c:	80 93 16 02 	sts	0x0216, r24
    23a0:	08 c0       	rjmp	.+16     	; 0x23b2 <computational_stuff+0xd2>
	}
	else
	{
		loc2=loc1;
    23a2:	80 91 ab 02 	lds	r24, 0x02AB
    23a6:	90 91 ac 02 	lds	r25, 0x02AC
    23aa:	90 93 17 02 	sts	0x0217, r25
    23ae:	80 93 16 02 	sts	0x0216, r24
	}
	for(i=0;spark_r[i]!=99;i++)
    23b2:	10 92 0d 02 	sts	0x020D, r1
    23b6:	10 92 0c 02 	sts	0x020C, r1
    23ba:	e0 91 0c 02 	lds	r30, 0x020C
    23be:	f0 91 0d 02 	lds	r31, 0x020D
    23c2:	ee 0f       	add	r30, r30
    23c4:	ff 1f       	adc	r31, r31
    23c6:	ef 5c       	subi	r30, 0xCF	; 207
    23c8:	fc 4f       	sbci	r31, 0xFC	; 252
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	83 36       	cpi	r24, 0x63	; 99
    23d0:	91 05       	cpc	r25, r1
    23d2:	b9 f1       	breq	.+110    	; 0x2442 <computational_stuff+0x162>
	{
		
		quad[i]= node_receiving(spark_r[i]);
    23d4:	0f 2e       	mov	r0, r31
    23d6:	f1 e3       	ldi	r31, 0x31	; 49
    23d8:	ef 2e       	mov	r14, r31
    23da:	f3 e0       	ldi	r31, 0x03	; 3
    23dc:	ff 2e       	mov	r15, r31
    23de:	f0 2d       	mov	r31, r0
    23e0:	00 91 0c 02 	lds	r16, 0x020C
    23e4:	10 91 0d 02 	lds	r17, 0x020D
    23e8:	e0 91 0c 02 	lds	r30, 0x020C
    23ec:	f0 91 0d 02 	lds	r31, 0x020D
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	ee 0d       	add	r30, r14
    23f6:	ff 1d       	adc	r31, r15
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <node_receiving>
    2400:	f8 01       	movw	r30, r16
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	2c 0f       	add	r18, r28
    240c:	3d 1f       	adc	r19, r29
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
	}
	else
	{
		loc2=loc1;
	}
	for(i=0;spark_r[i]!=99;i++)
    2416:	80 91 0c 02 	lds	r24, 0x020C
    241a:	90 91 0d 02 	lds	r25, 0x020D
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	90 93 0d 02 	sts	0x020D, r25
    2424:	80 93 0c 02 	sts	0x020C, r24
    2428:	e0 91 0c 02 	lds	r30, 0x020C
    242c:	f0 91 0d 02 	lds	r31, 0x020D
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31
    2434:	ee 0d       	add	r30, r14
    2436:	ff 1d       	adc	r31, r15
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	83 36       	cpi	r24, 0x63	; 99
    243e:	91 05       	cpc	r25, r1
    2440:	79 f6       	brne	.-98     	; 0x23e0 <computational_stuff+0x100>
		quad[i]= node_receiving(spark_r[i]);
		
		
	}
	
	for(i=0;(i<6 && (quad[i]!=99));i++)
    2442:	10 92 0d 02 	sts	0x020D, r1
    2446:	10 92 0c 02 	sts	0x020C, r1
    244a:	80 91 0c 02 	lds	r24, 0x020C
    244e:	90 91 0d 02 	lds	r25, 0x020D
    2452:	86 30       	cpi	r24, 0x06	; 6
    2454:	91 05       	cpc	r25, r1
    2456:	0c f0       	brlt	.+2      	; 0x245a <computational_stuff+0x17a>
    2458:	52 c0       	rjmp	.+164    	; 0x24fe <computational_stuff+0x21e>
    245a:	e0 91 0c 02 	lds	r30, 0x020C
    245e:	f0 91 0d 02 	lds	r31, 0x020D
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	ec 0f       	add	r30, r28
    2468:	fd 1f       	adc	r31, r29
    246a:	81 81       	ldd	r24, Z+1	; 0x01
    246c:	92 81       	ldd	r25, Z+2	; 0x02
    246e:	83 36       	cpi	r24, 0x63	; 99
    2470:	91 05       	cpc	r25, r1
    2472:	09 f4       	brne	.+2      	; 0x2476 <computational_stuff+0x196>
    2474:	44 c0       	rjmp	.+136    	; 0x24fe <computational_stuff+0x21e>
	{
		quad2[i]=99;
    2476:	23 e6       	ldi	r18, 0x63	; 99
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	e0 91 0c 02 	lds	r30, 0x020C
    247e:	f0 91 0d 02 	lds	r31, 0x020D
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	4c 0f       	add	r20, r28
    248c:	5d 1f       	adc	r21, r29
    248e:	e4 0f       	add	r30, r20
    2490:	f5 1f       	adc	r31, r21
    2492:	35 8b       	std	Z+21, r19	; 0x15
    2494:	24 8b       	std	Z+20, r18	; 0x14
		quad2[i]=quad[i];
    2496:	e0 91 0c 02 	lds	r30, 0x020C
    249a:	f0 91 0d 02 	lds	r31, 0x020D
    249e:	80 91 0c 02 	lds	r24, 0x020C
    24a2:	90 91 0d 02 	lds	r25, 0x020D
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	e4 0f       	add	r30, r20
    24ac:	f5 1f       	adc	r31, r21
    24ae:	dc 01       	movw	r26, r24
    24b0:	aa 0f       	add	r26, r26
    24b2:	bb 1f       	adc	r27, r27
    24b4:	a4 0f       	add	r26, r20
    24b6:	b5 1f       	adc	r27, r21
    24b8:	8d 91       	ld	r24, X+
    24ba:	9c 91       	ld	r25, X
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	95 8b       	std	Z+21, r25	; 0x15
    24c0:	84 8b       	std	Z+20, r24	; 0x14
		quad[i]= node_receiving(spark_r[i]);
		
		
	}
	
	for(i=0;(i<6 && (quad[i]!=99));i++)
    24c2:	80 91 0c 02 	lds	r24, 0x020C
    24c6:	90 91 0d 02 	lds	r25, 0x020D
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	90 93 0d 02 	sts	0x020D, r25
    24d0:	80 93 0c 02 	sts	0x020C, r24
    24d4:	80 91 0c 02 	lds	r24, 0x020C
    24d8:	90 91 0d 02 	lds	r25, 0x020D
    24dc:	86 30       	cpi	r24, 0x06	; 6
    24de:	91 05       	cpc	r25, r1
    24e0:	74 f4       	brge	.+28     	; 0x24fe <computational_stuff+0x21e>
    24e2:	e0 91 0c 02 	lds	r30, 0x020C
    24e6:	f0 91 0d 02 	lds	r31, 0x020D
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	e4 0f       	add	r30, r20
    24f0:	f5 1f       	adc	r31, r21
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	83 36       	cpi	r24, 0x63	; 99
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f0       	breq	.+2      	; 0x24fe <computational_stuff+0x21e>
    24fc:	be cf       	rjmp	.-132    	; 0x247a <computational_stuff+0x19a>
	{
		quad2[i]=99;
		quad2[i]=quad[i];
	}
	for(i=0;(i<6 && (quad2[i]!=99));i++)
    24fe:	10 92 0d 02 	sts	0x020D, r1
    2502:	10 92 0c 02 	sts	0x020C, r1
    2506:	80 91 0c 02 	lds	r24, 0x020C
    250a:	90 91 0d 02 	lds	r25, 0x020D
    250e:	86 30       	cpi	r24, 0x06	; 6
    2510:	91 05       	cpc	r25, r1
    2512:	0c f0       	brlt	.+2      	; 0x2516 <computational_stuff+0x236>
    2514:	c7 c0       	rjmp	.+398    	; 0x26a4 <computational_stuff+0x3c4>
    2516:	e0 91 0c 02 	lds	r30, 0x020C
    251a:	f0 91 0d 02 	lds	r31, 0x020D
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	ec 0f       	add	r30, r28
    2524:	fd 1f       	adc	r31, r29
    2526:	85 89       	ldd	r24, Z+21	; 0x15
    2528:	96 89       	ldd	r25, Z+22	; 0x16
    252a:	83 36       	cpi	r24, 0x63	; 99
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <computational_stuff+0x252>
    2530:	b9 c0       	rjmp	.+370    	; 0x26a4 <computational_stuff+0x3c4>
	{
		for(j=i+1;(j<6 && (quad2[j]!=99));j++)
    2532:	80 91 0c 02 	lds	r24, 0x020C
    2536:	90 91 0d 02 	lds	r25, 0x020D
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	90 93 0b 02 	sts	0x020B, r25
    2540:	80 93 0a 02 	sts	0x020A, r24
    2544:	80 91 0a 02 	lds	r24, 0x020A
    2548:	90 91 0b 02 	lds	r25, 0x020B
    254c:	86 30       	cpi	r24, 0x06	; 6
    254e:	91 05       	cpc	r25, r1
    2550:	0c f0       	brlt	.+2      	; 0x2554 <computational_stuff+0x274>
    2552:	86 c0       	rjmp	.+268    	; 0x2660 <computational_stuff+0x380>
    2554:	e0 91 0a 02 	lds	r30, 0x020A
    2558:	f0 91 0b 02 	lds	r31, 0x020B
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	8c 0f       	add	r24, r28
    2566:	9d 1f       	adc	r25, r29
    2568:	e8 0f       	add	r30, r24
    256a:	f9 1f       	adc	r31, r25
    256c:	84 89       	ldd	r24, Z+20	; 0x14
    256e:	95 89       	ldd	r25, Z+21	; 0x15
    2570:	83 36       	cpi	r24, 0x63	; 99
    2572:	91 05       	cpc	r25, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <computational_stuff+0x298>
    2576:	74 c0       	rjmp	.+232    	; 0x2660 <computational_stuff+0x380>
		{
			
			if(quad2[i]>quad2[j])
    2578:	a0 91 0c 02 	lds	r26, 0x020C
    257c:	b0 91 0d 02 	lds	r27, 0x020D
    2580:	e0 91 0a 02 	lds	r30, 0x020A
    2584:	f0 91 0b 02 	lds	r31, 0x020B
    2588:	aa 0f       	add	r26, r26
    258a:	bb 1f       	adc	r27, r27
    258c:	21 e0       	ldi	r18, 0x01	; 1
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	2c 0f       	add	r18, r28
    2592:	3d 1f       	adc	r19, r29
    2594:	a2 0f       	add	r26, r18
    2596:	b3 1f       	adc	r27, r19
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	54 96       	adiw	r26, 0x14	; 20
    25a2:	2d 91       	ld	r18, X+
    25a4:	3c 91       	ld	r19, X
    25a6:	55 97       	sbiw	r26, 0x15	; 21
    25a8:	84 89       	ldd	r24, Z+20	; 0x14
    25aa:	95 89       	ldd	r25, Z+21	; 0x15
    25ac:	82 17       	cp	r24, r18
    25ae:	93 07       	cpc	r25, r19
    25b0:	ac f5       	brge	.+106    	; 0x261c <computational_stuff+0x33c>
			{
				temp=quad2[i];
    25b2:	e0 91 0c 02 	lds	r30, 0x020C
    25b6:	f0 91 0d 02 	lds	r31, 0x020D
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	4c 0f       	add	r20, r28
    25c4:	5d 1f       	adc	r21, r29
    25c6:	e4 0f       	add	r30, r20
    25c8:	f5 1f       	adc	r31, r21
    25ca:	44 89       	ldd	r20, Z+20	; 0x14
    25cc:	55 89       	ldd	r21, Z+21	; 0x15
				quad2[i]=quad2[j];
    25ce:	20 91 0c 02 	lds	r18, 0x020C
    25d2:	30 91 0d 02 	lds	r19, 0x020D
    25d6:	e0 91 0a 02 	lds	r30, 0x020A
    25da:	f0 91 0b 02 	lds	r31, 0x020B
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	8c 0f       	add	r24, r28
    25e8:	9d 1f       	adc	r25, r29
    25ea:	e8 0f       	add	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	84 89       	ldd	r24, Z+20	; 0x14
    25f0:	95 89       	ldd	r25, Z+21	; 0x15
    25f2:	f9 01       	movw	r30, r18
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	21 e0       	ldi	r18, 0x01	; 1
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	2c 0f       	add	r18, r28
    25fe:	3d 1f       	adc	r19, r29
    2600:	e2 0f       	add	r30, r18
    2602:	f3 1f       	adc	r31, r19
    2604:	95 8b       	std	Z+21, r25	; 0x15
    2606:	84 8b       	std	Z+20, r24	; 0x14
				quad2[j]=temp;
    2608:	e0 91 0a 02 	lds	r30, 0x020A
    260c:	f0 91 0b 02 	lds	r31, 0x020B
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	e2 0f       	add	r30, r18
    2616:	f3 1f       	adc	r31, r19
    2618:	55 8b       	std	Z+21, r21	; 0x15
    261a:	44 8b       	std	Z+20, r20	; 0x14
		quad2[i]=99;
		quad2[i]=quad[i];
	}
	for(i=0;(i<6 && (quad2[i]!=99));i++)
	{
		for(j=i+1;(j<6 && (quad2[j]!=99));j++)
    261c:	80 91 0a 02 	lds	r24, 0x020A
    2620:	90 91 0b 02 	lds	r25, 0x020B
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	90 93 0b 02 	sts	0x020B, r25
    262a:	80 93 0a 02 	sts	0x020A, r24
    262e:	80 91 0a 02 	lds	r24, 0x020A
    2632:	90 91 0b 02 	lds	r25, 0x020B
    2636:	86 30       	cpi	r24, 0x06	; 6
    2638:	91 05       	cpc	r25, r1
    263a:	94 f4       	brge	.+36     	; 0x2660 <computational_stuff+0x380>
    263c:	e0 91 0a 02 	lds	r30, 0x020A
    2640:	f0 91 0b 02 	lds	r31, 0x020B
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	4c 0f       	add	r20, r28
    264e:	5d 1f       	adc	r21, r29
    2650:	e4 0f       	add	r30, r20
    2652:	f5 1f       	adc	r31, r21
    2654:	84 89       	ldd	r24, Z+20	; 0x14
    2656:	95 89       	ldd	r25, Z+21	; 0x15
    2658:	83 36       	cpi	r24, 0x63	; 99
    265a:	91 05       	cpc	r25, r1
    265c:	09 f0       	breq	.+2      	; 0x2660 <computational_stuff+0x380>
    265e:	8c cf       	rjmp	.-232    	; 0x2578 <computational_stuff+0x298>
	for(i=0;(i<6 && (quad[i]!=99));i++)
	{
		quad2[i]=99;
		quad2[i]=quad[i];
	}
	for(i=0;(i<6 && (quad2[i]!=99));i++)
    2660:	80 91 0c 02 	lds	r24, 0x020C
    2664:	90 91 0d 02 	lds	r25, 0x020D
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	90 93 0d 02 	sts	0x020D, r25
    266e:	80 93 0c 02 	sts	0x020C, r24
    2672:	80 91 0c 02 	lds	r24, 0x020C
    2676:	90 91 0d 02 	lds	r25, 0x020D
    267a:	86 30       	cpi	r24, 0x06	; 6
    267c:	91 05       	cpc	r25, r1
    267e:	94 f4       	brge	.+36     	; 0x26a4 <computational_stuff+0x3c4>
    2680:	e0 91 0c 02 	lds	r30, 0x020C
    2684:	f0 91 0d 02 	lds	r31, 0x020D
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	8c 0f       	add	r24, r28
    2692:	9d 1f       	adc	r25, r29
    2694:	e8 0f       	add	r30, r24
    2696:	f9 1f       	adc	r31, r25
    2698:	84 89       	ldd	r24, Z+20	; 0x14
    269a:	95 89       	ldd	r25, Z+21	; 0x15
    269c:	83 36       	cpi	r24, 0x63	; 99
    269e:	91 05       	cpc	r25, r1
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <computational_stuff+0x3c4>
    26a2:	47 cf       	rjmp	.-370    	; 0x2532 <computational_stuff+0x252>
				quad2[i]=quad2[j];
				quad2[j]=temp;
			}
		}
	}
	for(i=0;i<6 && (quad2[i]!=99);i++)
    26a4:	10 92 0d 02 	sts	0x020D, r1
    26a8:	10 92 0c 02 	sts	0x020C, r1
    26ac:	80 91 0c 02 	lds	r24, 0x020C
    26b0:	90 91 0d 02 	lds	r25, 0x020D
    26b4:	86 30       	cpi	r24, 0x06	; 6
    26b6:	91 05       	cpc	r25, r1
    26b8:	0c f0       	brlt	.+2      	; 0x26bc <computational_stuff+0x3dc>
    26ba:	d9 c0       	rjmp	.+434    	; 0x286e <computational_stuff+0x58e>
    26bc:	e0 91 0c 02 	lds	r30, 0x020C
    26c0:	f0 91 0d 02 	lds	r31, 0x020D
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ec 0f       	add	r30, r28
    26ca:	fd 1f       	adc	r31, r29
    26cc:	85 89       	ldd	r24, Z+21	; 0x15
    26ce:	96 89       	ldd	r25, Z+22	; 0x16
    26d0:	83 36       	cpi	r24, 0x63	; 99
    26d2:	91 05       	cpc	r25, r1
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <computational_stuff+0x3f8>
    26d6:	cb c0       	rjmp	.+406    	; 0x286e <computational_stuff+0x58e>
	{
		for(j=i+1;(j<6 && (quad[j]!=99));j++)
		{
			if(quad2[i]==quad[j])
			{small=spark_r[i];
    26d8:	41 e3       	ldi	r20, 0x31	; 49
    26da:	53 e0       	ldi	r21, 0x03	; 3
			}
		}
	}
	for(i=0;i<6 && (quad2[i]!=99);i++)
	{
		for(j=i+1;(j<6 && (quad[j]!=99));j++)
    26dc:	80 91 0c 02 	lds	r24, 0x020C
    26e0:	90 91 0d 02 	lds	r25, 0x020D
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	90 93 0b 02 	sts	0x020B, r25
    26ea:	80 93 0a 02 	sts	0x020A, r24
    26ee:	80 91 0a 02 	lds	r24, 0x020A
    26f2:	90 91 0b 02 	lds	r25, 0x020B
    26f6:	86 30       	cpi	r24, 0x06	; 6
    26f8:	91 05       	cpc	r25, r1
    26fa:	0c f0       	brlt	.+2      	; 0x26fe <computational_stuff+0x41e>
    26fc:	96 c0       	rjmp	.+300    	; 0x282a <computational_stuff+0x54a>
    26fe:	e0 91 0a 02 	lds	r30, 0x020A
    2702:	f0 91 0b 02 	lds	r31, 0x020B
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	2c 0f       	add	r18, r28
    2710:	3d 1f       	adc	r19, r29
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	83 36       	cpi	r24, 0x63	; 99
    271c:	91 05       	cpc	r25, r1
    271e:	09 f4       	brne	.+2      	; 0x2722 <computational_stuff+0x442>
    2720:	84 c0       	rjmp	.+264    	; 0x282a <computational_stuff+0x54a>
		{
			if(quad2[i]==quad[j])
    2722:	e0 91 0c 02 	lds	r30, 0x020C
    2726:	f0 91 0d 02 	lds	r31, 0x020D
    272a:	80 91 0a 02 	lds	r24, 0x020A
    272e:	90 91 0b 02 	lds	r25, 0x020B
    2732:	ee 0f       	add	r30, r30
    2734:	ff 1f       	adc	r31, r31
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	dc 01       	movw	r26, r24
    273c:	aa 0f       	add	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	a2 0f       	add	r26, r18
    2742:	b3 1f       	adc	r27, r19
    2744:	84 89       	ldd	r24, Z+20	; 0x14
    2746:	95 89       	ldd	r25, Z+21	; 0x15
    2748:	2d 91       	ld	r18, X+
    274a:	3c 91       	ld	r19, X
    274c:	11 97       	sbiw	r26, 0x01	; 1
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	09 f0       	breq	.+2      	; 0x2756 <computational_stuff+0x476>
    2754:	48 c0       	rjmp	.+144    	; 0x27e6 <computational_stuff+0x506>
    2756:	1d c0       	rjmp	.+58     	; 0x2792 <computational_stuff+0x4b2>
    2758:	e0 91 0c 02 	lds	r30, 0x020C
    275c:	f0 91 0d 02 	lds	r31, 0x020D
    2760:	80 91 0a 02 	lds	r24, 0x020A
    2764:	90 91 0b 02 	lds	r25, 0x020B
    2768:	ee 0f       	add	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	2c 0f       	add	r18, r28
    2772:	3d 1f       	adc	r19, r29
    2774:	e2 0f       	add	r30, r18
    2776:	f3 1f       	adc	r31, r19
    2778:	dc 01       	movw	r26, r24
    277a:	aa 0f       	add	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	a2 0f       	add	r26, r18
    2780:	b3 1f       	adc	r27, r19
    2782:	84 89       	ldd	r24, Z+20	; 0x14
    2784:	95 89       	ldd	r25, Z+21	; 0x15
    2786:	2d 91       	ld	r18, X+
    2788:	3c 91       	ld	r19, X
    278a:	11 97       	sbiw	r26, 0x01	; 1
    278c:	82 17       	cp	r24, r18
    278e:	93 07       	cpc	r25, r19
    2790:	51 f5       	brne	.+84     	; 0x27e6 <computational_stuff+0x506>
			{small=spark_r[i];
    2792:	e0 91 0c 02 	lds	r30, 0x020C
    2796:	f0 91 0d 02 	lds	r31, 0x020D
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	e4 0f       	add	r30, r20
    27a0:	f5 1f       	adc	r31, r21
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
				spark_r[i]=spark_r[j];
    27a6:	20 91 0c 02 	lds	r18, 0x020C
    27aa:	30 91 0d 02 	lds	r19, 0x020D
    27ae:	e0 91 0a 02 	lds	r30, 0x020A
    27b2:	f0 91 0b 02 	lds	r31, 0x020B
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	e4 0f       	add	r30, r20
    27bc:	f5 1f       	adc	r31, r21
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	f9 01       	movw	r30, r18
    27c4:	ee 0f       	add	r30, r30
    27c6:	ff 1f       	adc	r31, r31
    27c8:	e4 0f       	add	r30, r20
    27ca:	f5 1f       	adc	r31, r21
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
				spark_r[j]=small;
    27d0:	e0 91 0a 02 	lds	r30, 0x020A
    27d4:	f0 91 0b 02 	lds	r31, 0x020B
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	e4 0f       	add	r30, r20
    27de:	f5 1f       	adc	r31, r21
    27e0:	71 83       	std	Z+1, r23	; 0x01
    27e2:	60 83       	st	Z, r22
				break;
    27e4:	22 c0       	rjmp	.+68     	; 0x282a <computational_stuff+0x54a>
			}
		}
	}
	for(i=0;i<6 && (quad2[i]!=99);i++)
	{
		for(j=i+1;(j<6 && (quad[j]!=99));j++)
    27e6:	80 91 0a 02 	lds	r24, 0x020A
    27ea:	90 91 0b 02 	lds	r25, 0x020B
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	90 93 0b 02 	sts	0x020B, r25
    27f4:	80 93 0a 02 	sts	0x020A, r24
    27f8:	80 91 0a 02 	lds	r24, 0x020A
    27fc:	90 91 0b 02 	lds	r25, 0x020B
    2800:	86 30       	cpi	r24, 0x06	; 6
    2802:	91 05       	cpc	r25, r1
    2804:	94 f4       	brge	.+36     	; 0x282a <computational_stuff+0x54a>
    2806:	e0 91 0a 02 	lds	r30, 0x020A
    280a:	f0 91 0b 02 	lds	r31, 0x020B
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	8c 0f       	add	r24, r28
    2818:	9d 1f       	adc	r25, r29
    281a:	e8 0f       	add	r30, r24
    281c:	f9 1f       	adc	r31, r25
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	83 36       	cpi	r24, 0x63	; 99
    2824:	91 05       	cpc	r25, r1
    2826:	09 f0       	breq	.+2      	; 0x282a <computational_stuff+0x54a>
    2828:	97 cf       	rjmp	.-210    	; 0x2758 <computational_stuff+0x478>
				quad2[i]=quad2[j];
				quad2[j]=temp;
			}
		}
	}
	for(i=0;i<6 && (quad2[i]!=99);i++)
    282a:	80 91 0c 02 	lds	r24, 0x020C
    282e:	90 91 0d 02 	lds	r25, 0x020D
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	90 93 0d 02 	sts	0x020D, r25
    2838:	80 93 0c 02 	sts	0x020C, r24
    283c:	80 91 0c 02 	lds	r24, 0x020C
    2840:	90 91 0d 02 	lds	r25, 0x020D
    2844:	86 30       	cpi	r24, 0x06	; 6
    2846:	91 05       	cpc	r25, r1
    2848:	94 f4       	brge	.+36     	; 0x286e <computational_stuff+0x58e>
    284a:	e0 91 0c 02 	lds	r30, 0x020C
    284e:	f0 91 0d 02 	lds	r31, 0x020D
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	21 e0       	ldi	r18, 0x01	; 1
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	2c 0f       	add	r18, r28
    285c:	3d 1f       	adc	r19, r29
    285e:	e2 0f       	add	r30, r18
    2860:	f3 1f       	adc	r31, r19
    2862:	84 89       	ldd	r24, Z+20	; 0x14
    2864:	95 89       	ldd	r25, Z+21	; 0x15
    2866:	83 36       	cpi	r24, 0x63	; 99
    2868:	91 05       	cpc	r25, r1
    286a:	09 f0       	breq	.+2      	; 0x286e <computational_stuff+0x58e>
    286c:	37 cf       	rjmp	.-402    	; 0x26dc <computational_stuff+0x3fc>
				break;
			}
		}
	}

	if(flag==4)
    286e:	80 91 14 02 	lds	r24, 0x0214
    2872:	90 91 15 02 	lds	r25, 0x0215
    2876:	84 30       	cpi	r24, 0x04	; 4
    2878:	91 05       	cpc	r25, r1
    287a:	09 f0       	breq	.+2      	; 0x287e <computational_stuff+0x59e>
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <computational_stuff+0x61c>
	{
		flag=0;
    287e:	10 92 15 02 	sts	0x0215, r1
    2882:	10 92 14 02 	sts	0x0214, r1
		flag2=2;
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	90 93 13 02 	sts	0x0213, r25
    288e:	80 93 12 02 	sts	0x0212, r24
		for(i=0;i<6;i++)
    2892:	10 92 0d 02 	sts	0x020D, r1
    2896:	10 92 0c 02 	sts	0x020C, r1
    289a:	80 91 0c 02 	lds	r24, 0x020C
    289e:	90 91 0d 02 	lds	r25, 0x020D
    28a2:	86 30       	cpi	r24, 0x06	; 6
    28a4:	91 05       	cpc	r25, r1
    28a6:	84 f5       	brge	.+96     	; 0x2908 <computational_stuff+0x628>
		{
			spark_b[i]=spark_r[i];
    28a8:	41 e3       	ldi	r20, 0x31	; 49
    28aa:	53 e0       	ldi	r21, 0x03	; 3
    28ac:	6d e1       	ldi	r22, 0x1D	; 29
    28ae:	73 e0       	ldi	r23, 0x03	; 3
    28b0:	80 91 0c 02 	lds	r24, 0x020C
    28b4:	90 91 0d 02 	lds	r25, 0x020D
    28b8:	e0 91 0c 02 	lds	r30, 0x020C
    28bc:	f0 91 0d 02 	lds	r31, 0x020D
    28c0:	ee 0f       	add	r30, r30
    28c2:	ff 1f       	adc	r31, r31
    28c4:	e4 0f       	add	r30, r20
    28c6:	f5 1f       	adc	r31, r21
    28c8:	20 81       	ld	r18, Z
    28ca:	31 81       	ldd	r19, Z+1	; 0x01
    28cc:	fc 01       	movw	r30, r24
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	e6 0f       	add	r30, r22
    28d4:	f7 1f       	adc	r31, r23
    28d6:	31 83       	std	Z+1, r19	; 0x01
    28d8:	20 83       	st	Z, r18

	if(flag==4)
	{
		flag=0;
		flag2=2;
		for(i=0;i<6;i++)
    28da:	80 91 0c 02 	lds	r24, 0x020C
    28de:	90 91 0d 02 	lds	r25, 0x020D
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	90 93 0d 02 	sts	0x020D, r25
    28e8:	80 93 0c 02 	sts	0x020C, r24
    28ec:	80 91 0c 02 	lds	r24, 0x020C
    28f0:	90 91 0d 02 	lds	r25, 0x020D
    28f4:	86 30       	cpi	r24, 0x06	; 6
    28f6:	91 05       	cpc	r25, r1
    28f8:	dc f2       	brlt	.-74     	; 0x28b0 <computational_stuff+0x5d0>
    28fa:	06 c0       	rjmp	.+12     	; 0x2908 <computational_stuff+0x628>
			spark_b[i]=spark_r[i];
		}			
	}
	else
	{
	flag=2;
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	90 93 15 02 	sts	0x0215, r25
    2904:	80 93 14 02 	sts	0x0214, r24
	}	
}
    2908:	a8 96       	adiw	r28, 0x28	; 40
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	08 95       	ret

00002922 <__udivmodhi4>:
    2922:	aa 1b       	sub	r26, r26
    2924:	bb 1b       	sub	r27, r27
    2926:	51 e1       	ldi	r21, 0x11	; 17
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <__udivmodhi4_ep>

0000292a <__udivmodhi4_loop>:
    292a:	aa 1f       	adc	r26, r26
    292c:	bb 1f       	adc	r27, r27
    292e:	a6 17       	cp	r26, r22
    2930:	b7 07       	cpc	r27, r23
    2932:	10 f0       	brcs	.+4      	; 0x2938 <__udivmodhi4_ep>
    2934:	a6 1b       	sub	r26, r22
    2936:	b7 0b       	sbc	r27, r23

00002938 <__udivmodhi4_ep>:
    2938:	88 1f       	adc	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	5a 95       	dec	r21
    293e:	a9 f7       	brne	.-22     	; 0x292a <__udivmodhi4_loop>
    2940:	80 95       	com	r24
    2942:	90 95       	com	r25
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	08 95       	ret

0000294a <__divmodhi4>:
    294a:	97 fb       	bst	r25, 7
    294c:	09 2e       	mov	r0, r25
    294e:	07 26       	eor	r0, r23
    2950:	0a d0       	rcall	.+20     	; 0x2966 <__divmodhi4_neg1>
    2952:	77 fd       	sbrc	r23, 7
    2954:	04 d0       	rcall	.+8      	; 0x295e <__divmodhi4_neg2>
    2956:	e5 df       	rcall	.-54     	; 0x2922 <__udivmodhi4>
    2958:	06 d0       	rcall	.+12     	; 0x2966 <__divmodhi4_neg1>
    295a:	00 20       	and	r0, r0
    295c:	1a f4       	brpl	.+6      	; 0x2964 <__divmodhi4_exit>

0000295e <__divmodhi4_neg2>:
    295e:	70 95       	com	r23
    2960:	61 95       	neg	r22
    2962:	7f 4f       	sbci	r23, 0xFF	; 255

00002964 <__divmodhi4_exit>:
    2964:	08 95       	ret

00002966 <__divmodhi4_neg1>:
    2966:	f6 f7       	brtc	.-4      	; 0x2964 <__divmodhi4_exit>
    2968:	90 95       	com	r25
    296a:	81 95       	neg	r24
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	08 95       	ret

00002970 <_exit>:
    2970:	f8 94       	cli

00002972 <__stop_program>:
    2972:	ff cf       	rjmp	.-2      	; 0x2972 <__stop_program>
