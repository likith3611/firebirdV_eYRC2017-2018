
demo_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000489  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017b  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000354  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000dc  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000156  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000011c  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8a:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buzzer_pin_config>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;  //Setting PORTC 3 as output
  92:	a3 9a       	sbi	0x14, 3	; 20
 PORTC = PORTC & 0xF7;  //Setting PORTC 3 logic low to turnoff buzzer
  94:	ab 98       	cbi	0x15, 3	; 21
}
  96:	08 95       	ret

00000098 <port_init>:
void port_init (void)
{
 buzzer_pin_config();
  98:	0e 94 49 00 	call	0x92	; 0x92 <buzzer_pin_config>
}
  9c:	08 95       	ret

0000009e <buzzer_on>:
void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
  9e:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore | 0x08;
  a0:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
  a2:	85 bb       	out	0x15, r24	; 21
}
  a4:	08 95       	ret

000000a6 <buzzer_off>:
void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
  a6:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore & 0xF7;
  a8:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
  aa:	85 bb       	out	0x15, r24	; 21
}
  ac:	08 95       	ret

000000ae <uart_init>:




void uart_init(void) 
{  UCSRB = 0x00; //disable while setting baud rate
  ae:	1a b8       	out	0x0a, r1	; 10
UCSRA = 0x00;
  b0:	1b b8       	out	0x0b, r1	; 11
UCSRC = 0x86;
  b2:	86 e8       	ldi	r24, 0x86	; 134
  b4:	80 bd       	out	0x20, r24	; 32
UBRRL = 0x2F; //set baud rate lo
  b6:	8f e2       	ldi	r24, 0x2F	; 47
  b8:	89 b9       	out	0x09, r24	; 9
UBRRH = 0x00; //set baud rate hi
  ba:	10 bc       	out	0x20, r1	; 32
UCSRB = 0x98; //0xD8;;
  bc:	88 e9       	ldi	r24, 0x98	; 152
  be:	8a b9       	out	0x0a, r24	; 10
   } 
  c0:	08 95       	ret

000000c2 <init>:
void init()
{cli();
  c2:	f8 94       	cli
 port_init();
  c4:	0e 94 4c 00 	call	0x98	; 0x98 <port_init>
uart_init();
  c8:	0e 94 57 00 	call	0xae	; 0xae <uart_init>
sei();
  cc:	78 94       	sei
}
  ce:	08 95       	ret

000000d0 <__vector_11>:
SIGNAL(SIG_UART_RECV) 
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	4f 93       	push	r20
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
 unsigned char r;
 r=UDR;
  f2:	8c b1       	in	r24, 0x0c	; 12
 if(r==0x38)
  f4:	88 33       	cpi	r24, 0x38	; 56
  f6:	11 f4       	brne	.+4      	; 0xfc <__vector_11+0x2c>
 {
	 buzzer_on();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <buzzer_on>
 } 
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:

UDR=0x38;
} */
int main(void)
{
 init();
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9f e7       	ldi	r25, 0x7F	; 127
 126:	a6 e1       	ldi	r26, 0x16	; 22
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	a0 40       	sbci	r26, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xa>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x14>
 132:	00 00       	nop
    while(1)
    {
  _delay_ms(1000); 
  buzzer_off();
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <buzzer_off>
 138:	f4 cf       	rjmp	.-24     	; 0x122 <main+0x4>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
