
firebirdmovement_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000954  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000007b  00800200  00800200  000009c8  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00001138  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa0  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030a  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ed  00000000  00000000  000024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088b  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e5       	ldi	r30, 0x54	; 84
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 37       	cpi	r26, 0x7B	; 123
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
 122:	0c 94 a8 04 	jmp	0x950	; 0x950 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 05 02 	sts	0x0205, r25
 30e:	80 93 04 02 	sts	0x0204, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 09 02 	sts	0x0209, r23
 32e:	60 93 08 02 	sts	0x0208, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 78 02 	sts	0x0278, r25
 340:	80 93 77 02 	sts	0x0277, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 09 02 	sts	0x0209, r23
 368:	60 93 08 02 	sts	0x0208, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 0e 02 	sts	0x020E, r25
 37a:	80 93 0d 02 	sts	0x020D, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 09 02 	sts	0x0209, r23
 3a0:	60 93 08 02 	sts	0x0208, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 0c 02 	sts	0x020C, r25
 3b0:	80 93 0b 02 	sts	0x020B, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 76 02 	sts	0x0276, r25
 3d4:	80 93 75 02 	sts	0x0275, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <lcd_port_config>:
unsigned int value;
unsigned int row1,row2,row3,noden,a[49];

void lcd_port_config (void)
{
	DDRC=DDRC | 0xF7;
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	87 6f       	ori	r24, 0xF7	; 247
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC=PORTC & 0x80;
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	80 78       	andi	r24, 0x80	; 128
 3fc:	88 b9       	out	0x08, r24	; 8
	
}
 3fe:	08 95       	ret

00000400 <motion_pinconfig>:


void motion_pinconfig (void)
{
	DDRA = DDRA | 0x0F;
 400:	81 b1       	in	r24, 0x01	; 1
 402:	8f 60       	ori	r24, 0x0F	; 15
 404:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
 406:	82 b1       	in	r24, 0x02	; 2
 408:	80 7f       	andi	r24, 0xF0	; 240
 40a:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;
 40c:	ea e0       	ldi	r30, 0x0A	; 10
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	80 81       	ld	r24, Z
 412:	88 61       	ori	r24, 0x18	; 24
 414:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;
 416:	eb e0       	ldi	r30, 0x0B	; 11
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	80 81       	ld	r24, Z
 41c:	88 61       	ori	r24, 0x18	; 24
 41e:	80 83       	st	Z, r24
}
 420:	08 95       	ret

00000422 <adc_pin_config>:

void adc_pin_config(void)
{	
	
	DDRF=0x00;
 422:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
 424:	11 ba       	out	0x11, r1	; 17
	DDRK=0X00;
 426:	10 92 07 01 	sts	0x0107, r1
	PORTK=0X00;
 42a:	10 92 08 01 	sts	0x0108, r1
}
 42e:	08 95       	ret

00000430 <timer_init>:

void timer_init(void)
{
	TCCR5B = 0x00;
 430:	e1 e2       	ldi	r30, 0x21	; 33
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	10 82       	st	Z, r1
	TCNT1H = 0xFF;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	80 93 85 00 	sts	0x0085, r24
	TCNT5L = 0x01;
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
 442:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
 446:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
 44a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
 44e:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;
 452:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
 456:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;
 45a:	89 ea       	ldi	r24, 0xA9	; 169
 45c:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0x0B;
 460:	8b e0       	ldi	r24, 0x0B	; 11
 462:	80 83       	st	Z, r24
}	
 464:	08 95       	ret

00000466 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 466:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 46a:	60 93 2a 01 	sts	0x012A, r22
}
 46e:	08 95       	ret

00000470 <motion_set>:

void motion_set (unsigned char Direction)
{
	int PortARestore = 0x00;
	Direction &= 0x0F;
	PortARestore = PORTA;
 470:	22 b1       	in	r18, 0x02	; 2
 472:	30 e0       	ldi	r19, 0x00	; 0
	PortARestore &= 0xF0;
 474:	20 7f       	andi	r18, 0xF0	; 240
 476:	30 70       	andi	r19, 0x00	; 0
}

void motion_set (unsigned char Direction)
{
	int PortARestore = 0x00;
	Direction &= 0x0F;
 478:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA;
	PortARestore &= 0xF0;
	PortARestore |= Direction;
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	28 2b       	or	r18, r24
 47e:	39 2b       	or	r19, r25
	PORTA =  PortARestore;
 480:	22 b9       	out	0x02, r18	; 2
	
}
 482:	08 95       	ret

00000484 <Forward>:

void Forward (void)
{
	velocity(150,150);
 484:	86 e9       	ldi	r24, 0x96	; 150
 486:	66 e9       	ldi	r22, 0x96	; 150
 488:	0e 94 33 02 	call	0x466	; 0x466 <velocity>
	motion_set (0x06);
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	0e 94 38 02 	call	0x470	; 0x470 <motion_set>
}
 492:	08 95       	ret

00000494 <Backward>:

void Backward (void)
{	velocity(110,110);
 494:	8e e6       	ldi	r24, 0x6E	; 110
 496:	6e e6       	ldi	r22, 0x6E	; 110
 498:	0e 94 33 02 	call	0x466	; 0x466 <velocity>
	motion_set(0x09);
 49c:	89 e0       	ldi	r24, 0x09	; 9
 49e:	0e 94 38 02 	call	0x470	; 0x470 <motion_set>
}
 4a2:	08 95       	ret

000004a4 <Right>:


void Right (void)
{
	velocity(120,100);
 4a4:	88 e7       	ldi	r24, 0x78	; 120
 4a6:	64 e6       	ldi	r22, 0x64	; 100
 4a8:	0e 94 33 02 	call	0x466	; 0x466 <velocity>
	motion_set(0x0A);
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
 4ae:	0e 94 38 02 	call	0x470	; 0x470 <motion_set>
}
 4b2:	08 95       	ret

000004b4 <Left>:


void Left (void)
{	velocity(90,120);
 4b4:	8a e5       	ldi	r24, 0x5A	; 90
 4b6:	68 e7       	ldi	r22, 0x78	; 120
 4b8:	0e 94 33 02 	call	0x466	; 0x466 <velocity>
	motion_set(0x05);
 4bc:	85 e0       	ldi	r24, 0x05	; 5
 4be:	0e 94 38 02 	call	0x470	; 0x470 <motion_set>
}
 4c2:	08 95       	ret

000004c4 <Stop>:

void Stop (void)
{	velocity(0,0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	0e 94 33 02 	call	0x466	; 0x466 <velocity>
	motion_set(0x00);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 38 02 	call	0x470	; 0x470 <motion_set>
}
 4d2:	08 95       	ret

000004d4 <adc_init>:

void adc_init()
{
	ADCSRA=0x00;
 4d4:	ea e7       	ldi	r30, 0x7A	; 122
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	10 82       	st	Z, r1
	ADCSRB=0x00;
 4da:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x20;
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	80 93 7c 00 	sts	0x007C, r24
	ACSR=0x80;
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	80 bf       	out	0x30, r24	; 48
	ADCSRA=0x86;
 4e8:	86 e8       	ldi	r24, 0x86	; 134
 4ea:	80 83       	st	Z, r24
}
 4ec:	08 95       	ret

000004ee <ADC_conversion>:
unsigned char ADC_conversion(unsigned char ch )
{
	unsigned char a;
	if(ch>7)
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	18 f0       	brcs	.+6      	; 0x4f8 <ADC_conversion+0xa>
	{
		ADCSRB=0x08;
 4f2:	98 e0       	ldi	r25, 0x08	; 8
 4f4:	90 93 7b 00 	sts	0x007B, r25
	}
	ch=ch & 0x07;
 4f8:	87 70       	andi	r24, 0x07	; 7
	ADMUX=0x20 |ch;
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =ADCSRA |0x40;
 500:	ea e7       	ldi	r30, 0x7A	; 122
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	80 64       	ori	r24, 0x40	; 64
 508:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);
 50a:	80 81       	ld	r24, Z
 50c:	84 ff       	sbrs	r24, 4
 50e:	fd cf       	rjmp	.-6      	; 0x50a <ADC_conversion+0x1c>
	a=ADCH;
 510:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA|0x10;
 514:	ea e7       	ldi	r30, 0x7A	; 122
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	90 81       	ld	r25, Z
 51a:	90 61       	ori	r25, 0x10	; 16
 51c:	90 83       	st	Z, r25
	ADCSRB=0x00;
 51e:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 522:	08 95       	ret

00000524 <port_init>:

void port_init()
{
	lcd_port_config();
 524:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_port_config>
	adc_pin_config();
 528:	0e 94 11 02 	call	0x422	; 0x422 <adc_pin_config>
	motion_pinconfig();
 52c:	0e 94 00 02 	call	0x400	; 0x400 <motion_pinconfig>
	adc_init();
 530:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <adc_init>
}
 534:	08 95       	ret

00000536 <print_sensor>:

void print_sensor(char row,char coloumn,unsigned char channel)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	d8 2f       	mov	r29, r24
 53c:	c6 2f       	mov	r28, r22
	if(channel==3)
 53e:	43 30       	cpi	r20, 0x03	; 3
 540:	71 f4       	brne	.+28     	; 0x55e <print_sensor+0x28>
	{
		ADC_valueL=ADC_conversion(channel);
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	0e 94 77 02 	call	0x4ee	; 0x4ee <ADC_conversion>
 548:	48 2f       	mov	r20, r24
 54a:	80 93 02 02 	sts	0x0202, r24
		lcd_print(row,coloumn,ADC_valueL, 3);
 54e:	8d 2f       	mov	r24, r29
 550:	6c 2f       	mov	r22, r28
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	23 e0       	ldi	r18, 0x03	; 3
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
 55c:	1f c0       	rjmp	.+62     	; 0x59c <print_sensor+0x66>
	}
	if(channel==2)
 55e:	42 30       	cpi	r20, 0x02	; 2
 560:	71 f4       	brne	.+28     	; 0x57e <print_sensor+0x48>
	{
		ADC_valueC=ADC_conversion(channel);
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 77 02 	call	0x4ee	; 0x4ee <ADC_conversion>
 568:	48 2f       	mov	r20, r24
 56a:	80 93 03 02 	sts	0x0203, r24
		lcd_print(row,coloumn,ADC_valueC, 3);
 56e:	8d 2f       	mov	r24, r29
 570:	6c 2f       	mov	r22, r28
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	23 e0       	ldi	r18, 0x03	; 3
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
 57c:	0f c0       	rjmp	.+30     	; 0x59c <print_sensor+0x66>
	}
	if(channel==1)
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	69 f4       	brne	.+26     	; 0x59c <print_sensor+0x66>
	{
		ADC_valueR=ADC_conversion(channel);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 77 02 	call	0x4ee	; 0x4ee <ADC_conversion>
 588:	48 2f       	mov	r20, r24
 58a:	80 93 0a 02 	sts	0x020A, r24
		lcd_print(row,coloumn,ADC_valueR, 3);
 58e:	8d 2f       	mov	r24, r29
 590:	6c 2f       	mov	r22, r28
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	23 e0       	ldi	r18, 0x03	; 3
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	}

}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <init_devices>:
void init_devices(void)
{
	cli();
 5a2:	f8 94       	cli
	port_init();
 5a4:	0e 94 92 02 	call	0x524	; 0x524 <port_init>
	adc_init();
 5a8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <adc_init>
	timer_init();
 5ac:	0e 94 18 02 	call	0x430	; 0x430 <timer_init>
	lcd_port_config();	
 5b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_port_config>
	sei();
 5b4:	78 94       	sei
}
 5b6:	08 95       	ret

000005b8 <turn>:
void turn(void){
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
		{
			Right();
			_delay_ms(2000);
		}
	}
}
 5c4:	0d b7       	in	r16, 0x3d	; 61
 5c6:	1e b7       	in	r17, 0x3e	; 62
	lcd_port_config();	
	sei();
}
void turn(void){
	int Length;
	int m,a[Length],i;
 5c8:	ed b7       	in	r30, 0x3d	; 61
 5ca:	fe b7       	in	r31, 0x3e	; 62
 5cc:	31 96       	adiw	r30, 0x01	; 1
		Left();
	}
	
	else
	{
		if(a[i+1]<a[i])
 5ce:	82 81       	ldd	r24, Z+2	; 0x02
 5d0:	93 81       	ldd	r25, Z+3	; 0x03
 5d2:	20 81       	ld	r18, Z
 5d4:	31 81       	ldd	r19, Z+1	; 0x01
 5d6:	82 17       	cp	r24, r18
 5d8:	93 07       	cpc	r25, r19
 5da:	1c f4       	brge	.+6      	; 0x5e2 <turn+0x2a>
		{
			
			Left();
 5dc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Left>
 5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <turn+0x40>
		}
		else
		{
			Right();
 5e2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Right>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	a9 e5       	ldi	r26, 0x59	; 89
 5ec:	81 50       	subi	r24, 0x01	; 1
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	a0 40       	sbci	r26, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <turn+0x34>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <turn+0x3e>
 5f6:	00 00       	nop
			_delay_ms(2000);
		}
	}
}
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	1e bf       	out	0x3e, r17	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0d bf       	out	0x3d, r16	; 61
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <movement_fire>:

void movement_fire(int Length)
{		
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
	int b,c,d,e;
	int f;
	f=Length;
	int i;
	int m=0;  //for the number of turns
	for (i=0;i<f;i++)
 61c:	18 16       	cp	r1, r24
 61e:	19 06       	cpc	r1, r25
 620:	0c f0       	brlt	.+2      	; 0x624 <movement_fire+0x18>
 622:	83 c0       	rjmp	.+262    	; 0x72a <movement_fire+0x11e>
 624:	0f 2e       	mov	r0, r31
 626:	f5 e1       	ldi	r31, 0x15	; 21
 628:	ef 2e       	mov	r14, r31
 62a:	f2 e0       	ldi	r31, 0x02	; 2
 62c:	ff 2e       	mov	r15, r31
 62e:	f0 2d       	mov	r31, r0
			_delay_ms(2000);
		}
	}
}

void movement_fire(int Length)
 630:	6c 01       	movw	r12, r24
 632:	cc 0c       	add	r12, r12
 634:	dd 1c       	adc	r13, r13
 636:	ce 0c       	add	r12, r14
 638:	df 1c       	adc	r13, r15
{		
	int start;
	start=40;
	int pos;
	pos=start;
 63a:	08 e2       	ldi	r16, 0x28	; 40
 63c:	10 e0       	ldi	r17, 0x00	; 0
	int m=0;  //for the number of turns
	for (i=0;i<f;i++)
	{

		e=pos-1;
		b=pos+1;
 63e:	e8 01       	movw	r28, r16
 640:	21 96       	adiw	r28, 0x01	; 1
		c=pos+7;
		d=pos-7;

		if(a[i+1]==b)
 642:	d7 01       	movw	r26, r14
 644:	8d 91       	ld	r24, X+
 646:	9d 91       	ld	r25, X+
 648:	7d 01       	movw	r14, r26
 64a:	8c 17       	cp	r24, r28
 64c:	9d 07       	cpc	r25, r29
 64e:	61 f5       	brne	.+88     	; 0x6a8 <movement_fire+0x9c>
		{
			Right();
 650:	0e 94 52 02 	call	0x4a4	; 0x4a4 <Right>
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	9f e7       	ldi	r25, 0x7F	; 127
 658:	a4 e0       	ldi	r26, 0x04	; 4
 65a:	81 50       	subi	r24, 0x01	; 1
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	a0 40       	sbci	r26, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <movement_fire+0x4e>
 662:	00 c0       	rjmp	.+0      	; 0x664 <movement_fire+0x58>
 664:	00 00       	nop
			_delay_ms(100);
			do 
			{
				print_sensor(1,1,1);
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				print_sensor(1,5,2);
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	65 e0       	ldi	r22, 0x05	; 5
 674:	42 e0       	ldi	r20, 0x02	; 2
 676:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				print_sensor(1,9,3);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	69 e0       	ldi	r22, 0x09	; 9
 67e:	43 e0       	ldi	r20, 0x03	; 3
 680:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				
				Forward();
 684:	0e 94 42 02 	call	0x484	; 0x484 <Forward>
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
 688:	80 91 03 02 	lds	r24, 0x0203
 68c:	84 32       	cpi	r24, 0x24	; 36
 68e:	40 f0       	brcs	.+16     	; 0x6a0 <movement_fire+0x94>
 690:	80 91 02 02 	lds	r24, 0x0202
 694:	84 32       	cpi	r24, 0x24	; 36
 696:	20 f0       	brcs	.+8      	; 0x6a0 <movement_fire+0x94>
 698:	80 91 0a 02 	lds	r24, 0x020A
 69c:	84 32       	cpi	r24, 0x24	; 36
 69e:	18 f7       	brcc	.-58     	; 0x666 <movement_fire+0x5a>
			
			pos=pos+1;
			m++;
		turn();
 6a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <turn>
				print_sensor(1,9,3);
				
				Forward();
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
			
			pos=pos+1;
 6a4:	8e 01       	movw	r16, r28
 6a6:	3b c0       	rjmp	.+118    	; 0x71e <movement_fire+0x112>
	int i;
	int m=0;  //for the number of turns
	for (i=0;i<f;i++)
	{

		e=pos-1;
 6a8:	e8 01       	movw	r28, r16
 6aa:	21 97       	sbiw	r28, 0x01	; 1
			pos=pos+1;
			m++;
		turn();
		}

		else if(a[i+1]==e)
 6ac:	8c 17       	cp	r24, r28
 6ae:	9d 07       	cpc	r25, r29
 6b0:	61 f5       	brne	.+88     	; 0x70a <movement_fire+0xfe>
		{
			Left();
 6b2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Left>
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	9f e7       	ldi	r25, 0x7F	; 127
 6ba:	a4 e0       	ldi	r26, 0x04	; 4
 6bc:	81 50       	subi	r24, 0x01	; 1
 6be:	90 40       	sbci	r25, 0x00	; 0
 6c0:	a0 40       	sbci	r26, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <movement_fire+0xb0>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <movement_fire+0xba>
 6c6:	00 00       	nop
			_delay_ms(100);
			do 
			{
				
				print_sensor(1,1,1);
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				print_sensor(1,5,2);
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	65 e0       	ldi	r22, 0x05	; 5
 6d6:	42 e0       	ldi	r20, 0x02	; 2
 6d8:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				print_sensor(1,9,3);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	69 e0       	ldi	r22, 0x09	; 9
 6e0:	43 e0       	ldi	r20, 0x03	; 3
 6e2:	0e 94 9b 02 	call	0x536	; 0x536 <print_sensor>
				
				Forward();
 6e6:	0e 94 42 02 	call	0x484	; 0x484 <Forward>
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
 6ea:	80 91 03 02 	lds	r24, 0x0203
 6ee:	84 32       	cpi	r24, 0x24	; 36
 6f0:	40 f0       	brcs	.+16     	; 0x702 <movement_fire+0xf6>
 6f2:	80 91 02 02 	lds	r24, 0x0202
 6f6:	84 32       	cpi	r24, 0x24	; 36
 6f8:	20 f0       	brcs	.+8      	; 0x702 <movement_fire+0xf6>
 6fa:	80 91 0a 02 	lds	r24, 0x020A
 6fe:	84 32       	cpi	r24, 0x24	; 36
 700:	18 f7       	brcc	.-58     	; 0x6c8 <movement_fire+0xbc>
			pos=pos-1;
			m++;
		turn();
 702:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <turn>
				print_sensor(1,5,2);
				print_sensor(1,9,3);
				
				Forward();
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
			pos=pos-1;
 706:	8e 01       	movw	r16, r28
 708:	0a c0       	rjmp	.+20     	; 0x71e <movement_fire+0x112>
	{

		e=pos-1;
		b=pos+1;
		c=pos+7;
		d=pos-7;
 70a:	e8 01       	movw	r28, r16
 70c:	27 97       	sbiw	r28, 0x07	; 7
			pos=pos-1;
			m++;
		turn();
		}

		else if(a[i+1]==d)
 70e:	8c 17       	cp	r24, r28
 710:	9d 07       	cpc	r25, r29
 712:	29 f4       	brne	.+10     	; 0x71e <movement_fire+0x112>
		{
			Forward();
 714:	0e 94 42 02 	call	0x484	; 0x484 <Forward>
			pos=pos-7;
			m++;
			turn();
 718:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <turn>
		}

		else if(a[i+1]==d)
		{
			Forward();
			pos=pos-7;
 71c:	8e 01       	movw	r16, r28
			pos=pos+7;
			m++;
			turn();
		}

		Stop();
 71e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Stop>
	int b,c,d,e;
	int f;
	f=Length;
	int i;
	int m=0;  //for the number of turns
	for (i=0;i<f;i++)
 722:	ec 14       	cp	r14, r12
 724:	fd 04       	cpc	r15, r13
 726:	09 f0       	breq	.+2      	; 0x72a <movement_fire+0x11e>
 728:	8a cf       	rjmp	.-236    	; 0x63e <movement_fire+0x32>

		Stop();

	}
			
		}	
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	08 95       	ret

0000073c <top_algorithm>:



//Do not make changes in main function
void top_algorithm(int number2)
{
 73c:	cf 92       	push	r12
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
	int noden=number2;
 74c:	e8 2f       	mov	r30, r24
 74e:	f9 2f       	mov	r31, r25
	int row = (noden/7)+1;
	int j=0,a[49];
 750:	ee 24       	eor	r14, r14
 752:	ff 24       	eor	r15, r15
	while(noden>=1){

		if(noden>1){
			while ((noden%7==0)||((noden-1)%7==0)){
 754:	c7 e0       	ldi	r28, 0x07	; 7
 756:	d0 e0       	ldi	r29, 0x00	; 0
void top_algorithm(int number2)
{
	int noden=number2;
	int row = (noden/7)+1;
	int j=0,a[49];
	while(noden>=1){
 758:	99 c0       	rjmp	.+306    	; 0x88c <top_algorithm+0x150>

		if(noden>1){
 75a:	e2 30       	cpi	r30, 0x02	; 2
 75c:	f1 05       	cpc	r31, r1
 75e:	34 f4       	brge	.+12     	; 0x76c <top_algorithm+0x30>
 760:	14 c0       	rjmp	.+40     	; 0x78a <top_algorithm+0x4e>
			while ((noden%7==0)||((noden-1)%7==0)){
				noden=noden-7;
 762:	37 97       	sbiw	r30, 0x07	; 7
				//printf("%d \n",noden);
				a[j]=noden;
				j++;
 764:	08 94       	sec
 766:	e1 1c       	adc	r14, r1
 768:	f1 1c       	adc	r15, r1

				break;
 76a:	0f c0       	rjmp	.+30     	; 0x78a <top_algorithm+0x4e>
	int row = (noden/7)+1;
	int j=0,a[49];
	while(noden>=1){

		if(noden>1){
			while ((noden%7==0)||((noden-1)%7==0)){
 76c:	cf 01       	movw	r24, r30
 76e:	be 01       	movw	r22, r28
 770:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 774:	6c 01       	movw	r12, r24
 776:	00 97       	sbiw	r24, 0x00	; 0
 778:	a1 f3       	breq	.-24     	; 0x762 <top_algorithm+0x26>
 77a:	cf 01       	movw	r24, r30
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	be 01       	movw	r22, r28
 780:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	69 f3       	breq	.-38     	; 0x762 <top_algorithm+0x26>
 788:	0d c0       	rjmp	.+26     	; 0x7a4 <top_algorithm+0x68>

				break;

			}
		}
		if(noden%7==0)
 78a:	cf 01       	movw	r24, r30
 78c:	be 01       	movw	r22, r28
 78e:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 792:	6c 01       	movw	r12, r24
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	31 f4       	brne	.+12     	; 0x7a4 <top_algorithm+0x68>
		{
			row=noden/7;
 798:	cf 01       	movw	r24, r30
 79a:	be 01       	movw	r22, r28
 79c:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 7a0:	8b 01       	movw	r16, r22
 7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <top_algorithm+0x76>
		}
		if(noden%7!=0){
			row = (noden/7)+1;
 7a4:	cf 01       	movw	r24, r30
 7a6:	be 01       	movw	r22, r28
 7a8:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 7ac:	8b 01       	movw	r16, r22
 7ae:	0f 5f       	subi	r16, 0xFF	; 255
 7b0:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		while(row%2==0){
 7b2:	00 fd       	sbrc	r16, 0
 7b4:	36 c0       	rjmp	.+108    	; 0x822 <top_algorithm+0xe6>
			//evenrow(noden);
			noden=noden+1;
 7b6:	9f 01       	movw	r18, r30
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255

			//printf("%d \n",noden);
			a[j]=noden;
			j++;
 7bc:	08 94       	sec
 7be:	e1 1c       	adc	r14, r1
 7c0:	f1 1c       	adc	r15, r1


			if(row%2!=0||noden%7==0||(noden-1)%7==0)
 7c2:	00 fd       	sbrc	r16, 0
 7c4:	29 c0       	rjmp	.+82     	; 0x818 <top_algorithm+0xdc>
 7c6:	c9 01       	movw	r24, r18
 7c8:	be 01       	movw	r22, r28
 7ca:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	29 f1       	breq	.+74     	; 0x81c <top_algorithm+0xe0>
 7d2:	c1 14       	cp	r12, r1
 7d4:	d1 04       	cpc	r13, r1
 7d6:	a9 f4       	brne	.+42     	; 0x802 <top_algorithm+0xc6>
 7d8:	23 c0       	rjmp	.+70     	; 0x820 <top_algorithm+0xe4>
			row = (noden/7)+1;
		}

		while(row%2==0){
			//evenrow(noden);
			noden=noden+1;
 7da:	f9 01       	movw	r30, r18
 7dc:	31 96       	adiw	r30, 0x01	; 1

			//printf("%d \n",noden);
			a[j]=noden;
			j++;
 7de:	08 94       	sec
 7e0:	e1 1c       	adc	r14, r1
 7e2:	f1 1c       	adc	r15, r1


			if(row%2!=0||noden%7==0||(noden-1)%7==0)
 7e4:	00 fd       	sbrc	r16, 0
 7e6:	1d c0       	rjmp	.+58     	; 0x822 <top_algorithm+0xe6>
 7e8:	cf 01       	movw	r24, r30
 7ea:	be 01       	movw	r22, r28
 7ec:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	b9 f0       	breq	.+46     	; 0x822 <top_algorithm+0xe6>
 7f4:	c9 01       	movw	r24, r18
 7f6:	be 01       	movw	r22, r28
 7f8:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	89 f0       	breq	.+34     	; 0x822 <top_algorithm+0xe6>
			row = (noden/7)+1;
		}

		while(row%2==0){
			//evenrow(noden);
			noden=noden+1;
 800:	9f 01       	movw	r18, r30
			{

				break;
			}

			row=(noden/7)+1;
 802:	c9 01       	movw	r24, r18
 804:	be 01       	movw	r22, r28
 806:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 80a:	8b 01       	movw	r16, r22
 80c:	0f 5f       	subi	r16, 0xFF	; 255
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(noden%7!=0){
			row = (noden/7)+1;
		}

		while(row%2==0){
 810:	00 ff       	sbrs	r16, 0
 812:	e3 cf       	rjmp	.-58     	; 0x7da <top_algorithm+0x9e>
 814:	f9 01       	movw	r30, r18
 816:	05 c0       	rjmp	.+10     	; 0x822 <top_algorithm+0xe6>
			//evenrow(noden);
			noden=noden+1;
 818:	f9 01       	movw	r30, r18
 81a:	03 c0       	rjmp	.+6      	; 0x822 <top_algorithm+0xe6>
 81c:	f9 01       	movw	r30, r18
 81e:	01 c0       	rjmp	.+2      	; 0x822 <top_algorithm+0xe6>
 820:	f9 01       	movw	r30, r18
				break;
			}

			row=(noden/7)+1;
		}
		if(noden>1){
 822:	e2 30       	cpi	r30, 0x02	; 2
 824:	f1 05       	cpc	r31, r1
 826:	bc f1       	brlt	.+110    	; 0x896 <top_algorithm+0x15a>
 828:	9f 01       	movw	r18, r30


			while(row%2!=0){
 82a:	00 ff       	sbrs	r16, 0
 82c:	2f c0       	rjmp	.+94     	; 0x88c <top_algorithm+0x150>
				//oddrow(noden);
				noden=noden-1;
 82e:	31 97       	sbiw	r30, 0x01	; 1
				//printf("%d \n",noden);
				a[j]=noden;
				j++;
 830:	08 94       	sec
 832:	e1 1c       	adc	r14, r1
 834:	f1 1c       	adc	r15, r1
				if(row%2==0||noden%7==0||(noden-1)%7==0)
 836:	00 ff       	sbrs	r16, 0
 838:	29 c0       	rjmp	.+82     	; 0x88c <top_algorithm+0x150>
 83a:	cf 01       	movw	r24, r30
 83c:	be 01       	movw	r22, r28
 83e:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 842:	00 97       	sbiw	r24, 0x00	; 0
 844:	19 f1       	breq	.+70     	; 0x88c <top_algorithm+0x150>
 846:	c9 01       	movw	r24, r18
 848:	02 97       	sbiw	r24, 0x02	; 2
 84a:	be 01       	movw	r22, r28
 84c:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	a1 f4       	brne	.+40     	; 0x87c <top_algorithm+0x140>
 854:	1b c0       	rjmp	.+54     	; 0x88c <top_algorithm+0x150>
		if(noden>1){


			while(row%2!=0){
				//oddrow(noden);
				noden=noden-1;
 856:	31 97       	sbiw	r30, 0x01	; 1
				//printf("%d \n",noden);
				a[j]=noden;
				j++;
 858:	08 94       	sec
 85a:	e1 1c       	adc	r14, r1
 85c:	f1 1c       	adc	r15, r1
				if(row%2==0||noden%7==0||(noden-1)%7==0)
 85e:	60 ff       	sbrs	r22, 0
 860:	15 c0       	rjmp	.+42     	; 0x88c <top_algorithm+0x150>
 862:	cf 01       	movw	r24, r30
 864:	be 01       	movw	r22, r28
 866:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	79 f0       	breq	.+30     	; 0x88c <top_algorithm+0x150>
//TODO:: Please write your application code. You can make your own functions & header files



//Do not make changes in main function
void top_algorithm(int number2)
 86e:	cf 01       	movw	r24, r30
 870:	01 97       	sbiw	r24, 0x01	; 1
				//oddrow(noden);
				noden=noden-1;
				//printf("%d \n",noden);
				a[j]=noden;
				j++;
				if(row%2==0||noden%7==0||(noden-1)%7==0)
 872:	be 01       	movw	r22, r28
 874:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	41 f0       	breq	.+16     	; 0x88c <top_algorithm+0x150>
				{

					break;
				}

				row=(noden/7)+1;
 87c:	cf 01       	movw	r24, r30
 87e:	be 01       	movw	r22, r28
 880:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodhi4>
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
			row=(noden/7)+1;
		}
		if(noden>1){


			while(row%2!=0){
 888:	60 fd       	sbrc	r22, 0
 88a:	e5 cf       	rjmp	.-54     	; 0x856 <top_algorithm+0x11a>
void top_algorithm(int number2)
{
	int noden=number2;
	int row = (noden/7)+1;
	int j=0,a[49];
	while(noden>=1){
 88c:	1e 16       	cp	r1, r30
 88e:	1f 06       	cpc	r1, r31
 890:	0c f4       	brge	.+2      	; 0x894 <top_algorithm+0x158>
 892:	63 cf       	rjmp	.-314    	; 0x75a <top_algorithm+0x1e>
 894:	04 c0       	rjmp	.+8      	; 0x89e <top_algorithm+0x162>
 896:	1e 16       	cp	r1, r30
 898:	1f 06       	cpc	r1, r31
 89a:	0c f4       	brge	.+2      	; 0x89e <top_algorithm+0x162>
 89c:	5e cf       	rjmp	.-324    	; 0x75a <top_algorithm+0x1e>
		}



	}
	movement_fire(j+1);
 89e:	c7 01       	movw	r24, r14
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	0e 94 06 03 	call	0x60c	; 0x60c <movement_fire>

}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	ff 90       	pop	r15
 8b0:	ef 90       	pop	r14
 8b2:	df 90       	pop	r13
 8b4:	cf 90       	pop	r12
 8b6:	08 95       	ret

000008b8 <main>:

void main(void)
{
      init_devices();
 8b8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <init_devices>
      lcd_set_4bit();
 8bc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
      lcd_init();
 8c0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
row1 = 40;
 8c4:	88 e2       	ldi	r24, 0x28	; 40
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	90 93 07 02 	sts	0x0207, r25
 8cc:	80 93 06 02 	sts	0x0206, r24
row2 = 47;
 8d0:	8f e2       	ldi	r24, 0x2F	; 47
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	90 93 12 02 	sts	0x0212, r25
 8d8:	80 93 11 02 	sts	0x0211, r24
row3 =  48;
 8dc:	20 e3       	ldi	r18, 0x30	; 48
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	30 93 10 02 	sts	0x0210, r19
 8e4:	20 93 0f 02 	sts	0x020F, r18
	}
}

if (row3>row1 && row3>row2){
	//bottom_algorithm(row3);
	if(row1<row2){
 8e8:	28 e2       	ldi	r18, 0x28	; 40
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	28 17       	cp	r18, r24
 8ee:	39 07       	cpc	r19, r25
 8f0:	28 f4       	brcc	.+10     	; 0x8fc <main+0x44>
		top_algorithm(row1);
 8f2:	88 e2       	ldi	r24, 0x28	; 40
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 9e 03 	call	0x73c	; 0x73c <top_algorithm>
 8fa:	08 95       	ret
		//middle_algorithm(row1,row2,row3);
	}
	else{
		top_algorithm(row2);
 8fc:	0e 94 9e 03 	call	0x73c	; 0x73c <top_algorithm>
 900:	08 95       	ret

00000902 <__udivmodhi4>:
 902:	aa 1b       	sub	r26, r26
 904:	bb 1b       	sub	r27, r27
 906:	51 e1       	ldi	r21, 0x11	; 17
 908:	07 c0       	rjmp	.+14     	; 0x918 <__udivmodhi4_ep>

0000090a <__udivmodhi4_loop>:
 90a:	aa 1f       	adc	r26, r26
 90c:	bb 1f       	adc	r27, r27
 90e:	a6 17       	cp	r26, r22
 910:	b7 07       	cpc	r27, r23
 912:	10 f0       	brcs	.+4      	; 0x918 <__udivmodhi4_ep>
 914:	a6 1b       	sub	r26, r22
 916:	b7 0b       	sbc	r27, r23

00000918 <__udivmodhi4_ep>:
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	5a 95       	dec	r21
 91e:	a9 f7       	brne	.-22     	; 0x90a <__udivmodhi4_loop>
 920:	80 95       	com	r24
 922:	90 95       	com	r25
 924:	bc 01       	movw	r22, r24
 926:	cd 01       	movw	r24, r26
 928:	08 95       	ret

0000092a <__divmodhi4>:
 92a:	97 fb       	bst	r25, 7
 92c:	09 2e       	mov	r0, r25
 92e:	07 26       	eor	r0, r23
 930:	0a d0       	rcall	.+20     	; 0x946 <__divmodhi4_neg1>
 932:	77 fd       	sbrc	r23, 7
 934:	04 d0       	rcall	.+8      	; 0x93e <__divmodhi4_neg2>
 936:	e5 df       	rcall	.-54     	; 0x902 <__udivmodhi4>
 938:	06 d0       	rcall	.+12     	; 0x946 <__divmodhi4_neg1>
 93a:	00 20       	and	r0, r0
 93c:	1a f4       	brpl	.+6      	; 0x944 <__divmodhi4_exit>

0000093e <__divmodhi4_neg2>:
 93e:	70 95       	com	r23
 940:	61 95       	neg	r22
 942:	7f 4f       	sbci	r23, 0xFF	; 255

00000944 <__divmodhi4_exit>:
 944:	08 95       	ret

00000946 <__divmodhi4_neg1>:
 946:	f6 f7       	brtc	.-4      	; 0x944 <__divmodhi4_exit>
 948:	90 95       	com	r25
 94a:	81 95       	neg	r24
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	08 95       	ret

00000950 <_exit>:
 950:	f8 94       	cli

00000952 <__stop_program>:
 952:	ff cf       	rjmp	.-2      	; 0x952 <__stop_program>
