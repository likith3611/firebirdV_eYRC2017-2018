
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080020c  0080020c  00001596  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000023f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001879  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d15  00000000  00000000  000044c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000051d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000528  00000000  00000000  00005578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001614  00000000  00000000  00005aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ef       	ldi	r30, 0xF6	; 246
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 32       	cpi	r26, 0x23	; 35
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 7b 07 	call	0xef6	; 0xef6 <main>
     122:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
     132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	80 e3       	ldi	r24, 0x30	; 48
     13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	ef ef       	ldi	r30, 0xFF	; 255
     140:	f7 e4       	ldi	r31, 0x47	; 71
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
     146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
     148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     14a:	42 98       	cbi	0x08, 2	; 8
     14c:	e6 e6       	ldi	r30, 0x66	; 102
     14e:	fe e0       	ldi	r31, 0x0E	; 14
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
     154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f7 e4       	ldi	r31, 0x47	; 71
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
     168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	e6 e6       	ldi	r30, 0x66	; 102
     16e:	fe e0       	ldi	r31, 0x0E	; 14
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
     174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	97 e4       	ldi	r25, 0x47	; 71
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
     188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
     194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     19e:	42 9a       	sbi	0x08, 2	; 8
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	97 e4       	ldi	r25, 0x47	; 71
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
     1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ac:	42 98       	cbi	0x08, 2	; 8

	
}
     1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1b8:	28 2f       	mov	r18, r24
     1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1bc:	92 2b       	or	r25, r18
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	ef ef       	ldi	r30, 0xFF	; 255
     1c8:	f7 e4       	ldi	r31, 0x47	; 71
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
     1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1d4:	98 b1       	in	r25, 0x08	; 8
     1d6:	9f 70       	andi	r25, 0x0F	; 15
     1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1dc:	82 95       	swap	r24
     1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1e0:	89 2b       	or	r24, r25
     1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1e8:	42 9a       	sbi	0x08, 2	; 8
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	97 e4       	ldi	r25, 0x47	; 71
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
     1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1f6:	42 98       	cbi	0x08, 2	; 8
}
     1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
     206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
     226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     228:	98 b1       	in	r25, 0x08	; 8
     22a:	9f 70       	andi	r25, 0x0F	; 15
     22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     230:	28 2f       	mov	r18, r24
     232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     234:	92 2b       	or	r25, r18
     236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     23c:	42 9a       	sbi	0x08, 2	; 8
     23e:	ef ef       	ldi	r30, 0xFF	; 255
     240:	f7 e4       	ldi	r31, 0x47	; 71
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
     246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
     248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     24c:	98 b1       	in	r25, 0x08	; 8
     24e:	9f 70       	andi	r25, 0x0F	; 15
     250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     254:	82 95       	swap	r24
     256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     258:	89 2b       	or	r24, r25
     25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	97 e4       	ldi	r25, 0x47	; 71
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
     26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     26e:	42 98       	cbi	0x08, 2	; 8
}
     270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
     278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     28c:	89 91       	ld	r24, Y+
     28e:	88 23       	and	r24, r24
     290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
     2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2b0:	86 2f       	mov	r24, r22
     2b2:	81 58       	subi	r24, 0x81	; 129
     2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2ba:	86 2f       	mov	r24, r22
     2bc:	81 54       	subi	r24, 0x41	; 65
     2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2c4:	86 2f       	mov	r24, r22
     2c6:	8d 56       	subi	r24, 0x6D	; 109
     2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2ce:	86 2f       	mov	r24, r22
     2d0:	8d 52       	subi	r24, 0x2D	; 45
     2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	8a 01       	movw	r16, r20
     2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2e4:	88 23       	and	r24, r24
     2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
     2e8:	66 23       	and	r22, r22
     2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
     2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2f6:	c5 30       	cpi	r28, 0x05	; 5
     2f8:	d1 05       	cpc	r29, r1
     2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
     2fc:	c8 01       	movw	r24, r16
     2fe:	60 e1       	ldi	r22, 0x10	; 16
     300:	77 e2       	ldi	r23, 0x27	; 39
     302:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     306:	cb 01       	movw	r24, r22
     308:	c0 96       	adiw	r24, 0x30	; 48
     30a:	90 93 0f 02 	sts	0x020F, r25
     30e:	80 93 0e 02 	sts	0x020E, r24
		lcd_wr_char(million);
     312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
     316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     318:	c4 30       	cpi	r28, 0x04	; 4
     31a:	d1 05       	cpc	r29, r1
     31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
     31e:	c8 01       	movw	r24, r16
     320:	68 ee       	ldi	r22, 0xE8	; 232
     322:	73 e0       	ldi	r23, 0x03	; 3
     324:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     328:	cb 01       	movw	r24, r22
     32a:	70 93 11 02 	sts	0x0211, r23
     32e:	60 93 10 02 	sts	0x0210, r22
		thousand = temp%10 + 48;
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     33a:	c0 96       	adiw	r24, 0x30	; 48
     33c:	90 93 1a 02 	sts	0x021A, r25
     340:	80 93 19 02 	sts	0x0219, r24
		lcd_wr_char(thousand);
     344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     34e:	c3 30       	cpi	r28, 0x03	; 3
     350:	d1 05       	cpc	r29, r1
     352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
     358:	c8 01       	movw	r24, r16
     35a:	64 e6       	ldi	r22, 0x64	; 100
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     362:	cb 01       	movw	r24, r22
     364:	70 93 11 02 	sts	0x0211, r23
     368:	60 93 10 02 	sts	0x0210, r22
		hundred = temp%10 + 48;
     36c:	6a e0       	ldi	r22, 0x0A	; 10
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     374:	c0 96       	adiw	r24, 0x30	; 48
     376:	90 93 16 02 	sts	0x0216, r25
     37a:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(hundred);
     37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     384:	c2 30       	cpi	r28, 0x02	; 2
     386:	d1 05       	cpc	r29, r1
     388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
     38e:	2a e0       	ldi	r18, 0x0A	; 10
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	c8 01       	movw	r24, r16
     394:	b9 01       	movw	r22, r18
     396:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     39a:	cb 01       	movw	r24, r22
     39c:	70 93 11 02 	sts	0x0211, r23
     3a0:	60 93 10 02 	sts	0x0210, r22
		tens = temp%10 + 48;
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     3aa:	c0 96       	adiw	r24, 0x30	; 48
     3ac:	90 93 14 02 	sts	0x0214, r25
     3b0:	80 93 13 02 	sts	0x0213, r24
		lcd_wr_char(tens);
     3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3ba:	c1 30       	cpi	r28, 0x01	; 1
     3bc:	d1 05       	cpc	r29, r1
     3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3c4:	c8 01       	movw	r24, r16
     3c6:	6a e0       	ldi	r22, 0x0A	; 10
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
     3ce:	c0 96       	adiw	r24, 0x30	; 48
     3d0:	90 93 18 02 	sts	0x0218, r25
     3d4:	80 93 17 02 	sts	0x0217, r24
		lcd_wr_char(unit);
     3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
     3dc:	c6 30       	cpi	r28, 0x06	; 6
     3de:	d1 05       	cpc	r29, r1
     3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3e2:	85 e4       	ldi	r24, 0x45	; 69
     3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <buzzer_pin_config>:
Logic: Setting PORTC3 as output which is the pin connected to the buzzer
Example Call: buzzer_pin_config()
*/
void buzzer_pin_config(void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     3f2:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     3f4:	43 98       	cbi	0x08, 3	; 8
}
     3f6:	08 95       	ret

000003f8 <buzzer_on>:
Example Call: buzzer_on ()
*/
void buzzer_on(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     3f8:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     3fa:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     3fc:	88 b9       	out	0x08, r24	; 8
}
     3fe:	08 95       	ret

00000400 <buzzer_off>:
Example Call: buzzer_off()
*/
void buzzer_off(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     400:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     402:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     404:	88 b9       	out	0x08, r24	; 8
}
     406:	08 95       	ret

00000408 <buzzer_beep>:
Logic: Turns the buzzer on and off by writing 1 & 0 to PC3
Example Call: buzzer_beep()
*/
void buzzer_beep()
{
	buzzer_on();
     408:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <buzzer_on>
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	a8 e0       	ldi	r26, 0x08	; 8
     412:	81 50       	subi	r24, 0x01	; 1
     414:	90 40       	sbci	r25, 0x00	; 0
     416:	a0 40       	sbci	r26, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <buzzer_beep+0xa>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <buzzer_beep+0x14>
     41c:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
     41e:	0e 94 00 02 	call	0x400	; 0x400 <buzzer_off>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	9f ef       	ldi	r25, 0xFF	; 255
     426:	a8 e0       	ldi	r26, 0x08	; 8
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	a0 40       	sbci	r26, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <buzzer_beep+0x20>
     430:	00 c0       	rjmp	.+0      	; 0x432 <buzzer_beep+0x2a>
     432:	00 00       	nop
	_delay_ms(200);
}
     434:	08 95       	ret

00000436 <turn>:
unsigned char ADC_conversion(unsigned char );
unsigned char ADC_valueL,ADC_valueR,ADC_valueC;
unsigned int value;
#include "buzzer.h"
void turn(void)
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
			Right();
			_delay_ms(2000);
		}
		// The amount of delay has to be twice the one given there
	}
}
     442:	0d b7       	in	r16, 0x3d	; 61
     444:	1e b7       	in	r17, 0x3e	; 62
unsigned int value;
#include "buzzer.h"
void turn(void)
{
	int Length;
	int m,a[Length],i;
     446:	ed b7       	in	r30, 0x3d	; 61
     448:	fe b7       	in	r31, 0x3e	; 62
     44a:	31 96       	adiw	r30, 0x01	; 1


	else
	{

		if(a[i+1]<a[i])
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	20 81       	ld	r18, Z
     452:	31 81       	ldd	r19, Z+1	; 0x01
     454:	82 17       	cp	r24, r18
     456:	93 07       	cpc	r25, r19
     458:	5c f0       	brlt	.+22     	; 0x470 <turn+0x3a>
		}
		

		else
		{
			Right();
     45a:	0e 94 93 02 	call	0x526	; 0x526 <Right>
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	a9 e5       	ldi	r26, 0x59	; 89
     464:	81 50       	subi	r24, 0x01	; 1
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	a0 40       	sbci	r26, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <turn+0x2e>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <turn+0x38>
     46e:	00 00       	nop
			_delay_ms(2000);
		}
		// The amount of delay has to be twice the one given there
	}
}
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	1e bf       	out	0x3e, r17	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	0d bf       	out	0x3d, r16	; 61
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <lcd_port_config>:

void lcd_port_config (void)
{
	DDRC=DDRC | 0xF7;
     484:	87 b1       	in	r24, 0x07	; 7
     486:	87 6f       	ori	r24, 0xF7	; 247
     488:	87 b9       	out	0x07, r24	; 7
	PORTC=PORTC & 0x80;
     48a:	88 b1       	in	r24, 0x08	; 8
     48c:	80 78       	andi	r24, 0x80	; 128
     48e:	88 b9       	out	0x08, r24	; 8
	
}
     490:	08 95       	ret

00000492 <motion_pinconfig>:


void motion_pinconfig (void)
{
	DDRA = DDRA | 0x0F;
     492:	81 b1       	in	r24, 0x01	; 1
     494:	8f 60       	ori	r24, 0x0F	; 15
     496:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     498:	82 b1       	in	r24, 0x02	; 2
     49a:	80 7f       	andi	r24, 0xF0	; 240
     49c:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;
     49e:	ea e0       	ldi	r30, 0x0A	; 10
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	80 81       	ld	r24, Z
     4a4:	88 61       	ori	r24, 0x18	; 24
     4a6:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18;
     4a8:	eb e0       	ldi	r30, 0x0B	; 11
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	88 61       	ori	r24, 0x18	; 24
     4b0:	80 83       	st	Z, r24
}
     4b2:	08 95       	ret

000004b4 <adc_pin_config>:

void adc_pin_config(void)
{	
	
	DDRF=0x00;
     4b4:	10 ba       	out	0x10, r1	; 16
	PORTF=0x00;
     4b6:	11 ba       	out	0x11, r1	; 17
	DDRK=0X00;
     4b8:	10 92 07 01 	sts	0x0107, r1
	PORTK=0X00;
     4bc:	10 92 08 01 	sts	0x0108, r1
}
     4c0:	08 95       	ret

000004c2 <timer_init>:

void timer_init(void)
{
	TCCR5B = 0x00;
     4c2:	e1 e2       	ldi	r30, 0x21	; 33
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	10 82       	st	Z, r1
	TCNT1H = 0xFF;
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	80 93 85 00 	sts	0x0085, r24
	TCNT5L = 0x01;
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
     4d4:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
     4d8:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     4dc:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
     4e0:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;
     4e4:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;
     4e8:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;
     4ec:	89 ea       	ldi	r24, 0xA9	; 169
     4ee:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0x0B;
     4f2:	8b e0       	ldi	r24, 0x0B	; 11
     4f4:	80 83       	st	Z, r24
}	
     4f6:	08 95       	ret

000004f8 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     4f8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     4fc:	60 93 2a 01 	sts	0x012A, r22
}
     500:	08 95       	ret

00000502 <motion_set>:

void motion_set (unsigned char Direction)
{
	int PortARestore = 0x00;
	Direction &= 0x0F;
	PortARestore = PORTA;
     502:	22 b1       	in	r18, 0x02	; 2
     504:	30 e0       	ldi	r19, 0x00	; 0
	PortARestore &= 0xF0;
     506:	20 7f       	andi	r18, 0xF0	; 240
     508:	30 70       	andi	r19, 0x00	; 0
}

void motion_set (unsigned char Direction)
{
	int PortARestore = 0x00;
	Direction &= 0x0F;
     50a:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA;
	PortARestore &= 0xF0;
	PortARestore |= Direction;
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	28 2b       	or	r18, r24
     510:	39 2b       	or	r19, r25
	PORTA =  PortARestore;
     512:	22 b9       	out	0x02, r18	; 2
	
}
     514:	08 95       	ret

00000516 <Left>:
	motion_set(0x0A);
}


void Left (void)
{	velocity(90,120);
     516:	8a e5       	ldi	r24, 0x5A	; 90
     518:	68 e7       	ldi	r22, 0x78	; 120
     51a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	motion_set(0x05);
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	0e 94 81 02 	call	0x502	; 0x502 <motion_set>
}
     524:	08 95       	ret

00000526 <Right>:
}


void Right (void)
{
	velocity(120,100);
     526:	88 e7       	ldi	r24, 0x78	; 120
     528:	64 e6       	ldi	r22, 0x64	; 100
     52a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	motion_set(0x0A);
     52e:	8a e0       	ldi	r24, 0x0A	; 10
     530:	0e 94 81 02 	call	0x502	; 0x502 <motion_set>
}
     534:	08 95       	ret

00000536 <Forward>:
	
}

void Forward (void)
{
	velocity(150,150);
     536:	86 e9       	ldi	r24, 0x96	; 150
     538:	66 e9       	ldi	r22, 0x96	; 150
     53a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	motion_set (0x06);
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	0e 94 81 02 	call	0x502	; 0x502 <motion_set>
}
     544:	08 95       	ret

00000546 <Backward>:

void Backward (void)
{	velocity(110,110);
     546:	8e e6       	ldi	r24, 0x6E	; 110
     548:	6e e6       	ldi	r22, 0x6E	; 110
     54a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	motion_set(0x09);
     54e:	89 e0       	ldi	r24, 0x09	; 9
     550:	0e 94 81 02 	call	0x502	; 0x502 <motion_set>
}
     554:	08 95       	ret

00000556 <Stop>:
{	velocity(90,120);
	motion_set(0x05);
}

void Stop (void)
{	velocity(0,0);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <velocity>
	motion_set(0x00);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 81 02 	call	0x502	; 0x502 <motion_set>
}
     564:	08 95       	ret

00000566 <adc_init>:

void adc_init()
{
	ADCSRA=0x00;
     566:	ea e7       	ldi	r30, 0x7A	; 122
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	10 82       	st	Z, r1
	ADCSRB=0x00;
     56c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX=0x20;
     570:	80 e2       	ldi	r24, 0x20	; 32
     572:	80 93 7c 00 	sts	0x007C, r24
	ACSR=0x80;
     576:	80 e8       	ldi	r24, 0x80	; 128
     578:	80 bf       	out	0x30, r24	; 48
	ADCSRA=0x86;
     57a:	86 e8       	ldi	r24, 0x86	; 134
     57c:	80 83       	st	Z, r24
}
     57e:	08 95       	ret

00000580 <ADC_conversion>:
unsigned char ADC_conversion(unsigned char ch )
{
	unsigned char a;
	if(ch>7)
     580:	88 30       	cpi	r24, 0x08	; 8
     582:	18 f0       	brcs	.+6      	; 0x58a <ADC_conversion+0xa>
	{
		ADCSRB=0x08;
     584:	98 e0       	ldi	r25, 0x08	; 8
     586:	90 93 7b 00 	sts	0x007B, r25
	}
	ch=ch & 0x07;
     58a:	87 70       	andi	r24, 0x07	; 7
	ADMUX=0x20 |ch;
     58c:	80 62       	ori	r24, 0x20	; 32
     58e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =ADCSRA |0x40;
     592:	ea e7       	ldi	r30, 0x7A	; 122
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);
     59c:	80 81       	ld	r24, Z
     59e:	84 ff       	sbrs	r24, 4
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <ADC_conversion+0x1c>
	a=ADCH;
     5a2:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA=ADCSRA|0x10;
     5a6:	ea e7       	ldi	r30, 0x7A	; 122
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	90 81       	ld	r25, Z
     5ac:	90 61       	ori	r25, 0x10	; 16
     5ae:	90 83       	st	Z, r25
	ADCSRB=0x00;
     5b0:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     5b4:	08 95       	ret

000005b6 <port_init>:

void port_init()
{
	lcd_port_config();
     5b6:	0e 94 42 02 	call	0x484	; 0x484 <lcd_port_config>
	adc_pin_config();
     5ba:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <adc_pin_config>
	motion_pinconfig();
     5be:	0e 94 49 02 	call	0x492	; 0x492 <motion_pinconfig>
	adc_init();
     5c2:	0e 94 b3 02 	call	0x566	; 0x566 <adc_init>
}
     5c6:	08 95       	ret

000005c8 <print_sensor>:

void print_sensor(char row,char coloumn,unsigned char channel)
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	d8 2f       	mov	r29, r24
     5ce:	c6 2f       	mov	r28, r22
	if(channel==3)
     5d0:	43 30       	cpi	r20, 0x03	; 3
     5d2:	71 f4       	brne	.+28     	; 0x5f0 <print_sensor+0x28>
	{
		ADC_valueL=ADC_conversion(channel);
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	0e 94 c0 02 	call	0x580	; 0x580 <ADC_conversion>
     5da:	48 2f       	mov	r20, r24
     5dc:	80 93 0c 02 	sts	0x020C, r24
		lcd_print(row,coloumn,ADC_valueL, 3);
     5e0:	8d 2f       	mov	r24, r29
     5e2:	6c 2f       	mov	r22, r28
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	23 e0       	ldi	r18, 0x03	; 3
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
     5ee:	1f c0       	rjmp	.+62     	; 0x62e <print_sensor+0x66>
	}
	if(channel==2)
     5f0:	42 30       	cpi	r20, 0x02	; 2
     5f2:	71 f4       	brne	.+28     	; 0x610 <print_sensor+0x48>
	{
		ADC_valueC=ADC_conversion(channel);
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	0e 94 c0 02 	call	0x580	; 0x580 <ADC_conversion>
     5fa:	48 2f       	mov	r20, r24
     5fc:	80 93 0d 02 	sts	0x020D, r24
		lcd_print(row,coloumn,ADC_valueC, 3);
     600:	8d 2f       	mov	r24, r29
     602:	6c 2f       	mov	r22, r28
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
     60e:	0f c0       	rjmp	.+30     	; 0x62e <print_sensor+0x66>
	}
	if(channel==1)
     610:	41 30       	cpi	r20, 0x01	; 1
     612:	69 f4       	brne	.+26     	; 0x62e <print_sensor+0x66>
	{
		ADC_valueR=ADC_conversion(channel);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 c0 02 	call	0x580	; 0x580 <ADC_conversion>
     61a:	48 2f       	mov	r20, r24
     61c:	80 93 12 02 	sts	0x0212, r24
		lcd_print(row,coloumn,ADC_valueR, 3);
     620:	8d 2f       	mov	r24, r29
     622:	6c 2f       	mov	r22, r28
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	23 e0       	ldi	r18, 0x03	; 3
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	}

}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <init_devices>:
void init_devices(void)
{
	cli();
     634:	f8 94       	cli
	port_init();
     636:	0e 94 db 02 	call	0x5b6	; 0x5b6 <port_init>
	adc_init();
     63a:	0e 94 b3 02 	call	0x566	; 0x566 <adc_init>
	timer_init();
     63e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <timer_init>
	lcd_port_config();	
     642:	0e 94 42 02 	call	0x484	; 0x484 <lcd_port_config>
	sei();
     646:	78 94       	sei
}
     648:	08 95       	ret

0000064a <ReachDestinationAvoidingNode>:

void   ReachDestinationAvoidingNode  (unsigned char Xd,unsigned char Yd,unsigned char Xn,unsigned char Yn)
{
     64a:	2f 92       	push	r2
     64c:	3f 92       	push	r3
     64e:	4f 92       	push	r4
     650:	5f 92       	push	r5
     652:	6f 92       	push	r6
     654:	7f 92       	push	r7
     656:	8f 92       	push	r8
     658:	9f 92       	push	r9
     65a:	af 92       	push	r10
     65c:	bf 92       	push	r11
     65e:	cf 92       	push	r12
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	c0 5e       	subi	r28, 0xE0	; 224
     674:	d0 40       	sbci	r29, 0x00	; 0
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	a8 2e       	mov	r10, r24
     682:	16 2f       	mov	r17, r22
     684:	e4 2e       	mov	r14, r20
     686:	02 2f       	mov	r16, r18

		Stop();

	}
			
}	
     688:	2d b7       	in	r18, 0x3d	; 61
     68a:	3e b7       	in	r19, 0x3e	; 62
     68c:	c3 52       	subi	r28, 0x23	; 35
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	39 83       	std	Y+1, r19	; 0x01
     692:	28 83       	st	Y, r18
     694:	cd 5d       	subi	r28, 0xDD	; 221
     696:	d0 40       	sbci	r29, 0x00	; 0
{
	
	
	 
	 unsigned int value;
	 init_devices();
     698:	0e 94 1a 03 	call	0x634	; 0x634 <init_devices>
	 lcd_set_4bit();
     69c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	 lcd_init();	
     6a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	
if(Yd=='A')
     6a4:	11 34       	cpi	r17, 0x41	; 65
     6a6:	69 f0       	breq	.+26     	; 0x6c2 <ReachDestinationAvoidingNode+0x78>
{
	Yd=0;
}
else if(Yd=='B')
     6a8:	12 34       	cpi	r17, 0x42	; 66
     6aa:	69 f0       	breq	.+26     	; 0x6c6 <ReachDestinationAvoidingNode+0x7c>
{
	Yd=1;
}
else if(Yd=='C')
     6ac:	13 34       	cpi	r17, 0x43	; 67
     6ae:	69 f0       	breq	.+26     	; 0x6ca <ReachDestinationAvoidingNode+0x80>
{
	Yd=2;
}
else if(Yd=='D')
     6b0:	14 34       	cpi	r17, 0x44	; 68
     6b2:	69 f0       	breq	.+26     	; 0x6ce <ReachDestinationAvoidingNode+0x84>
{
	
	Yd=3;
}
else if(Yd=='E')
     6b4:	15 34       	cpi	r17, 0x45	; 69
     6b6:	69 f0       	breq	.+26     	; 0x6d2 <ReachDestinationAvoidingNode+0x88>
{
	Yd=4;
}
else if(Yd=='F')
     6b8:	16 34       	cpi	r17, 0x46	; 70
     6ba:	69 f0       	breq	.+26     	; 0x6d6 <ReachDestinationAvoidingNode+0x8c>
{
	Yd=5;
}
else if(Yd=='G')
     6bc:	17 34       	cpi	r17, 0x47	; 71
     6be:	71 f4       	brne	.+28     	; 0x6dc <ReachDestinationAvoidingNode+0x92>
     6c0:	0c c0       	rjmp	.+24     	; 0x6da <ReachDestinationAvoidingNode+0x90>
	 lcd_set_4bit();
	 lcd_init();	
	
if(Yd=='A')
{
	Yd=0;
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='B')
{
	Yd=1;
     6c6:	11 e0       	ldi	r17, 0x01	; 1
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='C')
{
	Yd=2;
     6ca:	12 e0       	ldi	r17, 0x02	; 2
     6cc:	07 c0       	rjmp	.+14     	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='D')
{
	
	Yd=3;
     6ce:	13 e0       	ldi	r17, 0x03	; 3
     6d0:	05 c0       	rjmp	.+10     	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='E')
{
	Yd=4;
     6d2:	14 e0       	ldi	r17, 0x04	; 4
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='F')
{
	Yd=5;
     6d6:	15 e0       	ldi	r17, 0x05	; 5
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <ReachDestinationAvoidingNode+0x92>
}
else if(Yd=='G')
{
	Yd=6;
     6da:	16 e0       	ldi	r17, 0x06	; 6
}
printf("%d\n",Yd);
     6dc:	61 2f       	mov	r22, r17
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	c1 53       	subi	r28, 0x31	; 49
     6e2:	df 4f       	sbci	r29, 0xFF	; 255
     6e4:	79 83       	std	Y+1, r23	; 0x01
     6e6:	68 83       	st	Y, r22
     6e8:	cf 5c       	subi	r28, 0xCF	; 207
     6ea:	d0 40       	sbci	r29, 0x00	; 0
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <ReachDestinationAvoidingNode+0xa4>
     6ee:	0f 92       	push	r0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	ad b7       	in	r26, 0x3d	; 61
     6f6:	be b7       	in	r27, 0x3e	; 62
     6f8:	12 96       	adiw	r26, 0x02	; 2
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
     6fe:	11 97       	sbiw	r26, 0x01	; 1
     700:	14 96       	adiw	r26, 0x04	; 4
     702:	7c 93       	st	X, r23
     704:	6e 93       	st	-X, r22
     706:	13 97       	sbiw	r26, 0x03	; 3
     708:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>


if(Yn=='A')
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	01 34       	cpi	r16, 0x41	; 65
     716:	69 f0       	breq	.+26     	; 0x732 <ReachDestinationAvoidingNode+0xe8>
{
	Yn=0;
}
else if(Yn=='B')
     718:	02 34       	cpi	r16, 0x42	; 66
     71a:	69 f0       	breq	.+26     	; 0x736 <ReachDestinationAvoidingNode+0xec>
{
	Yn=1;
}
else if(Yn=='C')
     71c:	03 34       	cpi	r16, 0x43	; 67
     71e:	69 f0       	breq	.+26     	; 0x73a <ReachDestinationAvoidingNode+0xf0>
{
	Yn=2;
}
else if(Yn=='D')
     720:	04 34       	cpi	r16, 0x44	; 68
     722:	69 f0       	breq	.+26     	; 0x73e <ReachDestinationAvoidingNode+0xf4>
{
	
	Yn=3;
}
else if(Yn=='E')
     724:	05 34       	cpi	r16, 0x45	; 69
     726:	69 f0       	breq	.+26     	; 0x742 <ReachDestinationAvoidingNode+0xf8>
{
	Yn=4;
}
else if(Yn=='F')
     728:	06 34       	cpi	r16, 0x46	; 70
     72a:	69 f0       	breq	.+26     	; 0x746 <ReachDestinationAvoidingNode+0xfc>
{
	Yn=5;
}
else if(Yn=='G')
     72c:	07 34       	cpi	r16, 0x47	; 71
     72e:	71 f4       	brne	.+28     	; 0x74c <ReachDestinationAvoidingNode+0x102>
     730:	0c c0       	rjmp	.+24     	; 0x74a <ReachDestinationAvoidingNode+0x100>
printf("%d\n",Yd);


if(Yn=='A')
{
	Yn=0;
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	0b c0       	rjmp	.+22     	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='B')
{
	Yn=1;
     736:	01 e0       	ldi	r16, 0x01	; 1
     738:	09 c0       	rjmp	.+18     	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='C')
{
	Yn=2;
     73a:	02 e0       	ldi	r16, 0x02	; 2
     73c:	07 c0       	rjmp	.+14     	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='D')
{
	
	Yn=3;
     73e:	03 e0       	ldi	r16, 0x03	; 3
     740:	05 c0       	rjmp	.+10     	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='E')
{
	Yn=4;
     742:	04 e0       	ldi	r16, 0x04	; 4
     744:	03 c0       	rjmp	.+6      	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='F')
{
	Yn=5;
     746:	05 e0       	ldi	r16, 0x05	; 5
     748:	01 c0       	rjmp	.+2      	; 0x74c <ReachDestinationAvoidingNode+0x102>
}
else if(Yn=='G')
{
	Yn=6;
     74a:	06 e0       	ldi	r16, 0x06	; 6
}
printf("%d\n",Yn);
     74c:	10 e0       	ldi	r17, 0x00	; 0
     74e:	00 d0       	rcall	.+0      	; 0x750 <ReachDestinationAvoidingNode+0x106>
     750:	0f 92       	push	r0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	ed b7       	in	r30, 0x3d	; 61
     758:	fe b7       	in	r31, 0x3e	; 62
     75a:	92 83       	std	Z+2, r25	; 0x02
     75c:	81 83       	std	Z+1, r24	; 0x01
     75e:	14 83       	std	Z+4, r17	; 0x04
     760:	03 83       	std	Z+3, r16	; 0x03
     762:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	82 e3       	ldi	r24, 0x32	; 50
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	01 97       	sbiw	r24, 0x01	; 1
		int A[50],B[50];
		int m =0;int n=0;
		int Qx=0;int Qy = 0;
		int t =0; int i;
		int total;int Path[50];
		for (i=0;i<50;i++)
     774:	f1 f7       	brne	.-4      	; 0x772 <ReachDestinationAvoidingNode+0x128>
     776:	9e 01       	movw	r18, r28
     778:	2f 5f       	subi	r18, 0xFF	; 255
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	c5 52       	subi	r28, 0x25	; 37
     77e:	df 4f       	sbci	r29, 0xFF	; 255
     780:	39 83       	std	Y+1, r19	; 0x01
     782:	28 83       	st	Y, r18
     784:	cb 5d       	subi	r28, 0xDB	; 219
     786:	d0 40       	sbci	r29, 0x00	; 0
     788:	be 01       	movw	r22, r28
     78a:	6b 59       	subi	r22, 0x9B	; 155
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	c7 52       	subi	r28, 0x27	; 39
     790:	df 4f       	sbci	r29, 0xFF	; 255
     792:	79 83       	std	Y+1, r23	; 0x01
     794:	68 83       	st	Y, r22
     796:	c9 5d       	subi	r28, 0xD9	; 217
     798:	d0 40       	sbci	r29, 0x00	; 0
	timer_init();
	lcd_port_config();	
	sei();
}

void   ReachDestinationAvoidingNode  (unsigned char Xd,unsigned char Yd,unsigned char Xn,unsigned char Yn)
     79a:	9b 01       	movw	r18, r22
     79c:	db 01       	movw	r26, r22
     79e:	c5 52       	subi	r28, 0x25	; 37
     7a0:	df 4f       	sbci	r29, 0xFF	; 255
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	cb 5d       	subi	r28, 0xDB	; 219
     7a8:	d0 40       	sbci	r29, 0x00	; 0
		}

		for(i=0;i<50;i++)
		{

			A[i]=99;
     7aa:	83 e6       	ldi	r24, 0x63	; 99
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	81 93       	st	Z+, r24
     7b0:	91 93       	st	Z+, r25
			B[i]=99;
     7b2:	8d 93       	st	X+, r24
     7b4:	9d 93       	st	X+, r25
		for (i=0;i<50;i++)
		{
			Path[i]=99;
		}

		for(i=0;i<50;i++)
     7b6:	e2 17       	cp	r30, r18
     7b8:	f3 07       	cpc	r31, r19
     7ba:	c9 f7       	brne	.-14     	; 0x7ae <ReachDestinationAvoidingNode+0x164>
		{

			A[i]=99;
			B[i]=99;
		}
		A[m]=Px;B[n]=Py;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	a7 96       	adiw	r28, 0x27	; 39
     7ca:	9f af       	sts	0x7f, r25
     7cc:	8e af       	sts	0x7e, r24
     7ce:	a7 97       	sbiw	r28, 0x27	; 39
 
		int Px=4,Py=1;
		int A[50],B[50];
		int m =0;int n=0;
		int Qx=0;int Qy = 0;
		int t =0; int i;
     7d0:	c7 53       	subi	r28, 0x37	; 55
     7d2:	df 4f       	sbci	r29, 0xFF	; 255
     7d4:	19 82       	std	Y+1, r1	; 0x01
     7d6:	18 82       	st	Y, r1
     7d8:	c9 5c       	subi	r28, 0xC9	; 201
     7da:	d0 40       	sbci	r29, 0x00	; 0
			A[i]=99;
			B[i]=99;
		}
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
     7dc:	44 24       	eor	r4, r4
     7de:	55 24       	eor	r5, r5
     7e0:	43 94       	inc	r4
     7e2:	22 24       	eor	r2, r2
     7e4:	33 24       	eor	r3, r3
     7e6:	23 94       	inc	r2
{
	Yn=6;
}
printf("%d\n",Yn);
 
		int Px=4,Py=1;
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	24 e0       	ldi	r18, 0x04	; 4
     7ee:	30 e0       	ldi	r19, 0x00	; 0
			B[i]=99;
		}
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
		while((Xd!=Px)||(Yd!=Py))
     7f0:	bb 24       	eor	r11, r11
				{
					Qx=Px-1;
					//printf("%d\n",Qx);

					hen:
					if((Qx!=Xn)||(Py!=Yn))
     7f2:	6e 2d       	mov	r22, r14
     7f4:	70 e0       	ldi	r23, 0x00	; 0
							Px=Qx;
							goto hen;
						}
						else
						{
							Py = Py+1;
     7f6:	c8 01       	movw	r24, r16
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	c9 52       	subi	r28, 0x29	; 41
     7fc:	df 4f       	sbci	r29, 0xFF	; 255
     7fe:	99 83       	std	Y+1, r25	; 0x01
     800:	88 83       	st	Y, r24
     802:	c7 5d       	subi	r28, 0xD7	; 215
     804:	d0 40       	sbci	r29, 0x00	; 0
     806:	c9 52       	subi	r28, 0x29	; 41
     808:	df 4f       	sbci	r29, 0xFF	; 255
     80a:	a8 81       	ld	r26, Y
     80c:	c7 5d       	subi	r28, 0xD7	; 215
     80e:	d0 40       	sbci	r29, 0x00	; 0
     810:	c8 52       	subi	r28, 0x28	; 40
     812:	df 4f       	sbci	r29, 0xFF	; 255
     814:	b8 81       	ld	r27, Y
     816:	c8 5d       	subi	r28, 0xD8	; 216
     818:	d0 40       	sbci	r29, 0x00	; 0
							Qx++;
     81a:	7b 01       	movw	r14, r22
     81c:	08 94       	sec
     81e:	e1 1c       	adc	r14, r1
     820:	f1 1c       	adc	r15, r1
							Px=Qx;
							goto hen;
						}
						else if(Py==8)
						{
							Py = Py-1;
     822:	97 e0       	ldi	r25, 0x07	; 7
     824:	cd 52       	subi	r28, 0x2D	; 45
     826:	df 4f       	sbci	r29, 0xFF	; 255
     828:	98 83       	st	Y, r25
     82a:	c3 5d       	subi	r28, 0xD3	; 211
     82c:	d0 40       	sbci	r29, 0x00	; 0
     82e:	cc 52       	subi	r28, 0x2C	; 44
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	18 82       	st	Y, r1
     834:	c4 5d       	subi	r28, 0xD4	; 212
     836:	d0 40       	sbci	r29, 0x00	; 0
					}
					else
					{
						if(Py==1)
						{
							Py = Py+1;
     838:	dd 24       	eor	r13, r13
     83a:	68 94       	set
     83c:	d1 f8       	bld	r13, 1
     83e:	cc 24       	eor	r12, r12
				{
					Qx=Px-1;
					//printf("%d\n",Qx);

					hen:
					if((Qx!=Xn)||(Py!=Yn))
     840:	c3 53       	subi	r28, 0x33	; 51
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	68 83       	st	Y, r22
     846:	cd 5c       	subi	r28, 0xCD	; 205
     848:	d0 40       	sbci	r29, 0x00	; 0
     84a:	c2 53       	subi	r28, 0x32	; 50
     84c:	df 4f       	sbci	r29, 0xFF	; 255
     84e:	78 83       	st	Y, r23
     850:	ce 5c       	subi	r28, 0xCE	; 206
     852:	d0 40       	sbci	r29, 0x00	; 0
							goto hen1;
						}
						else
						{
							Py = Py+1;
							Qx--;
     854:	4b 01       	movw	r8, r22
     856:	08 94       	sec
     858:	81 08       	sbc	r8, r1
     85a:	91 08       	sbc	r9, r1
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
		while((Xd!=Px)||(Yd!=Py))
		{
			while(Xd!=Px)
     85c:	cb 52       	subi	r28, 0x2B	; 43
     85e:	df 4f       	sbci	r29, 0xFF	; 255
     860:	a8 82       	st	Y, r10
     862:	c5 5d       	subi	r28, 0xD5	; 213
     864:	d0 40       	sbci	r29, 0x00	; 0
     866:	ca 52       	subi	r28, 0x2A	; 42
     868:	df 4f       	sbci	r29, 0xFF	; 255
     86a:	b8 82       	st	Y, r11
     86c:	c6 5d       	subi	r28, 0xD6	; 214
     86e:	d0 40       	sbci	r29, 0x00	; 0
			B[i]=99;
		}
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
		while((Xd!=Px)||(Yd!=Py))
     870:	fa c1       	rjmp	.+1012   	; 0xc66 <ReachDestinationAvoidingNode+0x61c>
     872:	cd 52       	subi	r28, 0x2D	; 45
     874:	df 4f       	sbci	r29, 0xFF	; 255
     876:	68 80       	ld	r6, Y
     878:	c3 5d       	subi	r28, 0xD3	; 211
     87a:	d0 40       	sbci	r29, 0x00	; 0
     87c:	cc 52       	subi	r28, 0x2C	; 44
     87e:	df 4f       	sbci	r29, 0xFF	; 255
     880:	78 80       	ld	r7, Y
     882:	c4 5d       	subi	r28, 0xD4	; 212
     884:	d0 40       	sbci	r29, 0x00	; 0
		{
			while(Xd!=Px)
			{

				if(Xd<Px)
     886:	a2 16       	cp	r10, r18
     888:	b3 06       	cpc	r11, r19
     88a:	0c f0       	brlt	.+2      	; 0x88e <ReachDestinationAvoidingNode+0x244>
     88c:	6f c0       	rjmp	.+222    	; 0x96c <ReachDestinationAvoidingNode+0x322>
				{
					Qx=Px-1;
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	30 40       	sbci	r19, 0x00	; 0
					//printf("%d\n",Qx);

					hen:
					if((Qx!=Xn)||(Py!=Yn))
     892:	62 17       	cp	r22, r18
     894:	73 07       	cpc	r23, r19
     896:	c9 f4       	brne	.+50     	; 0x8ca <ReachDestinationAvoidingNode+0x280>
     898:	40 17       	cp	r20, r16
     89a:	51 07       	cpc	r21, r17
     89c:	09 f4       	brne	.+2      	; 0x8a0 <ReachDestinationAvoidingNode+0x256>
     89e:	54 c0       	rjmp	.+168    	; 0x948 <ReachDestinationAvoidingNode+0x2fe>
     8a0:	c3 53       	subi	r28, 0x33	; 51
     8a2:	df 4f       	sbci	r29, 0xFF	; 255
     8a4:	28 81       	ld	r18, Y
     8a6:	cd 5c       	subi	r28, 0xCD	; 205
     8a8:	d0 40       	sbci	r29, 0x00	; 0
     8aa:	c2 53       	subi	r28, 0x32	; 50
     8ac:	df 4f       	sbci	r29, 0xFF	; 255
     8ae:	38 81       	ld	r19, Y
     8b0:	ce 5c       	subi	r28, 0xCE	; 206
     8b2:	d0 40       	sbci	r29, 0x00	; 0
     8b4:	c5 53       	subi	r28, 0x35	; 53
     8b6:	df 4f       	sbci	r29, 0xFF	; 255
     8b8:	48 83       	st	Y, r20
     8ba:	cb 5c       	subi	r28, 0xCB	; 203
     8bc:	d0 40       	sbci	r29, 0x00	; 0
     8be:	c4 53       	subi	r28, 0x34	; 52
     8c0:	df 4f       	sbci	r29, 0xFF	; 255
     8c2:	58 83       	st	Y, r21
     8c4:	cc 5c       	subi	r28, 0xCC	; 204
     8c6:	d0 40       	sbci	r29, 0x00	; 0
     8c8:	0a c0       	rjmp	.+20     	; 0x8de <ReachDestinationAvoidingNode+0x294>
     8ca:	c5 53       	subi	r28, 0x35	; 53
     8cc:	df 4f       	sbci	r29, 0xFF	; 255
     8ce:	48 83       	st	Y, r20
     8d0:	cb 5c       	subi	r28, 0xCB	; 203
     8d2:	d0 40       	sbci	r29, 0x00	; 0
     8d4:	c4 53       	subi	r28, 0x34	; 52
     8d6:	df 4f       	sbci	r29, 0xFF	; 255
     8d8:	58 83       	st	Y, r21
     8da:	cc 5c       	subi	r28, 0xCC	; 204
     8dc:	d0 40       	sbci	r29, 0x00	; 0
					{
						A[m]=Qx;B[n]=Py;
     8de:	c1 01       	movw	r24, r2
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	e1 e0       	ldi	r30, 0x01	; 1
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	ec 0f       	add	r30, r28
     8ea:	fd 1f       	adc	r31, r29
     8ec:	8e 0f       	add	r24, r30
     8ee:	9f 1f       	adc	r25, r31
     8f0:	fc 01       	movw	r30, r24
     8f2:	31 83       	std	Z+1, r19	; 0x01
     8f4:	20 83       	st	Z, r18
     8f6:	f2 01       	movw	r30, r4
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	85 e6       	ldi	r24, 0x65	; 101
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	8c 0f       	add	r24, r28
     902:	9d 1f       	adc	r25, r29
     904:	e8 0f       	add	r30, r24
     906:	f9 1f       	adc	r31, r25
     908:	c5 53       	subi	r28, 0x35	; 53
     90a:	df 4f       	sbci	r29, 0xFF	; 255
     90c:	98 81       	ld	r25, Y
     90e:	cb 5c       	subi	r28, 0xCB	; 203
     910:	d0 40       	sbci	r29, 0x00	; 0
     912:	90 83       	st	Z, r25
     914:	c4 53       	subi	r28, 0x34	; 52
     916:	df 4f       	sbci	r29, 0xFF	; 255
     918:	88 81       	ld	r24, Y
     91a:	cc 5c       	subi	r28, 0xCC	; 204
     91c:	d0 40       	sbci	r29, 0x00	; 0
     91e:	81 83       	std	Z+1, r24	; 0x01
						//    printf("%d   %d\n",A[m],B[n]);
						Px=Qx;
						m++;n++;t++;
     920:	08 94       	sec
     922:	21 1c       	adc	r2, r1
     924:	31 1c       	adc	r3, r1
     926:	08 94       	sec
     928:	41 1c       	adc	r4, r1
     92a:	51 1c       	adc	r5, r1
     92c:	c7 53       	subi	r28, 0x37	; 55
     92e:	df 4f       	sbci	r29, 0xFF	; 255
     930:	e8 81       	ld	r30, Y
     932:	f9 81       	ldd	r31, Y+1	; 0x01
     934:	c9 5c       	subi	r28, 0xC9	; 201
     936:	d0 40       	sbci	r29, 0x00	; 0
     938:	31 96       	adiw	r30, 0x01	; 1
     93a:	c7 53       	subi	r28, 0x37	; 55
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	f9 83       	std	Y+1, r31	; 0x01
     940:	e8 83       	st	Y, r30
     942:	c9 5c       	subi	r28, 0xC9	; 201
     944:	d0 40       	sbci	r29, 0x00	; 0
     946:	85 c0       	rjmp	.+266    	; 0xa52 <ReachDestinationAvoidingNode+0x408>
					}
					else
					{
						if(Py==1)
     948:	01 30       	cpi	r16, 0x01	; 1
     94a:	11 05       	cpc	r17, r1
     94c:	21 f4       	brne	.+8      	; 0x956 <ReachDestinationAvoidingNode+0x30c>
						{
							Py = Py+1;
							Qx++;
     94e:	97 01       	movw	r18, r14
					}
					else
					{
						if(Py==1)
						{
							Py = Py+1;
     950:	4d 2d       	mov	r20, r13
     952:	5c 2d       	mov	r21, r12
							Qx++;
							Px=Qx;
							goto hen;
     954:	9e cf       	rjmp	.-196    	; 0x892 <ReachDestinationAvoidingNode+0x248>
						}
						else if(Py==8)
     956:	08 30       	cpi	r16, 0x08	; 8
     958:	11 05       	cpc	r17, r1
     95a:	21 f4       	brne	.+8      	; 0x964 <ReachDestinationAvoidingNode+0x31a>
						{
							Py = Py-1;
							Qx++;
     95c:	97 01       	movw	r18, r14
							Px=Qx;
							goto hen;
						}
						else if(Py==8)
						{
							Py = Py-1;
     95e:	46 2d       	mov	r20, r6
     960:	57 2d       	mov	r21, r7
							Qx++;
							Px=Qx;
							goto hen;
     962:	97 cf       	rjmp	.-210    	; 0x892 <ReachDestinationAvoidingNode+0x248>
						}
						else
						{
							Py = Py+1;
     964:	4a 2f       	mov	r20, r26
     966:	5b 2f       	mov	r21, r27
							Qx++;
     968:	97 01       	movw	r18, r14
							Px=Qx;
							goto hen;
     96a:	93 cf       	rjmp	.-218    	; 0x892 <ReachDestinationAvoidingNode+0x248>
						}
					}
				}
				else if(Xd>Px)
     96c:	2a 15       	cp	r18, r10
     96e:	3b 05       	cpc	r19, r11
     970:	0c f0       	brlt	.+2      	; 0x974 <ReachDestinationAvoidingNode+0x32a>
     972:	6f c0       	rjmp	.+222    	; 0xa52 <ReachDestinationAvoidingNode+0x408>
				{
					Qx = Px+1;
     974:	2f 5f       	subi	r18, 0xFF	; 255
     976:	3f 4f       	sbci	r19, 0xFF	; 255
					//printf("%d\n",Qx);
					hen1:
					if((Qx!=Xn)||(Py!=Yn))
     978:	62 17       	cp	r22, r18
     97a:	73 07       	cpc	r23, r19
     97c:	c9 f4       	brne	.+50     	; 0x9b0 <ReachDestinationAvoidingNode+0x366>
     97e:	40 17       	cp	r20, r16
     980:	51 07       	cpc	r21, r17
     982:	09 f4       	brne	.+2      	; 0x986 <ReachDestinationAvoidingNode+0x33c>
     984:	54 c0       	rjmp	.+168    	; 0xa2e <ReachDestinationAvoidingNode+0x3e4>
     986:	c3 53       	subi	r28, 0x33	; 51
     988:	df 4f       	sbci	r29, 0xFF	; 255
     98a:	28 81       	ld	r18, Y
     98c:	cd 5c       	subi	r28, 0xCD	; 205
     98e:	d0 40       	sbci	r29, 0x00	; 0
     990:	c2 53       	subi	r28, 0x32	; 50
     992:	df 4f       	sbci	r29, 0xFF	; 255
     994:	38 81       	ld	r19, Y
     996:	ce 5c       	subi	r28, 0xCE	; 206
     998:	d0 40       	sbci	r29, 0x00	; 0
     99a:	c5 53       	subi	r28, 0x35	; 53
     99c:	df 4f       	sbci	r29, 0xFF	; 255
     99e:	48 83       	st	Y, r20
     9a0:	cb 5c       	subi	r28, 0xCB	; 203
     9a2:	d0 40       	sbci	r29, 0x00	; 0
     9a4:	c4 53       	subi	r28, 0x34	; 52
     9a6:	df 4f       	sbci	r29, 0xFF	; 255
     9a8:	58 83       	st	Y, r21
     9aa:	cc 5c       	subi	r28, 0xCC	; 204
     9ac:	d0 40       	sbci	r29, 0x00	; 0
     9ae:	0a c0       	rjmp	.+20     	; 0x9c4 <ReachDestinationAvoidingNode+0x37a>
     9b0:	c5 53       	subi	r28, 0x35	; 53
     9b2:	df 4f       	sbci	r29, 0xFF	; 255
     9b4:	48 83       	st	Y, r20
     9b6:	cb 5c       	subi	r28, 0xCB	; 203
     9b8:	d0 40       	sbci	r29, 0x00	; 0
     9ba:	c4 53       	subi	r28, 0x34	; 52
     9bc:	df 4f       	sbci	r29, 0xFF	; 255
     9be:	58 83       	st	Y, r21
     9c0:	cc 5c       	subi	r28, 0xCC	; 204
     9c2:	d0 40       	sbci	r29, 0x00	; 0
					{
						A[m] = Qx;B[n]=Py;
     9c4:	c1 01       	movw	r24, r2
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	e1 e0       	ldi	r30, 0x01	; 1
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ec 0f       	add	r30, r28
     9d0:	fd 1f       	adc	r31, r29
     9d2:	8e 0f       	add	r24, r30
     9d4:	9f 1f       	adc	r25, r31
     9d6:	fc 01       	movw	r30, r24
     9d8:	31 83       	std	Z+1, r19	; 0x01
     9da:	20 83       	st	Z, r18
     9dc:	f2 01       	movw	r30, r4
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	85 e6       	ldi	r24, 0x65	; 101
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	8c 0f       	add	r24, r28
     9e8:	9d 1f       	adc	r25, r29
     9ea:	e8 0f       	add	r30, r24
     9ec:	f9 1f       	adc	r31, r25
     9ee:	c5 53       	subi	r28, 0x35	; 53
     9f0:	df 4f       	sbci	r29, 0xFF	; 255
     9f2:	98 81       	ld	r25, Y
     9f4:	cb 5c       	subi	r28, 0xCB	; 203
     9f6:	d0 40       	sbci	r29, 0x00	; 0
     9f8:	90 83       	st	Z, r25
     9fa:	c4 53       	subi	r28, 0x34	; 52
     9fc:	df 4f       	sbci	r29, 0xFF	; 255
     9fe:	88 81       	ld	r24, Y
     a00:	cc 5c       	subi	r28, 0xCC	; 204
     a02:	d0 40       	sbci	r29, 0x00	; 0
     a04:	81 83       	std	Z+1, r24	; 0x01
						//       printf("%d   %d\n",A[m],B[n]);
						Px=Qx;
						m++;n++;t++;
     a06:	08 94       	sec
     a08:	21 1c       	adc	r2, r1
     a0a:	31 1c       	adc	r3, r1
     a0c:	08 94       	sec
     a0e:	41 1c       	adc	r4, r1
     a10:	51 1c       	adc	r5, r1
     a12:	c7 53       	subi	r28, 0x37	; 55
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	e8 81       	ld	r30, Y
     a18:	f9 81       	ldd	r31, Y+1	; 0x01
     a1a:	c9 5c       	subi	r28, 0xC9	; 201
     a1c:	d0 40       	sbci	r29, 0x00	; 0
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	c7 53       	subi	r28, 0x37	; 55
     a22:	df 4f       	sbci	r29, 0xFF	; 255
     a24:	f9 83       	std	Y+1, r31	; 0x01
     a26:	e8 83       	st	Y, r30
     a28:	c9 5c       	subi	r28, 0xC9	; 201
     a2a:	d0 40       	sbci	r29, 0x00	; 0
     a2c:	12 c0       	rjmp	.+36     	; 0xa52 <ReachDestinationAvoidingNode+0x408>
					}
					else
					{
						if(Py==1)
     a2e:	01 30       	cpi	r16, 0x01	; 1
     a30:	11 05       	cpc	r17, r1
     a32:	21 f4       	brne	.+8      	; 0xa3c <ReachDestinationAvoidingNode+0x3f2>
						{
							Py = Py+1;
							Qx--;
     a34:	94 01       	movw	r18, r8
					}
					else
					{
						if(Py==1)
						{
							Py = Py+1;
     a36:	4d 2d       	mov	r20, r13
     a38:	5c 2d       	mov	r21, r12
							Qx--;
							Px=Qx;
							goto hen1;
     a3a:	9e cf       	rjmp	.-196    	; 0x978 <ReachDestinationAvoidingNode+0x32e>
						}
						else if(Py==8)
     a3c:	08 30       	cpi	r16, 0x08	; 8
     a3e:	11 05       	cpc	r17, r1
     a40:	21 f4       	brne	.+8      	; 0xa4a <ReachDestinationAvoidingNode+0x400>
						{
							Py = Py-1;
							Qx--;
     a42:	94 01       	movw	r18, r8
							Px=Qx;
							goto hen1;
						}
						else if(Py==8)
						{
							Py = Py-1;
     a44:	46 2d       	mov	r20, r6
     a46:	57 2d       	mov	r21, r7
							Qx--;
							Px=Qx;
							goto hen1;
     a48:	97 cf       	rjmp	.-210    	; 0x978 <ReachDestinationAvoidingNode+0x32e>
						}
						else
						{
							Py = Py+1;
     a4a:	4a 2f       	mov	r20, r26
     a4c:	5b 2f       	mov	r21, r27
							Qx--;
     a4e:	94 01       	movw	r18, r8
							Px=Qx;
							goto hen1;
     a50:	93 cf       	rjmp	.-218    	; 0x978 <ReachDestinationAvoidingNode+0x32e>
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
		while((Xd!=Px)||(Yd!=Py))
		{
			while(Xd!=Px)
     a52:	a2 16       	cp	r10, r18
     a54:	b3 06       	cpc	r11, r19
     a56:	09 f0       	breq	.+2      	; 0xa5a <ReachDestinationAvoidingNode+0x410>
     a58:	16 cf       	rjmp	.-468    	; 0x886 <ReachDestinationAvoidingNode+0x23c>
     a5a:	cb 52       	subi	r28, 0x2B	; 43
     a5c:	df 4f       	sbci	r29, 0xFF	; 255
     a5e:	28 81       	ld	r18, Y
     a60:	c5 5d       	subi	r28, 0xD5	; 213
     a62:	d0 40       	sbci	r29, 0x00	; 0
     a64:	ca 52       	subi	r28, 0x2A	; 42
     a66:	df 4f       	sbci	r29, 0xFF	; 255
     a68:	38 81       	ld	r19, Y
     a6a:	c6 5d       	subi	r28, 0xD6	; 214
     a6c:	d0 40       	sbci	r29, 0x00	; 0

					}
				}
			}

			while(Yd!=Py)
     a6e:	c1 53       	subi	r28, 0x31	; 49
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	88 81       	ld	r24, Y
     a74:	99 81       	ldd	r25, Y+1	; 0x01
     a76:	cf 5c       	subi	r28, 0xCF	; 207
     a78:	d0 40       	sbci	r29, 0x00	; 0
     a7a:	84 17       	cp	r24, r20
     a7c:	95 07       	cpc	r25, r21
     a7e:	09 f4       	brne	.+2      	; 0xa82 <ReachDestinationAvoidingNode+0x438>
     a80:	f2 c0       	rjmp	.+484    	; 0xc66 <ReachDestinationAvoidingNode+0x61c>
							goto hen2;
						}
						else if(Qy==8)
						{
							Px = Px-1;
							Qy++;
     a82:	e9 e0       	ldi	r30, 0x09	; 9
     a84:	f0 e0       	ldi	r31, 0x00	; 0

			while(Yd!=Py)
			{
				if(Yd<Py)
				{
					Qy=Py-1;
     a86:	c5 53       	subi	r28, 0x35	; 53
     a88:	df 4f       	sbci	r29, 0xFF	; 255
     a8a:	08 83       	st	Y, r16
     a8c:	cb 5c       	subi	r28, 0xCB	; 203
     a8e:	d0 40       	sbci	r29, 0x00	; 0
     a90:	c4 53       	subi	r28, 0x34	; 52
     a92:	df 4f       	sbci	r29, 0xFF	; 255
     a94:	18 83       	st	Y, r17
     a96:	cc 5c       	subi	r28, 0xCC	; 204
     a98:	d0 40       	sbci	r29, 0x00	; 0
							goto hen3;
						}
						else
						{
							Px = Px+1;
							Qy--;
     a9a:	38 01       	movw	r6, r16
     a9c:	08 94       	sec
     a9e:	61 08       	sbc	r6, r1
     aa0:	71 08       	sbc	r7, r1
					else
					{
						if(Qy==1)
						{
							Px = Px+1;
							Qy--;
     aa2:	cf 52       	subi	r28, 0x2F	; 47
     aa4:	df 4f       	sbci	r29, 0xFF	; 255
     aa6:	28 81       	ld	r18, Y
     aa8:	39 81       	ldd	r19, Y+1	; 0x01
     aaa:	c1 5d       	subi	r28, 0xD1	; 209
     aac:	d0 40       	sbci	r29, 0x00	; 0
     aae:	c1 52       	subi	r28, 0x21	; 33
     ab0:	df 4f       	sbci	r29, 0xFF	; 255
     ab2:	a8 83       	st	Y, r26
     ab4:	cf 5d       	subi	r28, 0xDF	; 223
     ab6:	d0 40       	sbci	r29, 0x00	; 0
     ab8:	c0 52       	subi	r28, 0x20	; 32
     aba:	df 4f       	sbci	r29, 0xFF	; 255
     abc:	b8 83       	st	Y, r27
     abe:	c0 5e       	subi	r28, 0xE0	; 224
     ac0:	d0 40       	sbci	r29, 0x00	; 0
				}
			}

			while(Yd!=Py)
			{
				if(Yd<Py)
     ac2:	c1 53       	subi	r28, 0x31	; 49
     ac4:	df 4f       	sbci	r29, 0xFF	; 255
     ac6:	a8 81       	ld	r26, Y
     ac8:	b9 81       	ldd	r27, Y+1	; 0x01
     aca:	cf 5c       	subi	r28, 0xCF	; 207
     acc:	d0 40       	sbci	r29, 0x00	; 0
     ace:	a4 17       	cp	r26, r20
     ad0:	b5 07       	cpc	r27, r21
     ad2:	0c f0       	brlt	.+2      	; 0xad6 <ReachDestinationAvoidingNode+0x48c>
     ad4:	57 c0       	rjmp	.+174    	; 0xb84 <ReachDestinationAvoidingNode+0x53a>
				{
					Qy=Py-1;
     ad6:	41 50       	subi	r20, 0x01	; 1
     ad8:	50 40       	sbci	r21, 0x00	; 0
					//printf("%d\n",Qy);
					hen2:
					if((Qy!=Yn)||(Px!=Xn))
     ada:	04 17       	cp	r16, r20
     adc:	15 07       	cpc	r17, r21
     ade:	69 f4       	brne	.+26     	; 0xafa <ReachDestinationAvoidingNode+0x4b0>
     ae0:	26 17       	cp	r18, r22
     ae2:	37 07       	cpc	r19, r23
     ae4:	b9 f1       	breq	.+110    	; 0xb54 <ReachDestinationAvoidingNode+0x50a>

			while(Yd!=Py)
			{
				if(Yd<Py)
				{
					Qy=Py-1;
     ae6:	c5 53       	subi	r28, 0x35	; 53
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	48 81       	ld	r20, Y
     aec:	cb 5c       	subi	r28, 0xCB	; 203
     aee:	d0 40       	sbci	r29, 0x00	; 0
     af0:	c4 53       	subi	r28, 0x34	; 52
     af2:	df 4f       	sbci	r29, 0xFF	; 255
     af4:	58 81       	ld	r21, Y
     af6:	cc 5c       	subi	r28, 0xCC	; 204
     af8:	d0 40       	sbci	r29, 0x00	; 0
					//printf("%d\n",Qy);
					hen2:
					if((Qy!=Yn)||(Px!=Xn))
					{
						A[m]=Px;B[n]=Qy;
     afa:	d1 01       	movw	r26, r2
     afc:	aa 0f       	add	r26, r26
     afe:	bb 1f       	adc	r27, r27
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	8c 0f       	add	r24, r28
     b06:	9d 1f       	adc	r25, r29
     b08:	8a 0f       	add	r24, r26
     b0a:	9b 1f       	adc	r25, r27
     b0c:	dc 01       	movw	r26, r24
     b0e:	2d 93       	st	X+, r18
     b10:	3c 93       	st	X, r19
     b12:	c2 01       	movw	r24, r4
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	a5 e6       	ldi	r26, 0x65	; 101
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	ac 0f       	add	r26, r28
     b1e:	bd 1f       	adc	r27, r29
     b20:	8a 0f       	add	r24, r26
     b22:	9b 1f       	adc	r25, r27
     b24:	dc 01       	movw	r26, r24
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	5c 93       	st	X, r21
     b2a:	4e 93       	st	-X, r20
						//    printf("%d   %d\n",A[m],B[n]);
						Py=Qy;
						m++;n++;t++;
     b2c:	08 94       	sec
     b2e:	21 1c       	adc	r2, r1
     b30:	31 1c       	adc	r3, r1
     b32:	08 94       	sec
     b34:	41 1c       	adc	r4, r1
     b36:	51 1c       	adc	r5, r1
     b38:	c7 53       	subi	r28, 0x37	; 55
     b3a:	df 4f       	sbci	r29, 0xFF	; 255
     b3c:	88 81       	ld	r24, Y
     b3e:	99 81       	ldd	r25, Y+1	; 0x01
     b40:	c9 5c       	subi	r28, 0xC9	; 201
     b42:	d0 40       	sbci	r29, 0x00	; 0
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	c7 53       	subi	r28, 0x37	; 55
     b48:	df 4f       	sbci	r29, 0xFF	; 255
     b4a:	99 83       	std	Y+1, r25	; 0x01
     b4c:	88 83       	st	Y, r24
     b4e:	c9 5c       	subi	r28, 0xC9	; 201
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	75 c0       	rjmp	.+234    	; 0xc3e <ReachDestinationAvoidingNode+0x5f4>
					}
					else
					{
						if(Qy==1)
     b54:	01 30       	cpi	r16, 0x01	; 1
     b56:	11 05       	cpc	r17, r1
     b58:	29 f4       	brne	.+10     	; 0xb64 <ReachDestinationAvoidingNode+0x51a>
						{
							Px = Px+1;
     b5a:	2f 5f       	subi	r18, 0xFF	; 255
     b5c:	3f 4f       	sbci	r19, 0xFF	; 255
							Qy++;
     b5e:	42 e0       	ldi	r20, 0x02	; 2
     b60:	50 e0       	ldi	r21, 0x00	; 0
							Py=Qy;
							goto hen2;
     b62:	cb cf       	rjmp	.-106    	; 0xafa <ReachDestinationAvoidingNode+0x4b0>
						}
						else if(Qy==8)
     b64:	08 30       	cpi	r16, 0x08	; 8
     b66:	11 05       	cpc	r17, r1
     b68:	21 f4       	brne	.+8      	; 0xb72 <ReachDestinationAvoidingNode+0x528>
						{
							Px = Px-1;
     b6a:	21 50       	subi	r18, 0x01	; 1
     b6c:	30 40       	sbci	r19, 0x00	; 0
							Qy++;
     b6e:	af 01       	movw	r20, r30
							Py=Qy;
							goto hen2;
     b70:	c4 cf       	rjmp	.-120    	; 0xafa <ReachDestinationAvoidingNode+0x4b0>
						}
						else
						{
							Px = Px+1;
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
							Qy++;
     b76:	c9 52       	subi	r28, 0x29	; 41
     b78:	df 4f       	sbci	r29, 0xFF	; 255
     b7a:	48 81       	ld	r20, Y
     b7c:	59 81       	ldd	r21, Y+1	; 0x01
     b7e:	c7 5d       	subi	r28, 0xD7	; 215
     b80:	d0 40       	sbci	r29, 0x00	; 0
     b82:	bb cf       	rjmp	.-138    	; 0xafa <ReachDestinationAvoidingNode+0x4b0>
							Py=Qy;
							goto hen2;
						}
					}
				}
				else if(Yd>Py)
     b84:	c1 53       	subi	r28, 0x31	; 49
     b86:	df 4f       	sbci	r29, 0xFF	; 255
     b88:	a8 81       	ld	r26, Y
     b8a:	b9 81       	ldd	r27, Y+1	; 0x01
     b8c:	cf 5c       	subi	r28, 0xCF	; 207
     b8e:	d0 40       	sbci	r29, 0x00	; 0
     b90:	4a 17       	cp	r20, r26
     b92:	5b 07       	cpc	r21, r27
     b94:	0c f0       	brlt	.+2      	; 0xb98 <ReachDestinationAvoidingNode+0x54e>
     b96:	53 c0       	rjmp	.+166    	; 0xc3e <ReachDestinationAvoidingNode+0x5f4>
				{
					Qy = Py+1;
     b98:	4f 5f       	subi	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
					//printf("%d\n",Qy);
					hen3:
					if((Qy!=Yn)||(Px!=Xn))
     b9c:	04 17       	cp	r16, r20
     b9e:	15 07       	cpc	r17, r21
     ba0:	69 f4       	brne	.+26     	; 0xbbc <ReachDestinationAvoidingNode+0x572>
     ba2:	26 17       	cp	r18, r22
     ba4:	37 07       	cpc	r19, r23
     ba6:	b9 f1       	breq	.+110    	; 0xc16 <ReachDestinationAvoidingNode+0x5cc>
						}
					}
				}
				else if(Yd>Py)
				{
					Qy = Py+1;
     ba8:	c5 53       	subi	r28, 0x35	; 53
     baa:	df 4f       	sbci	r29, 0xFF	; 255
     bac:	48 81       	ld	r20, Y
     bae:	cb 5c       	subi	r28, 0xCB	; 203
     bb0:	d0 40       	sbci	r29, 0x00	; 0
     bb2:	c4 53       	subi	r28, 0x34	; 52
     bb4:	df 4f       	sbci	r29, 0xFF	; 255
     bb6:	58 81       	ld	r21, Y
     bb8:	cc 5c       	subi	r28, 0xCC	; 204
     bba:	d0 40       	sbci	r29, 0x00	; 0
					//printf("%d\n",Qy);
					hen3:
					if((Qy!=Yn)||(Px!=Xn))
					{
						A[m] = Px;B[n]=Qy;
     bbc:	c1 01       	movw	r24, r2
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	a1 e0       	ldi	r26, 0x01	; 1
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ac 0f       	add	r26, r28
     bc8:	bd 1f       	adc	r27, r29
     bca:	8a 0f       	add	r24, r26
     bcc:	9b 1f       	adc	r25, r27
     bce:	dc 01       	movw	r26, r24
     bd0:	2d 93       	st	X+, r18
     bd2:	3c 93       	st	X, r19
     bd4:	c2 01       	movw	r24, r4
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	a5 e6       	ldi	r26, 0x65	; 101
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ac 0f       	add	r26, r28
     be0:	bd 1f       	adc	r27, r29
     be2:	8a 0f       	add	r24, r26
     be4:	9b 1f       	adc	r25, r27
     be6:	dc 01       	movw	r26, r24
     be8:	11 96       	adiw	r26, 0x01	; 1
     bea:	5c 93       	st	X, r21
     bec:	4e 93       	st	-X, r20
						//printf("%d   %d\n",A[m],B[n]);
						Py=Qy;
						m++;n++;t++;
     bee:	08 94       	sec
     bf0:	21 1c       	adc	r2, r1
     bf2:	31 1c       	adc	r3, r1
     bf4:	08 94       	sec
     bf6:	41 1c       	adc	r4, r1
     bf8:	51 1c       	adc	r5, r1
     bfa:	c7 53       	subi	r28, 0x37	; 55
     bfc:	df 4f       	sbci	r29, 0xFF	; 255
     bfe:	88 81       	ld	r24, Y
     c00:	99 81       	ldd	r25, Y+1	; 0x01
     c02:	c9 5c       	subi	r28, 0xC9	; 201
     c04:	d0 40       	sbci	r29, 0x00	; 0
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	c7 53       	subi	r28, 0x37	; 55
     c0a:	df 4f       	sbci	r29, 0xFF	; 255
     c0c:	99 83       	std	Y+1, r25	; 0x01
     c0e:	88 83       	st	Y, r24
     c10:	c9 5c       	subi	r28, 0xC9	; 201
     c12:	d0 40       	sbci	r29, 0x00	; 0
     c14:	14 c0       	rjmp	.+40     	; 0xc3e <ReachDestinationAvoidingNode+0x5f4>
					}
					else
					{
						if(Qy==1)
     c16:	01 30       	cpi	r16, 0x01	; 1
     c18:	11 05       	cpc	r17, r1
     c1a:	29 f4       	brne	.+10     	; 0xc26 <ReachDestinationAvoidingNode+0x5dc>
						{
							Px = Px+1;
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
							Qy--;
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
							Py=Qy;
							goto hen3;
     c24:	cb cf       	rjmp	.-106    	; 0xbbc <ReachDestinationAvoidingNode+0x572>
						}
						else if(Qy==8)
     c26:	08 30       	cpi	r16, 0x08	; 8
     c28:	11 05       	cpc	r17, r1
     c2a:	29 f4       	brne	.+10     	; 0xc36 <ReachDestinationAvoidingNode+0x5ec>
						{
							Px = Px-1;
     c2c:	21 50       	subi	r18, 0x01	; 1
     c2e:	30 40       	sbci	r19, 0x00	; 0
							Qy--;
     c30:	47 e0       	ldi	r20, 0x07	; 7
     c32:	50 e0       	ldi	r21, 0x00	; 0
							Py=Qy;
							goto hen3;
     c34:	c3 cf       	rjmp	.-122    	; 0xbbc <ReachDestinationAvoidingNode+0x572>
						}
						else
						{
							Px = Px+1;
     c36:	2f 5f       	subi	r18, 0xFF	; 255
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
							Qy--;
     c3a:	a3 01       	movw	r20, r6
     c3c:	bf cf       	rjmp	.-130    	; 0xbbc <ReachDestinationAvoidingNode+0x572>

					}
				}
			}

			while(Yd!=Py)
     c3e:	c1 53       	subi	r28, 0x31	; 49
     c40:	df 4f       	sbci	r29, 0xFF	; 255
     c42:	a8 81       	ld	r26, Y
     c44:	b9 81       	ldd	r27, Y+1	; 0x01
     c46:	cf 5c       	subi	r28, 0xCF	; 207
     c48:	d0 40       	sbci	r29, 0x00	; 0
     c4a:	a4 17       	cp	r26, r20
     c4c:	b5 07       	cpc	r27, r21
     c4e:	09 f0       	breq	.+2      	; 0xc52 <ReachDestinationAvoidingNode+0x608>
     c50:	38 cf       	rjmp	.-400    	; 0xac2 <ReachDestinationAvoidingNode+0x478>
     c52:	c1 52       	subi	r28, 0x21	; 33
     c54:	df 4f       	sbci	r29, 0xFF	; 255
     c56:	a8 81       	ld	r26, Y
     c58:	cf 5d       	subi	r28, 0xDF	; 223
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	c0 52       	subi	r28, 0x20	; 32
     c5e:	df 4f       	sbci	r29, 0xFF	; 255
     c60:	b8 81       	ld	r27, Y
     c62:	c0 5e       	subi	r28, 0xE0	; 224
     c64:	d0 40       	sbci	r29, 0x00	; 0
			B[i]=99;
		}
		A[m]=Px;B[n]=Py;
		//printf("%d   %d\n",A[m],B[n]);
		m++;n++;
		while((Xd!=Px)||(Yd!=Py))
     c66:	cf 52       	subi	r28, 0x2F	; 47
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	b9 82       	std	Y+1, r11	; 0x01
     c6c:	a8 82       	st	Y, r10
     c6e:	c1 5d       	subi	r28, 0xD1	; 209
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	a2 16       	cp	r10, r18
     c74:	b3 06       	cpc	r11, r19
     c76:	09 f0       	breq	.+2      	; 0xc7a <ReachDestinationAvoidingNode+0x630>
     c78:	fc cd       	rjmp	.-1032   	; 0x872 <ReachDestinationAvoidingNode+0x228>
     c7a:	c1 53       	subi	r28, 0x31	; 49
     c7c:	df 4f       	sbci	r29, 0xFF	; 255
     c7e:	e8 81       	ld	r30, Y
     c80:	f9 81       	ldd	r31, Y+1	; 0x01
     c82:	cf 5c       	subi	r28, 0xCF	; 207
     c84:	d0 40       	sbci	r29, 0x00	; 0
     c86:	4e 17       	cp	r20, r30
     c88:	5f 07       	cpc	r21, r31
     c8a:	09 f0       	breq	.+2      	; 0xc8e <ReachDestinationAvoidingNode+0x644>
     c8c:	fa ce       	rjmp	.-524    	; 0xa82 <ReachDestinationAvoidingNode+0x438>
					}
				}
			}
		}
		 
		for(i=0;i<=t;i++)
     c8e:	c7 53       	subi	r28, 0x37	; 55
     c90:	df 4f       	sbci	r29, 0xFF	; 255
     c92:	28 81       	ld	r18, Y
     c94:	39 81       	ldd	r19, Y+1	; 0x01
     c96:	c9 5c       	subi	r28, 0xC9	; 201
     c98:	d0 40       	sbci	r29, 0x00	; 0
     c9a:	33 23       	and	r19, r19
     c9c:	0c f4       	brge	.+2      	; 0xca0 <ReachDestinationAvoidingNode+0x656>
     c9e:	42 c0       	rjmp	.+132    	; 0xd24 <ReachDestinationAvoidingNode+0x6da>
     ca0:	00 e0       	ldi	r16, 0x00	; 0
     ca2:	10 e0       	ldi	r17, 0x00	; 0
		{
			total = ((A[i]-1)*7)+B[i];
			Path[i]=total;
			printf("%d\n",total);
     ca4:	0f 2e       	mov	r0, r31
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ef 2e       	mov	r14, r31
     caa:	f2 e0       	ldi	r31, 0x02	; 2
     cac:	ff 2e       	mov	r15, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	c5 52       	subi	r28, 0x25	; 37
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	a8 80       	ld	r10, Y
     cb6:	b9 80       	ldd	r11, Y+1	; 0x01
     cb8:	cb 5d       	subi	r28, 0xDB	; 219
     cba:	d0 40       	sbci	r29, 0x00	; 0
     cbc:	49 01       	movw	r8, r18
     cbe:	c7 52       	subi	r28, 0x27	; 39
     cc0:	df 4f       	sbci	r29, 0xFF	; 255
     cc2:	c8 80       	ld	r12, Y
     cc4:	d9 80       	ldd	r13, Y+1	; 0x01
     cc6:	c9 5d       	subi	r28, 0xD9	; 217
     cc8:	d0 40       	sbci	r29, 0x00	; 0
			}
		}
		 
		for(i=0;i<=t;i++)
		{
			total = ((A[i]-1)*7)+B[i];
     cca:	d5 01       	movw	r26, r10
     ccc:	8d 91       	ld	r24, X+
     cce:	9d 91       	ld	r25, X+
     cd0:	5d 01       	movw	r10, r26
     cd2:	f6 01       	movw	r30, r12
     cd4:	41 91       	ld	r20, Z+
     cd6:	51 91       	ld	r21, Z+
     cd8:	6f 01       	movw	r12, r30
			Path[i]=total;
			printf("%d\n",total);
     cda:	00 d0       	rcall	.+0      	; 0xcdc <ReachDestinationAvoidingNode+0x692>
     cdc:	0f 92       	push	r0
     cde:	ad b7       	in	r26, 0x3d	; 61
     ce0:	be b7       	in	r27, 0x3e	; 62
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	fc 92       	st	X, r15
     ce6:	ee 92       	st	-X, r14
     ce8:	11 97       	sbiw	r26, 0x01	; 1
			}
		}
		 
		for(i=0;i<=t;i++)
		{
			total = ((A[i]-1)*7)+B[i];
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9c 01       	movw	r18, r24
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	f9 01       	movw	r30, r18
     cfc:	e8 1b       	sub	r30, r24
     cfe:	f9 0b       	sbc	r31, r25
     d00:	cf 01       	movw	r24, r30
     d02:	84 0f       	add	r24, r20
     d04:	95 1f       	adc	r25, r21
			Path[i]=total;
			printf("%d\n",total);
     d06:	14 96       	adiw	r26, 0x04	; 4
     d08:	9c 93       	st	X, r25
     d0a:	8e 93       	st	-X, r24
     d0c:	13 97       	sbiw	r26, 0x03	; 3
     d0e:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
					}
				}
			}
		}
		 
		for(i=0;i<=t;i++)
     d12:	0f 5f       	subi	r16, 0xFF	; 255
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	80 16       	cp	r8, r16
     d20:	91 06       	cpc	r9, r17
     d22:	9c f6       	brge	.-90     	; 0xcca <ReachDestinationAvoidingNode+0x680>
			total = ((A[i]-1)*7)+B[i];
			Path[i]=total;
			printf("%d\n",total);
		}
		
		int Length =t+1;
     d24:	c7 53       	subi	r28, 0x37	; 55
     d26:	df 4f       	sbci	r29, 0xFF	; 255
     d28:	08 81       	ld	r16, Y
     d2a:	19 81       	ldd	r17, Y+1	; 0x01
     d2c:	c9 5c       	subi	r28, 0xC9	; 201
     d2e:	d0 40       	sbci	r29, 0x00	; 0
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
		printf("\n %d \n ",Length);
     d34:	00 d0       	rcall	.+0      	; 0xd36 <ReachDestinationAvoidingNode+0x6ec>
     d36:	0f 92       	push	r0
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	ad b7       	in	r26, 0x3d	; 61
     d3e:	be b7       	in	r27, 0x3e	; 62
     d40:	12 96       	adiw	r26, 0x02	; 2
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
     d46:	11 97       	sbiw	r26, 0x01	; 1
     d48:	14 96       	adiw	r26, 0x04	; 4
     d4a:	1c 93       	st	X, r17
     d4c:	0e 93       	st	-X, r16
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
	int start;
	start=45;
	int pos;
	pos=start;
	int b,c,d,e;
	int f,a[Length];
     d54:	00 0f       	add	r16, r16
     d56:	11 1f       	adc	r17, r17
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	ed b7       	in	r30, 0x3d	; 61
     d62:	fe b7       	in	r31, 0x3e	; 62
     d64:	e0 1b       	sub	r30, r16
     d66:	f1 0b       	sbc	r31, r17
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	fe bf       	out	0x3e, r31	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	ed bf       	out	0x3d, r30	; 61
     d72:	8d b7       	in	r24, 0x3d	; 61
     d74:	9e b7       	in	r25, 0x3e	; 62
     d76:	01 96       	adiw	r24, 0x01	; 1
	f=Length-1;
	m=0;  //for the number of turns
	for (i=0;i<f;i++)
     d78:	c7 53       	subi	r28, 0x37	; 55
     d7a:	df 4f       	sbci	r29, 0xFF	; 255
     d7c:	28 81       	ld	r18, Y
     d7e:	39 81       	ldd	r19, Y+1	; 0x01
     d80:	c9 5c       	subi	r28, 0xC9	; 201
     d82:	d0 40       	sbci	r29, 0x00	; 0
     d84:	12 16       	cp	r1, r18
     d86:	13 06       	cpc	r1, r19
     d88:	0c f0       	brlt	.+2      	; 0xd8c <ReachDestinationAvoidingNode+0x742>
     d8a:	90 c0       	rjmp	.+288    	; 0xeac <ReachDestinationAvoidingNode+0x862>
	timer_init();
	lcd_port_config();	
	sei();
}

void   ReachDestinationAvoidingNode  (unsigned char Xd,unsigned char Yd,unsigned char Xn,unsigned char Yn)
     d8c:	88 24       	eor	r8, r8
     d8e:	99 24       	eor	r9, r9
     d90:	68 94       	set
     d92:	81 f8       	bld	r8, 1
     d94:	88 0e       	add	r8, r24
     d96:	99 1e       	adc	r9, r25
		printf("\n %d \n ",Length);
		
	int start;
	start=45;
	int pos;
	pos=start;
     d98:	0f 2e       	mov	r0, r31
     d9a:	fd e2       	ldi	r31, 0x2D	; 45
     d9c:	cf 2e       	mov	r12, r31
     d9e:	dd 24       	eor	r13, r13
     da0:	f0 2d       	mov	r31, r0
	int b,c,d,e;
	int f,a[Length];
	f=Length-1;
	m=0;  //for the number of turns
	for (i=0;i<f;i++)
     da2:	aa 24       	eor	r10, r10
     da4:	bb 24       	eor	r11, r11
     da6:	86 01       	movw	r16, r12
     da8:	39 01       	movw	r6, r18
		e=pos-1;
		b=pos+1;
		c=pos+7;
		d=pos-7;

		if(a[i+1]==b)
     daa:	08 94       	sec
     dac:	a1 1c       	adc	r10, r1
     dae:	b1 1c       	adc	r11, r1
     db0:	d4 01       	movw	r26, r8
     db2:	cd 90       	ld	r12, X+
     db4:	dd 90       	ld	r13, X+
     db6:	4d 01       	movw	r8, r26
	m=0;  //for the number of turns
	for (i=0;i<f;i++)
	{

		e=pos-1;
		b=pos+1;
     db8:	c8 01       	movw	r24, r16
     dba:	01 96       	adiw	r24, 0x01	; 1
		c=pos+7;
		d=pos-7;

		if(a[i+1]==b)
     dbc:	c8 16       	cp	r12, r24
     dbe:	d9 06       	cpc	r13, r25
     dc0:	61 f5       	brne	.+88     	; 0xe1a <ReachDestinationAvoidingNode+0x7d0>
		{
			Right();
     dc2:	0e 94 93 02 	call	0x526	; 0x526 <Right>
     dc6:	6f ef       	ldi	r22, 0xFF	; 255
     dc8:	7f e7       	ldi	r23, 0x7F	; 127
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	61 50       	subi	r22, 0x01	; 1
     dce:	70 40       	sbci	r23, 0x00	; 0
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <ReachDestinationAvoidingNode+0x782>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <ReachDestinationAvoidingNode+0x78c>
     dd6:	00 00       	nop
			_delay_ms(100);
			do 
			{
				print_sensor(1,1,1);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				print_sensor(1,5,2);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	65 e0       	ldi	r22, 0x05	; 5
     de6:	42 e0       	ldi	r20, 0x02	; 2
     de8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				print_sensor(1,9,3);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	69 e0       	ldi	r22, 0x09	; 9
     df0:	43 e0       	ldi	r20, 0x03	; 3
     df2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				
				Forward();
     df6:	0e 94 9b 02 	call	0x536	; 0x536 <Forward>
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
     dfa:	80 91 0d 02 	lds	r24, 0x020D
     dfe:	84 32       	cpi	r24, 0x24	; 36
     e00:	40 f0       	brcs	.+16     	; 0xe12 <ReachDestinationAvoidingNode+0x7c8>
     e02:	80 91 0c 02 	lds	r24, 0x020C
     e06:	84 32       	cpi	r24, 0x24	; 36
     e08:	20 f0       	brcs	.+8      	; 0xe12 <ReachDestinationAvoidingNode+0x7c8>
     e0a:	80 91 12 02 	lds	r24, 0x0212
     e0e:	84 32       	cpi	r24, 0x24	; 36
     e10:	18 f7       	brcc	.-58     	; 0xdd8 <ReachDestinationAvoidingNode+0x78e>
			
			pos=pos+1;
			m++;
			turn();
     e12:	0e 94 1b 02 	call	0x436	; 0x436 <turn>
				print_sensor(1,9,3);
				
				Forward();
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
			
			pos=pos+1;
     e16:	86 01       	movw	r16, r12
     e18:	43 c0       	rjmp	.+134    	; 0xea0 <ReachDestinationAvoidingNode+0x856>
	f=Length-1;
	m=0;  //for the number of turns
	for (i=0;i<f;i++)
	{

		e=pos-1;
     e1a:	78 01       	movw	r14, r16
     e1c:	08 94       	sec
     e1e:	e1 08       	sbc	r14, r1
     e20:	f1 08       	sbc	r15, r1
			pos=pos+1;
			m++;
			turn();
		}

		else if(a[i+1]==e)
     e22:	ec 14       	cp	r14, r12
     e24:	fd 04       	cpc	r15, r13
     e26:	61 f5       	brne	.+88     	; 0xe80 <ReachDestinationAvoidingNode+0x836>
		{
			Left();
     e28:	0e 94 8b 02 	call	0x516	; 0x516 <Left>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f e7       	ldi	r25, 0x7F	; 127
     e30:	a4 e0       	ldi	r26, 0x04	; 4
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	90 40       	sbci	r25, 0x00	; 0
     e36:	a0 40       	sbci	r26, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <ReachDestinationAvoidingNode+0x7e8>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <ReachDestinationAvoidingNode+0x7f2>
     e3c:	00 00       	nop
			_delay_ms(100);
			do 
			{
				
				print_sensor(1,1,1);
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				print_sensor(1,5,2);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	65 e0       	ldi	r22, 0x05	; 5
     e4c:	42 e0       	ldi	r20, 0x02	; 2
     e4e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				print_sensor(1,9,3);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	69 e0       	ldi	r22, 0x09	; 9
     e56:	43 e0       	ldi	r20, 0x03	; 3
     e58:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <print_sensor>
				
				Forward();
     e5c:	0e 94 9b 02 	call	0x536	; 0x536 <Forward>
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
     e60:	80 91 0d 02 	lds	r24, 0x020D
     e64:	84 32       	cpi	r24, 0x24	; 36
     e66:	40 f0       	brcs	.+16     	; 0xe78 <ReachDestinationAvoidingNode+0x82e>
     e68:	80 91 0c 02 	lds	r24, 0x020C
     e6c:	84 32       	cpi	r24, 0x24	; 36
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <ReachDestinationAvoidingNode+0x82e>
     e70:	80 91 12 02 	lds	r24, 0x0212
     e74:	84 32       	cpi	r24, 0x24	; 36
     e76:	18 f7       	brcc	.-58     	; 0xe3e <ReachDestinationAvoidingNode+0x7f4>
			pos=pos-1;
			m++;
			turn();
     e78:	0e 94 1b 02 	call	0x436	; 0x436 <turn>
				print_sensor(1,5,2);
				print_sensor(1,9,3);
				
				Forward();
			} while (ADC_valueC>35&&ADC_valueL>35&&ADC_valueR>35);
			pos=pos-1;
     e7c:	87 01       	movw	r16, r14
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <ReachDestinationAvoidingNode+0x856>
	{

		e=pos-1;
		b=pos+1;
		c=pos+7;
		d=pos-7;
     e80:	0f 2e       	mov	r0, r31
     e82:	f9 ef       	ldi	r31, 0xF9	; 249
     e84:	ef 2e       	mov	r14, r31
     e86:	ff ef       	ldi	r31, 0xFF	; 255
     e88:	ff 2e       	mov	r15, r31
     e8a:	f0 2d       	mov	r31, r0
     e8c:	e0 0e       	add	r14, r16
     e8e:	f1 1e       	adc	r15, r17
			pos=pos-1;
			m++;
			turn();
		}

		else if(a[i+1]==d)
     e90:	ec 14       	cp	r14, r12
     e92:	fd 04       	cpc	r15, r13
     e94:	29 f4       	brne	.+10     	; 0xea0 <ReachDestinationAvoidingNode+0x856>
		{
			Forward();
     e96:	0e 94 9b 02 	call	0x536	; 0x536 <Forward>
			pos=pos-7;
			m++;
			turn();
     e9a:	0e 94 1b 02 	call	0x436	; 0x436 <turn>
		}

		else if(a[i+1]==d)
		{
			Forward();
			pos=pos-7;
     e9e:	87 01       	movw	r16, r14
			pos=pos+7;
			m++;
			turn();
		}

		Stop();
     ea0:	0e 94 ab 02 	call	0x556	; 0x556 <Stop>
	pos=start;
	int b,c,d,e;
	int f,a[Length];
	f=Length-1;
	m=0;  //for the number of turns
	for (i=0;i<f;i++)
     ea4:	a6 14       	cp	r10, r6
     ea6:	b7 04       	cpc	r11, r7
     ea8:	09 f0       	breq	.+2      	; 0xeac <ReachDestinationAvoidingNode+0x862>
     eaa:	7f cf       	rjmp	.-258    	; 0xdaa <ReachDestinationAvoidingNode+0x760>

		Stop();

	}
			
}	
     eac:	c3 52       	subi	r28, 0x23	; 35
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	a8 81       	ld	r26, Y
     eb2:	b9 81       	ldd	r27, Y+1	; 0x01
     eb4:	cd 5d       	subi	r28, 0xDD	; 221
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	be bf       	out	0x3e, r27	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	ad bf       	out	0x3d, r26	; 61
     ec2:	c0 52       	subi	r28, 0x20	; 32
     ec4:	df 4f       	sbci	r29, 0xFF	; 255
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	8f 90       	pop	r8
     ee8:	7f 90       	pop	r7
     eea:	6f 90       	pop	r6
     eec:	5f 90       	pop	r5
     eee:	4f 90       	pop	r4
     ef0:	3f 90       	pop	r3
     ef2:	2f 90       	pop	r2
     ef4:	08 95       	ret

00000ef6 <main>:

//Do not make changes in main function

int main(void)
{
       ReachDestinationAvoidingNode(5,'D',6,'D');
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	64 e4       	ldi	r22, 0x44	; 68
     efa:	46 e0       	ldi	r20, 0x06	; 6
     efc:	24 e4       	ldi	r18, 0x44	; 68
     efe:	0e 94 25 03 	call	0x64a	; 0x64a <ReachDestinationAvoidingNode>
	   buzzer_on();
     f02:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <buzzer_on>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f e7       	ldi	r25, 0x7F	; 127
     f0a:	a6 e1       	ldi	r26, 0x16	; 22
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	a0 40       	sbci	r26, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <main+0x16>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <main+0x20>
     f16:	00 00       	nop
	   _delay_ms(500);
	   buzzer_off();
     f18:	0e 94 00 02 	call	0x400	; 0x400 <buzzer_off>
	   ReachDestinationAvoidingNode(2,'F',2,'D');
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	66 e4       	ldi	r22, 0x46	; 70
     f20:	42 e0       	ldi	r20, 0x02	; 2
     f22:	24 e4       	ldi	r18, 0x44	; 68
     f24:	0e 94 25 03 	call	0x64a	; 0x64a <ReachDestinationAvoidingNode>
	   buzzer_on();
     f28:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <buzzer_on>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f e7       	ldi	r25, 0x7F	; 127
     f30:	a6 e1       	ldi	r26, 0x16	; 22
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	90 40       	sbci	r25, 0x00	; 0
     f36:	a0 40       	sbci	r26, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <main+0x3c>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <main+0x46>
     f3c:	00 00       	nop
	   _delay_ms(500);
	   buzzer_off();
     f3e:	0e 94 00 02 	call	0x400	; 0x400 <buzzer_off>
	   ReachDestinationAvoidingNode(2,'A',2,'C');
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	61 e4       	ldi	r22, 0x41	; 65
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	23 e4       	ldi	r18, 0x43	; 67
     f4a:	0e 94 25 03 	call	0x64a	; 0x64a <ReachDestinationAvoidingNode>
	   buzzer_on();
     f4e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <buzzer_on>
	   
}
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__udivmodhi4>:
     f58:	aa 1b       	sub	r26, r26
     f5a:	bb 1b       	sub	r27, r27
     f5c:	51 e1       	ldi	r21, 0x11	; 17
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <__udivmodhi4_ep>

00000f60 <__udivmodhi4_loop>:
     f60:	aa 1f       	adc	r26, r26
     f62:	bb 1f       	adc	r27, r27
     f64:	a6 17       	cp	r26, r22
     f66:	b7 07       	cpc	r27, r23
     f68:	10 f0       	brcs	.+4      	; 0xf6e <__udivmodhi4_ep>
     f6a:	a6 1b       	sub	r26, r22
     f6c:	b7 0b       	sbc	r27, r23

00000f6e <__udivmodhi4_ep>:
     f6e:	88 1f       	adc	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	5a 95       	dec	r21
     f74:	a9 f7       	brne	.-22     	; 0xf60 <__udivmodhi4_loop>
     f76:	80 95       	com	r24
     f78:	90 95       	com	r25
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	08 95       	ret

00000f80 <printf>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	fe 01       	movw	r30, r28
     f8a:	36 96       	adiw	r30, 0x06	; 6
     f8c:	61 91       	ld	r22, Z+
     f8e:	71 91       	ld	r23, Z+
     f90:	80 91 1f 02 	lds	r24, 0x021F
     f94:	90 91 20 02 	lds	r25, 0x0220
     f98:	af 01       	movw	r20, r30
     f9a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vfprintf>
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <vfprintf>:
     fa4:	2f 92       	push	r2
     fa6:	3f 92       	push	r3
     fa8:	4f 92       	push	r4
     faa:	5f 92       	push	r5
     fac:	6f 92       	push	r6
     fae:	7f 92       	push	r7
     fb0:	8f 92       	push	r8
     fb2:	9f 92       	push	r9
     fb4:	af 92       	push	r10
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2d 97       	sbiw	r28, 0x0d	; 13
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	3c 01       	movw	r6, r24
     fda:	7d 87       	std	Y+13, r23	; 0x0d
     fdc:	6c 87       	std	Y+12, r22	; 0x0c
     fde:	5a 01       	movw	r10, r20
     fe0:	fc 01       	movw	r30, r24
     fe2:	17 82       	std	Z+7, r1	; 0x07
     fe4:	16 82       	std	Z+6, r1	; 0x06
     fe6:	83 81       	ldd	r24, Z+3	; 0x03
     fe8:	81 ff       	sbrs	r24, 1
     fea:	c8 c1       	rjmp	.+912    	; 0x137c <vfprintf+0x3d8>
     fec:	2e 01       	movw	r4, r28
     fee:	08 94       	sec
     ff0:	41 1c       	adc	r4, r1
     ff2:	51 1c       	adc	r5, r1
     ff4:	f3 01       	movw	r30, r6
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	ec 85       	ldd	r30, Y+12	; 0x0c
     ffa:	fd 85       	ldd	r31, Y+13	; 0x0d
     ffc:	93 fd       	sbrc	r25, 3
     ffe:	85 91       	lpm	r24, Z+
    1000:	93 ff       	sbrs	r25, 3
    1002:	81 91       	ld	r24, Z+
    1004:	fd 87       	std	Y+13, r31	; 0x0d
    1006:	ec 87       	std	Y+12, r30	; 0x0c
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <vfprintf+0x6a>
    100c:	b3 c1       	rjmp	.+870    	; 0x1374 <vfprintf+0x3d0>
    100e:	85 32       	cpi	r24, 0x25	; 37
    1010:	41 f4       	brne	.+16     	; 0x1022 <vfprintf+0x7e>
    1012:	93 fd       	sbrc	r25, 3
    1014:	85 91       	lpm	r24, Z+
    1016:	93 ff       	sbrs	r25, 3
    1018:	81 91       	ld	r24, Z+
    101a:	fd 87       	std	Y+13, r31	; 0x0d
    101c:	ec 87       	std	Y+12, r30	; 0x0c
    101e:	85 32       	cpi	r24, 0x25	; 37
    1020:	29 f4       	brne	.+10     	; 0x102c <vfprintf+0x88>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b3 01       	movw	r22, r6
    1026:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    102a:	e4 cf       	rjmp	.-56     	; 0xff4 <vfprintf+0x50>
    102c:	ff 24       	eor	r15, r15
    102e:	ee 24       	eor	r14, r14
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	10 32       	cpi	r17, 0x20	; 32
    1034:	b0 f4       	brcc	.+44     	; 0x1062 <vfprintf+0xbe>
    1036:	8b 32       	cpi	r24, 0x2B	; 43
    1038:	69 f0       	breq	.+26     	; 0x1054 <vfprintf+0xb0>
    103a:	8c 32       	cpi	r24, 0x2C	; 44
    103c:	28 f4       	brcc	.+10     	; 0x1048 <vfprintf+0xa4>
    103e:	80 32       	cpi	r24, 0x20	; 32
    1040:	51 f0       	breq	.+20     	; 0x1056 <vfprintf+0xb2>
    1042:	83 32       	cpi	r24, 0x23	; 35
    1044:	71 f4       	brne	.+28     	; 0x1062 <vfprintf+0xbe>
    1046:	0b c0       	rjmp	.+22     	; 0x105e <vfprintf+0xba>
    1048:	8d 32       	cpi	r24, 0x2D	; 45
    104a:	39 f0       	breq	.+14     	; 0x105a <vfprintf+0xb6>
    104c:	80 33       	cpi	r24, 0x30	; 48
    104e:	49 f4       	brne	.+18     	; 0x1062 <vfprintf+0xbe>
    1050:	11 60       	ori	r17, 0x01	; 1
    1052:	2c c0       	rjmp	.+88     	; 0x10ac <vfprintf+0x108>
    1054:	12 60       	ori	r17, 0x02	; 2
    1056:	14 60       	ori	r17, 0x04	; 4
    1058:	29 c0       	rjmp	.+82     	; 0x10ac <vfprintf+0x108>
    105a:	18 60       	ori	r17, 0x08	; 8
    105c:	27 c0       	rjmp	.+78     	; 0x10ac <vfprintf+0x108>
    105e:	10 61       	ori	r17, 0x10	; 16
    1060:	25 c0       	rjmp	.+74     	; 0x10ac <vfprintf+0x108>
    1062:	17 fd       	sbrc	r17, 7
    1064:	2e c0       	rjmp	.+92     	; 0x10c2 <vfprintf+0x11e>
    1066:	28 2f       	mov	r18, r24
    1068:	20 53       	subi	r18, 0x30	; 48
    106a:	2a 30       	cpi	r18, 0x0A	; 10
    106c:	98 f4       	brcc	.+38     	; 0x1094 <vfprintf+0xf0>
    106e:	16 ff       	sbrs	r17, 6
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <vfprintf+0xde>
    1072:	8f 2d       	mov	r24, r15
    1074:	88 0f       	add	r24, r24
    1076:	f8 2e       	mov	r15, r24
    1078:	ff 0c       	add	r15, r15
    107a:	ff 0c       	add	r15, r15
    107c:	f8 0e       	add	r15, r24
    107e:	f2 0e       	add	r15, r18
    1080:	15 c0       	rjmp	.+42     	; 0x10ac <vfprintf+0x108>
    1082:	8e 2d       	mov	r24, r14
    1084:	88 0f       	add	r24, r24
    1086:	e8 2e       	mov	r14, r24
    1088:	ee 0c       	add	r14, r14
    108a:	ee 0c       	add	r14, r14
    108c:	e8 0e       	add	r14, r24
    108e:	e2 0e       	add	r14, r18
    1090:	10 62       	ori	r17, 0x20	; 32
    1092:	0c c0       	rjmp	.+24     	; 0x10ac <vfprintf+0x108>
    1094:	8e 32       	cpi	r24, 0x2E	; 46
    1096:	21 f4       	brne	.+8      	; 0x10a0 <vfprintf+0xfc>
    1098:	16 fd       	sbrc	r17, 6
    109a:	6c c1       	rjmp	.+728    	; 0x1374 <vfprintf+0x3d0>
    109c:	10 64       	ori	r17, 0x40	; 64
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x108>
    10a0:	8c 36       	cpi	r24, 0x6C	; 108
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <vfprintf+0x104>
    10a4:	10 68       	ori	r17, 0x80	; 128
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x108>
    10a8:	88 36       	cpi	r24, 0x68	; 104
    10aa:	59 f4       	brne	.+22     	; 0x10c2 <vfprintf+0x11e>
    10ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    10ae:	fd 85       	ldd	r31, Y+13	; 0x0d
    10b0:	93 fd       	sbrc	r25, 3
    10b2:	85 91       	lpm	r24, Z+
    10b4:	93 ff       	sbrs	r25, 3
    10b6:	81 91       	ld	r24, Z+
    10b8:	fd 87       	std	Y+13, r31	; 0x0d
    10ba:	ec 87       	std	Y+12, r30	; 0x0c
    10bc:	88 23       	and	r24, r24
    10be:	09 f0       	breq	.+2      	; 0x10c2 <vfprintf+0x11e>
    10c0:	b8 cf       	rjmp	.-144    	; 0x1032 <vfprintf+0x8e>
    10c2:	98 2f       	mov	r25, r24
    10c4:	95 54       	subi	r25, 0x45	; 69
    10c6:	93 30       	cpi	r25, 0x03	; 3
    10c8:	18 f0       	brcs	.+6      	; 0x10d0 <vfprintf+0x12c>
    10ca:	90 52       	subi	r25, 0x20	; 32
    10cc:	93 30       	cpi	r25, 0x03	; 3
    10ce:	38 f4       	brcc	.+14     	; 0x10de <vfprintf+0x13a>
    10d0:	24 e0       	ldi	r18, 0x04	; 4
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a2 0e       	add	r10, r18
    10d6:	b3 1e       	adc	r11, r19
    10d8:	3f e3       	ldi	r19, 0x3F	; 63
    10da:	39 83       	std	Y+1, r19	; 0x01
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <vfprintf+0x158>
    10de:	83 36       	cpi	r24, 0x63	; 99
    10e0:	31 f0       	breq	.+12     	; 0x10ee <vfprintf+0x14a>
    10e2:	83 37       	cpi	r24, 0x73	; 115
    10e4:	81 f0       	breq	.+32     	; 0x1106 <vfprintf+0x162>
    10e6:	83 35       	cpi	r24, 0x53	; 83
    10e8:	09 f0       	breq	.+2      	; 0x10ec <vfprintf+0x148>
    10ea:	5a c0       	rjmp	.+180    	; 0x11a0 <vfprintf+0x1fc>
    10ec:	22 c0       	rjmp	.+68     	; 0x1132 <vfprintf+0x18e>
    10ee:	f5 01       	movw	r30, r10
    10f0:	80 81       	ld	r24, Z
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	22 e0       	ldi	r18, 0x02	; 2
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a2 0e       	add	r10, r18
    10fa:	b3 1e       	adc	r11, r19
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	c2 2e       	mov	r12, r18
    1100:	d1 2c       	mov	r13, r1
    1102:	42 01       	movw	r8, r4
    1104:	14 c0       	rjmp	.+40     	; 0x112e <vfprintf+0x18a>
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	29 2e       	mov	r2, r25
    110a:	31 2c       	mov	r3, r1
    110c:	2a 0c       	add	r2, r10
    110e:	3b 1c       	adc	r3, r11
    1110:	f5 01       	movw	r30, r10
    1112:	80 80       	ld	r8, Z
    1114:	91 80       	ldd	r9, Z+1	; 0x01
    1116:	16 ff       	sbrs	r17, 6
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <vfprintf+0x17c>
    111a:	6f 2d       	mov	r22, r15
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <vfprintf+0x180>
    1120:	6f ef       	ldi	r22, 0xFF	; 255
    1122:	7f ef       	ldi	r23, 0xFF	; 255
    1124:	c4 01       	movw	r24, r8
    1126:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <strnlen>
    112a:	6c 01       	movw	r12, r24
    112c:	51 01       	movw	r10, r2
    112e:	1f 77       	andi	r17, 0x7F	; 127
    1130:	15 c0       	rjmp	.+42     	; 0x115c <vfprintf+0x1b8>
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	28 2e       	mov	r2, r24
    1136:	31 2c       	mov	r3, r1
    1138:	2a 0c       	add	r2, r10
    113a:	3b 1c       	adc	r3, r11
    113c:	f5 01       	movw	r30, r10
    113e:	80 80       	ld	r8, Z
    1140:	91 80       	ldd	r9, Z+1	; 0x01
    1142:	16 ff       	sbrs	r17, 6
    1144:	03 c0       	rjmp	.+6      	; 0x114c <vfprintf+0x1a8>
    1146:	6f 2d       	mov	r22, r15
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <vfprintf+0x1ac>
    114c:	6f ef       	ldi	r22, 0xFF	; 255
    114e:	7f ef       	ldi	r23, 0xFF	; 255
    1150:	c4 01       	movw	r24, r8
    1152:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <strnlen_P>
    1156:	6c 01       	movw	r12, r24
    1158:	10 68       	ori	r17, 0x80	; 128
    115a:	51 01       	movw	r10, r2
    115c:	13 fd       	sbrc	r17, 3
    115e:	1c c0       	rjmp	.+56     	; 0x1198 <vfprintf+0x1f4>
    1160:	06 c0       	rjmp	.+12     	; 0x116e <vfprintf+0x1ca>
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b3 01       	movw	r22, r6
    1168:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    116c:	ea 94       	dec	r14
    116e:	8e 2d       	mov	r24, r14
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	c8 16       	cp	r12, r24
    1174:	d9 06       	cpc	r13, r25
    1176:	a8 f3       	brcs	.-22     	; 0x1162 <vfprintf+0x1be>
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <vfprintf+0x1f4>
    117a:	f4 01       	movw	r30, r8
    117c:	17 fd       	sbrc	r17, 7
    117e:	85 91       	lpm	r24, Z+
    1180:	17 ff       	sbrs	r17, 7
    1182:	81 91       	ld	r24, Z+
    1184:	4f 01       	movw	r8, r30
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	b3 01       	movw	r22, r6
    118a:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    118e:	e1 10       	cpse	r14, r1
    1190:	ea 94       	dec	r14
    1192:	08 94       	sec
    1194:	c1 08       	sbc	r12, r1
    1196:	d1 08       	sbc	r13, r1
    1198:	c1 14       	cp	r12, r1
    119a:	d1 04       	cpc	r13, r1
    119c:	71 f7       	brne	.-36     	; 0x117a <vfprintf+0x1d6>
    119e:	e7 c0       	rjmp	.+462    	; 0x136e <vfprintf+0x3ca>
    11a0:	84 36       	cpi	r24, 0x64	; 100
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <vfprintf+0x204>
    11a4:	89 36       	cpi	r24, 0x69	; 105
    11a6:	51 f5       	brne	.+84     	; 0x11fc <vfprintf+0x258>
    11a8:	f5 01       	movw	r30, r10
    11aa:	17 ff       	sbrs	r17, 7
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <vfprintf+0x218>
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	a2 81       	ldd	r26, Z+2	; 0x02
    11b4:	b3 81       	ldd	r27, Z+3	; 0x03
    11b6:	24 e0       	ldi	r18, 0x04	; 4
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <vfprintf+0x228>
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	aa 27       	eor	r26, r26
    11c2:	97 fd       	sbrc	r25, 7
    11c4:	a0 95       	com	r26
    11c6:	ba 2f       	mov	r27, r26
    11c8:	22 e0       	ldi	r18, 0x02	; 2
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	a2 0e       	add	r10, r18
    11ce:	b3 1e       	adc	r11, r19
    11d0:	01 2f       	mov	r16, r17
    11d2:	0f 76       	andi	r16, 0x6F	; 111
    11d4:	b7 ff       	sbrs	r27, 7
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <vfprintf+0x244>
    11d8:	b0 95       	com	r27
    11da:	a0 95       	com	r26
    11dc:	90 95       	com	r25
    11de:	81 95       	neg	r24
    11e0:	9f 4f       	sbci	r25, 0xFF	; 255
    11e2:	af 4f       	sbci	r26, 0xFF	; 255
    11e4:	bf 4f       	sbci	r27, 0xFF	; 255
    11e6:	00 68       	ori	r16, 0x80	; 128
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	a2 01       	movw	r20, r4
    11ee:	2a e0       	ldi	r18, 0x0A	; 10
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__ultoa_invert>
    11f6:	d8 2e       	mov	r13, r24
    11f8:	d4 18       	sub	r13, r4
    11fa:	3f c0       	rjmp	.+126    	; 0x127a <vfprintf+0x2d6>
    11fc:	85 37       	cpi	r24, 0x75	; 117
    11fe:	21 f4       	brne	.+8      	; 0x1208 <vfprintf+0x264>
    1200:	1f 7e       	andi	r17, 0xEF	; 239
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	20 c0       	rjmp	.+64     	; 0x1248 <vfprintf+0x2a4>
    1208:	19 7f       	andi	r17, 0xF9	; 249
    120a:	8f 36       	cpi	r24, 0x6F	; 111
    120c:	a9 f0       	breq	.+42     	; 0x1238 <vfprintf+0x294>
    120e:	80 37       	cpi	r24, 0x70	; 112
    1210:	20 f4       	brcc	.+8      	; 0x121a <vfprintf+0x276>
    1212:	88 35       	cpi	r24, 0x58	; 88
    1214:	09 f0       	breq	.+2      	; 0x1218 <vfprintf+0x274>
    1216:	ae c0       	rjmp	.+348    	; 0x1374 <vfprintf+0x3d0>
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <vfprintf+0x28c>
    121a:	80 37       	cpi	r24, 0x70	; 112
    121c:	21 f0       	breq	.+8      	; 0x1226 <vfprintf+0x282>
    121e:	88 37       	cpi	r24, 0x78	; 120
    1220:	09 f0       	breq	.+2      	; 0x1224 <vfprintf+0x280>
    1222:	a8 c0       	rjmp	.+336    	; 0x1374 <vfprintf+0x3d0>
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <vfprintf+0x284>
    1226:	10 61       	ori	r17, 0x10	; 16
    1228:	14 ff       	sbrs	r17, 4
    122a:	09 c0       	rjmp	.+18     	; 0x123e <vfprintf+0x29a>
    122c:	14 60       	ori	r17, 0x04	; 4
    122e:	07 c0       	rjmp	.+14     	; 0x123e <vfprintf+0x29a>
    1230:	14 ff       	sbrs	r17, 4
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <vfprintf+0x2a0>
    1234:	16 60       	ori	r17, 0x06	; 6
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0x2a0>
    1238:	28 e0       	ldi	r18, 0x08	; 8
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <vfprintf+0x2a4>
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x2a4>
    1244:	20 e1       	ldi	r18, 0x10	; 16
    1246:	32 e0       	ldi	r19, 0x02	; 2
    1248:	f5 01       	movw	r30, r10
    124a:	17 ff       	sbrs	r17, 7
    124c:	07 c0       	rjmp	.+14     	; 0x125c <vfprintf+0x2b8>
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	44 e0       	ldi	r20, 0x04	; 4
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x2c4>
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	42 e0       	ldi	r20, 0x02	; 2
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	a4 0e       	add	r10, r20
    126a:	b5 1e       	adc	r11, r21
    126c:	a2 01       	movw	r20, r4
    126e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__ultoa_invert>
    1272:	d8 2e       	mov	r13, r24
    1274:	d4 18       	sub	r13, r4
    1276:	01 2f       	mov	r16, r17
    1278:	0f 77       	andi	r16, 0x7F	; 127
    127a:	06 ff       	sbrs	r16, 6
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <vfprintf+0x2ec>
    127e:	0e 7f       	andi	r16, 0xFE	; 254
    1280:	df 14       	cp	r13, r15
    1282:	30 f4       	brcc	.+12     	; 0x1290 <vfprintf+0x2ec>
    1284:	04 ff       	sbrs	r16, 4
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <vfprintf+0x2f0>
    1288:	02 fd       	sbrc	r16, 2
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <vfprintf+0x2f0>
    128c:	0f 7e       	andi	r16, 0xEF	; 239
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x2f0>
    1290:	1d 2d       	mov	r17, r13
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <vfprintf+0x2f2>
    1294:	1f 2d       	mov	r17, r15
    1296:	80 2f       	mov	r24, r16
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	04 ff       	sbrs	r16, 4
    129c:	0c c0       	rjmp	.+24     	; 0x12b6 <vfprintf+0x312>
    129e:	fe 01       	movw	r30, r28
    12a0:	ed 0d       	add	r30, r13
    12a2:	f1 1d       	adc	r31, r1
    12a4:	20 81       	ld	r18, Z
    12a6:	20 33       	cpi	r18, 0x30	; 48
    12a8:	11 f4       	brne	.+4      	; 0x12ae <vfprintf+0x30a>
    12aa:	09 7e       	andi	r16, 0xE9	; 233
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <vfprintf+0x31c>
    12ae:	02 ff       	sbrs	r16, 2
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <vfprintf+0x31a>
    12b2:	1e 5f       	subi	r17, 0xFE	; 254
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <vfprintf+0x31c>
    12b6:	86 78       	andi	r24, 0x86	; 134
    12b8:	90 70       	andi	r25, 0x00	; 0
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <vfprintf+0x31c>
    12be:	1f 5f       	subi	r17, 0xFF	; 255
    12c0:	80 2e       	mov	r8, r16
    12c2:	99 24       	eor	r9, r9
    12c4:	03 fd       	sbrc	r16, 3
    12c6:	12 c0       	rjmp	.+36     	; 0x12ec <vfprintf+0x348>
    12c8:	00 ff       	sbrs	r16, 0
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <vfprintf+0x342>
    12cc:	fd 2c       	mov	r15, r13
    12ce:	1e 15       	cp	r17, r14
    12d0:	50 f4       	brcc	.+20     	; 0x12e6 <vfprintf+0x342>
    12d2:	fe 0c       	add	r15, r14
    12d4:	f1 1a       	sub	r15, r17
    12d6:	1e 2d       	mov	r17, r14
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <vfprintf+0x342>
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	b3 01       	movw	r22, r6
    12e0:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    12e4:	1f 5f       	subi	r17, 0xFF	; 255
    12e6:	1e 15       	cp	r17, r14
    12e8:	c0 f3       	brcs	.-16     	; 0x12da <vfprintf+0x336>
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <vfprintf+0x350>
    12ec:	1e 15       	cp	r17, r14
    12ee:	10 f4       	brcc	.+4      	; 0x12f4 <vfprintf+0x350>
    12f0:	e1 1a       	sub	r14, r17
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <vfprintf+0x352>
    12f4:	ee 24       	eor	r14, r14
    12f6:	84 fe       	sbrs	r8, 4
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <vfprintf+0x374>
    12fa:	80 e3       	ldi	r24, 0x30	; 48
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b3 01       	movw	r22, r6
    1300:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    1304:	82 fe       	sbrs	r8, 2
    1306:	1f c0       	rjmp	.+62     	; 0x1346 <vfprintf+0x3a2>
    1308:	81 fe       	sbrs	r8, 1
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <vfprintf+0x36e>
    130c:	88 e5       	ldi	r24, 0x58	; 88
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	10 c0       	rjmp	.+32     	; 0x1332 <vfprintf+0x38e>
    1312:	88 e7       	ldi	r24, 0x78	; 120
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0d c0       	rjmp	.+26     	; 0x1332 <vfprintf+0x38e>
    1318:	c4 01       	movw	r24, r8
    131a:	86 78       	andi	r24, 0x86	; 134
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	91 f0       	breq	.+36     	; 0x1346 <vfprintf+0x3a2>
    1322:	81 fc       	sbrc	r8, 1
    1324:	02 c0       	rjmp	.+4      	; 0x132a <vfprintf+0x386>
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	01 c0       	rjmp	.+2      	; 0x132c <vfprintf+0x388>
    132a:	8b e2       	ldi	r24, 0x2B	; 43
    132c:	07 fd       	sbrc	r16, 7
    132e:	8d e2       	ldi	r24, 0x2D	; 45
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	b3 01       	movw	r22, r6
    1334:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <vfprintf+0x3a2>
    133a:	80 e3       	ldi	r24, 0x30	; 48
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	b3 01       	movw	r22, r6
    1340:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    1344:	fa 94       	dec	r15
    1346:	df 14       	cp	r13, r15
    1348:	c0 f3       	brcs	.-16     	; 0x133a <vfprintf+0x396>
    134a:	da 94       	dec	r13
    134c:	f2 01       	movw	r30, r4
    134e:	ed 0d       	add	r30, r13
    1350:	f1 1d       	adc	r31, r1
    1352:	80 81       	ld	r24, Z
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	b3 01       	movw	r22, r6
    1358:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    135c:	dd 20       	and	r13, r13
    135e:	a9 f7       	brne	.-22     	; 0x134a <vfprintf+0x3a6>
    1360:	06 c0       	rjmp	.+12     	; 0x136e <vfprintf+0x3ca>
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	b3 01       	movw	r22, r6
    1368:	0e 94 ef 09 	call	0x13de	; 0x13de <fputc>
    136c:	ea 94       	dec	r14
    136e:	ee 20       	and	r14, r14
    1370:	c1 f7       	brne	.-16     	; 0x1362 <vfprintf+0x3be>
    1372:	40 ce       	rjmp	.-896    	; 0xff4 <vfprintf+0x50>
    1374:	f3 01       	movw	r30, r6
    1376:	86 81       	ldd	r24, Z+6	; 0x06
    1378:	97 81       	ldd	r25, Z+7	; 0x07
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x3dc>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	9f ef       	ldi	r25, 0xFF	; 255
    1380:	2d 96       	adiw	r28, 0x0d	; 13
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	7f 90       	pop	r7
    13a6:	6f 90       	pop	r6
    13a8:	5f 90       	pop	r5
    13aa:	4f 90       	pop	r4
    13ac:	3f 90       	pop	r3
    13ae:	2f 90       	pop	r2
    13b0:	08 95       	ret

000013b2 <strnlen_P>:
    13b2:	fc 01       	movw	r30, r24
    13b4:	05 90       	lpm	r0, Z+
    13b6:	61 50       	subi	r22, 0x01	; 1
    13b8:	70 40       	sbci	r23, 0x00	; 0
    13ba:	01 10       	cpse	r0, r1
    13bc:	d8 f7       	brcc	.-10     	; 0x13b4 <strnlen_P+0x2>
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	8e 0f       	add	r24, r30
    13c4:	9f 1f       	adc	r25, r31
    13c6:	08 95       	ret

000013c8 <strnlen>:
    13c8:	fc 01       	movw	r30, r24
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	70 40       	sbci	r23, 0x00	; 0
    13ce:	01 90       	ld	r0, Z+
    13d0:	01 10       	cpse	r0, r1
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <strnlen+0x2>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	08 95       	ret

000013de <fputc>:
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	8c 01       	movw	r16, r24
    13e8:	eb 01       	movw	r28, r22
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	81 ff       	sbrs	r24, 1
    13ee:	1b c0       	rjmp	.+54     	; 0x1426 <fputc+0x48>
    13f0:	82 ff       	sbrs	r24, 2
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <fputc+0x30>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	28 17       	cp	r18, r24
    13fe:	39 07       	cpc	r19, r25
    1400:	64 f4       	brge	.+24     	; 0x141a <fputc+0x3c>
    1402:	e8 81       	ld	r30, Y
    1404:	f9 81       	ldd	r31, Y+1	; 0x01
    1406:	01 93       	st	Z+, r16
    1408:	f9 83       	std	Y+1, r31	; 0x01
    140a:	e8 83       	st	Y, r30
    140c:	06 c0       	rjmp	.+12     	; 0x141a <fputc+0x3c>
    140e:	e8 85       	ldd	r30, Y+8	; 0x08
    1410:	f9 85       	ldd	r31, Y+9	; 0x09
    1412:	80 2f       	mov	r24, r16
    1414:	19 95       	eicall
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	31 f4       	brne	.+12     	; 0x1426 <fputc+0x48>
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	9f 81       	ldd	r25, Y+7	; 0x07
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	9f 83       	std	Y+7, r25	; 0x07
    1422:	8e 83       	std	Y+6, r24	; 0x06
    1424:	02 c0       	rjmp	.+4      	; 0x142a <fputc+0x4c>
    1426:	0f ef       	ldi	r16, 0xFF	; 255
    1428:	1f ef       	ldi	r17, 0xFF	; 255
    142a:	c8 01       	movw	r24, r16
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	08 95       	ret

00001436 <__ultoa_invert>:
    1436:	fa 01       	movw	r30, r20
    1438:	aa 27       	eor	r26, r26
    143a:	28 30       	cpi	r18, 0x08	; 8
    143c:	51 f1       	breq	.+84     	; 0x1492 <__ultoa_invert+0x5c>
    143e:	20 31       	cpi	r18, 0x10	; 16
    1440:	81 f1       	breq	.+96     	; 0x14a2 <__ultoa_invert+0x6c>
    1442:	e8 94       	clt
    1444:	6f 93       	push	r22
    1446:	6e 7f       	andi	r22, 0xFE	; 254
    1448:	6e 5f       	subi	r22, 0xFE	; 254
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	af 4f       	sbci	r26, 0xFF	; 255
    1452:	b1 e0       	ldi	r27, 0x01	; 1
    1454:	3e d0       	rcall	.+124    	; 0x14d2 <__ultoa_invert+0x9c>
    1456:	b4 e0       	ldi	r27, 0x04	; 4
    1458:	3c d0       	rcall	.+120    	; 0x14d2 <__ultoa_invert+0x9c>
    145a:	67 0f       	add	r22, r23
    145c:	78 1f       	adc	r23, r24
    145e:	89 1f       	adc	r24, r25
    1460:	9a 1f       	adc	r25, r26
    1462:	a1 1d       	adc	r26, r1
    1464:	68 0f       	add	r22, r24
    1466:	79 1f       	adc	r23, r25
    1468:	8a 1f       	adc	r24, r26
    146a:	91 1d       	adc	r25, r1
    146c:	a1 1d       	adc	r26, r1
    146e:	6a 0f       	add	r22, r26
    1470:	71 1d       	adc	r23, r1
    1472:	81 1d       	adc	r24, r1
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	20 d0       	rcall	.+64     	; 0x14ba <__ultoa_invert+0x84>
    147a:	09 f4       	brne	.+2      	; 0x147e <__ultoa_invert+0x48>
    147c:	68 94       	set
    147e:	3f 91       	pop	r19
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	26 9f       	mul	r18, r22
    1484:	11 24       	eor	r1, r1
    1486:	30 19       	sub	r19, r0
    1488:	30 5d       	subi	r19, 0xD0	; 208
    148a:	31 93       	st	Z+, r19
    148c:	de f6       	brtc	.-74     	; 0x1444 <__ultoa_invert+0xe>
    148e:	cf 01       	movw	r24, r30
    1490:	08 95       	ret
    1492:	46 2f       	mov	r20, r22
    1494:	47 70       	andi	r20, 0x07	; 7
    1496:	40 5d       	subi	r20, 0xD0	; 208
    1498:	41 93       	st	Z+, r20
    149a:	b3 e0       	ldi	r27, 0x03	; 3
    149c:	0f d0       	rcall	.+30     	; 0x14bc <__ultoa_invert+0x86>
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__ultoa_invert+0x5c>
    14a0:	f6 cf       	rjmp	.-20     	; 0x148e <__ultoa_invert+0x58>
    14a2:	46 2f       	mov	r20, r22
    14a4:	4f 70       	andi	r20, 0x0F	; 15
    14a6:	40 5d       	subi	r20, 0xD0	; 208
    14a8:	4a 33       	cpi	r20, 0x3A	; 58
    14aa:	18 f0       	brcs	.+6      	; 0x14b2 <__ultoa_invert+0x7c>
    14ac:	49 5d       	subi	r20, 0xD9	; 217
    14ae:	31 fd       	sbrc	r19, 1
    14b0:	40 52       	subi	r20, 0x20	; 32
    14b2:	41 93       	st	Z+, r20
    14b4:	02 d0       	rcall	.+4      	; 0x14ba <__ultoa_invert+0x84>
    14b6:	a9 f7       	brne	.-22     	; 0x14a2 <__ultoa_invert+0x6c>
    14b8:	ea cf       	rjmp	.-44     	; 0x148e <__ultoa_invert+0x58>
    14ba:	b4 e0       	ldi	r27, 0x04	; 4
    14bc:	a6 95       	lsr	r26
    14be:	97 95       	ror	r25
    14c0:	87 95       	ror	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	ba 95       	dec	r27
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__ultoa_invert+0x86>
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 05       	cpc	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	08 95       	ret
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	0a 2e       	mov	r0, r26
    14d8:	06 94       	lsr	r0
    14da:	57 95       	ror	r21
    14dc:	47 95       	ror	r20
    14de:	37 95       	ror	r19
    14e0:	27 95       	ror	r18
    14e2:	ba 95       	dec	r27
    14e4:	c9 f7       	brne	.-14     	; 0x14d8 <__ultoa_invert+0xa2>
    14e6:	62 0f       	add	r22, r18
    14e8:	73 1f       	adc	r23, r19
    14ea:	84 1f       	adc	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	a0 1d       	adc	r26, r0
    14f0:	08 95       	ret

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
